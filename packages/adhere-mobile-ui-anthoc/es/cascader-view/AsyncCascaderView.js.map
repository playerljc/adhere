{"version":3,"file":"AsyncCascaderView.js","sources":["cascader-view/AsyncCascaderView.js"],"sourcesContent":["var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useUpdateEffect } from 'ahooks';\nimport difference from 'lodash/difference';\nimport React, { memo, useMemo, useRef, useState } from 'react';\nimport { useImmer } from 'use-immer';\nimport Util from '@baifendian/adhere-util';\nimport { treeTransformConfig } from '../TreeFilter';\nimport InternalCascaderView from './InternalCascaderView';\n/**\n * InternalAsyncCascader\n */\nvar InternalAsyncCascader = /*#__PURE__*/memo(function (_a) {\n  var _b;\n  var loadData = _a.loadData,\n    _c = _a.isEveryAsync,\n    isEveryAsync = _c === void 0 ? false : _c,\n    internalCascaderViewProps = __rest(_a, [\"loadData\", \"isEveryAsync\"]);\n  var _d = useImmer(internalCascaderViewProps.options),\n    options = _d[0],\n    setOptions = _d[1];\n  // 加载状态\n  var _e = useState(false),\n    loading = _e[0],\n    setLoading = _e[1];\n  // 保存上一次的值\n  var preValue = useRef((_b = internalCascaderViewProps.value) !== null && _b !== void 0 ? _b : internalCascaderViewProps.defaultValue);\n  // 将树形数据转换为扁平数据\n  var flatOptions = useMemo(function () {\n    if (internalCascaderViewProps.treeDataSimpleMode) {\n      return options;\n    }\n    // @ts-ignore\n    return Util.treeToArray(options !== null && options !== void 0 ? options : [], treeTransformConfig);\n  }, [options, internalCascaderViewProps.treeDataSimpleMode]);\n  /**\n   * findTreeNodeByValue\n   * @description 根据 value 查找节点\n   * @param _treeData\n   * @param _value\n   */\n  function findTreeNodeByValue(_treeData, _value) {\n    // 如果是简单模式，直接查找\n    if (internalCascaderViewProps.treeDataSimpleMode) {\n      return _treeData.find(function (_option) {\n        return _option.value === _value;\n      });\n    }\n    // 递归查找\n    function loop(children) {\n      for (var i = 0; i < children.length; i++) {\n        var item = children[i];\n        if (item.value === _value) {\n          return item;\n        }\n        if (item.children) {\n          var result = loop(item.children);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    // 如果是树形数据，递归查找\n    return loop(_treeData);\n  }\n  /**\n   * deleteChildrenByValue\n   * @description 根据 value 删除子节点\n   * @param draft 树形数据\n   * @param value\n   */\n  function deleteChildrenByValue(draft, value) {\n    var deleteIndexes = [];\n    function loop(parentId) {\n      for (var i = 0; i < draft.length; i++) {\n        var child = draft[i];\n        if (child.pId === parentId) {\n          deleteIndexes.push(i);\n          loop(child.value);\n        }\n      }\n    }\n    loop(value);\n    deleteIndexes.forEach(function (index) {\n      draft.splice(index, 1);\n    });\n  }\n  /**\n   * onChange\n   * @description onChange\n   * @param _values\n   * @param extend\n   */\n  function onChange(_values, extend) {\n    var _a, _b, _c;\n    // 使用 lodash 的 difference 函数来找出新增的元素\n    var addedItems = difference(_values, preValue.current);\n    // 如果没有新增的元素，直接返回\n    if (addedItems.length <= 0) {\n      preValue.current = _values;\n      (_a = internalCascaderViewProps === null || internalCascaderViewProps === void 0 ? void 0 : internalCascaderViewProps.onChange) === null || _a === void 0 ? void 0 : _a.call(internalCascaderViewProps, _values, extend);\n      return;\n    }\n    // 只处理第一个，因为只有一个\n    var addedItem = flatOptions.find(function (_option) {\n      return _option.value === addedItems[0];\n    });\n    // 如果没有找到，直接返回\n    if (!addedItem) {\n      preValue.current = _values;\n      (_b = internalCascaderViewProps === null || internalCascaderViewProps === void 0 ? void 0 : internalCascaderViewProps.onChange) === null || _b === void 0 ? void 0 : _b.call(internalCascaderViewProps, _values, extend);\n      return;\n    }\n    preValue.current = _values;\n    var promise;\n    // 如果是每次都异步加载，直接加载\n    if (isEveryAsync) {\n      promise = loadData === null || loadData === void 0 ? void 0 : loadData(addedItem.value);\n    } else {\n      // 如果没有加载过，加载\n      if (!addedItem.isLoaded) {\n        promise = loadData === null || loadData === void 0 ? void 0 : loadData(addedItem.value);\n      }\n    }\n    // 如果有 promise\n    if (promise) {\n      setLoading(true);\n      // 执行\n      promise.then(function (_options) {\n        setLoading(false);\n        // 更新 options\n        setOptions(function (_draft) {\n          // 找到当前的 item\n          var currentNode = findTreeNodeByValue(_draft, addedItem.value);\n          if (currentNode) {\n            currentNode.isLoaded = true;\n            // 如果不是简单模式，更新 children\n            if (!internalCascaderViewProps.treeDataSimpleMode) {\n              currentNode.children = _options;\n            }\n            // 如果是简单模式，需要先删除currentNode的所有子节点，然后再添加新的子节点\n            else {\n              // 删除当前节点的所有子节点\n              deleteChildrenByValue(_draft, currentNode.value);\n              // 添加新的子节点\n              _draft.push.apply(_draft, _options.map(function (_option) {\n                return __assign(__assign({}, _option), {\n                  pId: currentNode.value\n                });\n              }));\n            }\n          }\n        });\n      }).catch(function () {\n        setLoading(false);\n      }).finally(function () {\n        var _a;\n        (_a = internalCascaderViewProps === null || internalCascaderViewProps === void 0 ? void 0 : internalCascaderViewProps.onChange) === null || _a === void 0 ? void 0 : _a.call(internalCascaderViewProps, _values, extend);\n      });\n    } else {\n      (_c = internalCascaderViewProps === null || internalCascaderViewProps === void 0 ? void 0 : internalCascaderViewProps.onChange) === null || _c === void 0 ? void 0 : _c.call(internalCascaderViewProps, _values, extend);\n    }\n  }\n  useUpdateEffect(function () {\n    setOptions(internalCascaderViewProps.options);\n  }, [internalCascaderViewProps.options]);\n  useUpdateEffect(function () {\n    var _a;\n    preValue.current = (_a = internalCascaderViewProps.value) !== null && _a !== void 0 ? _a : internalCascaderViewProps.defaultValue;\n  }, [internalCascaderViewProps.defaultValue, internalCascaderViewProps.value]);\n  return /*#__PURE__*/React.createElement(InternalCascaderView, __assign({\n    loading: loading\n  }, internalCascaderViewProps, {\n    onChange: onChange,\n    options: options\n  }));\n});\nvar AsyncCascaderView = InternalAsyncCascader;\nAsyncCascaderView.displayName = 'AsyncCascaderView';\nexport default AsyncCascaderView;"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useUpdateEffect","difference","React","memo","useMemo","useRef","useState","useImmer","Util","treeTransformConfig","InternalCascaderView","InternalAsyncCascader","_a","loadData","_c","isEveryAsync","internalCascaderViewProps","_d","options","setOptions","_e","loading","setLoading","preValue","_b","value","defaultValue","flatOptions","treeDataSimpleMode","treeToArray","findTreeNodeByValue","_treeData","_value","find","_option","loop","children","item","result","deleteChildrenByValue","draft","deleteIndexes","parentId","child","pId","push","forEach","index","splice","current","createElement","onChange","_values","extend","addedItem","promise","addedItems","isLoaded","then","_options","_draft","currentNode","map","catch","finally","AsyncCascaderView","displayName"],"mappings":"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"}