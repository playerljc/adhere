var __extends=this&&this.__extends||function(){var o=function(t,e){return(o=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(t,e){t.__proto__=e}:function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}))(t,e)};return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),__assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var e,r=1,o=arguments.length;r<o;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)},__spreadArray=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var o,n=0,i=e.length;n<i;n++)!o&&n in e||((o=o||Array.prototype.slice.call(e,0,n))[n]=e[n]);return t.concat(o||Array.prototype.slice.call(e))};import*as turf from"@turf/turf";import GeometryStyle from"../style/GeometryStyle";import{GeometryType,VectorActions}from"../types";import CircleGeometry from"./CircleGeometry";import Geometry from"./Geometry";var MultiCircleGeometry=function(r){function t(t){var e=r.call(this)||this;return e.coordinates=t,e}return __extends(t,r),t.prototype.setCoordinates=function(t){this.coordinates=t,null!=(t=null==this?void 0:this.getLayer())&&t.getEmitter().trigger(VectorActions.UPDATE)},t.prototype.getCoordinates=function(){return __spreadArray([],this.coordinates,!0)},t.prototype.getType=function(){return GeometryType.MultiCircle},t.prototype.getCenterCoordinate=function(t){t.ctx,t.style,t.isScale;var t=this.coordinates,e=this.getMap(),r=[],t=(t.forEach(function(t){t=e.pointToPixel(new BMap.Point(t.center.lng,t.center.lat));r.push(turf.point([t.x,t.y]))}),turf.featureCollection(r)),t=turf.center(t);return{x:t.geometry.coordinates[0],y:t.geometry.coordinates[1]}},t.prototype.draw=function(e,t){var r=this,o=this.coordinates,n=__assign(__assign({},GeometryStyle),null!=t?t:{});o.forEach(function(t){CircleGeometry.drawCircle({ctx:e,style:n,coordinates:t,map:r.getMap(),isScale:!0})})},t.prototype.isPixelInGeometry=function(e,r){var o=this;return this.coordinates.some(function(t){return CircleGeometry.isPixelInGeometry({coordinates:t,map:o.getMap(),style:r,pixel:e,isScale:!0})})},t}(Geometry);export default MultiCircleGeometry;
//# sourceMappingURL=MultiCircleGeometry.js.map
