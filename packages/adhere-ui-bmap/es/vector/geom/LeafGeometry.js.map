{"version":3,"file":"LeafGeometry.js","sources":["vector/geom/LeafGeometry.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport Geometry from './Geometry';\r\nimport { VectorActions, GeometryType, } from '../types';\r\nimport GeometryStyle from '../style/GeometryStyle';\r\nimport Util from '../../util';\r\n/**\r\n * LeafGeometry\r\n * @class LeafGeometry\r\n * @classdesc LeafGeometry - N叶草\r\n */\r\nvar LeafGeometry = /** @class */ (function (_super) {\r\n    __extends(LeafGeometry, _super);\r\n    function LeafGeometry(coordinates) {\r\n        var _this = _super.call(this) || this;\r\n        _this.coordinates = coordinates;\r\n        return _this;\r\n    }\r\n    LeafGeometry.prototype.setCoordinates = function (coordinates) {\r\n        var _a, _b;\r\n        this.coordinates = coordinates;\r\n        (_b = (_a = this === null || this === void 0 ? void 0 : this.getLayer()) === null || _a === void 0 ? void 0 : _a.getEmitter()) === null || _b === void 0 ? void 0 : _b.trigger(VectorActions.UPDATE);\r\n    };\r\n    LeafGeometry.prototype.getCoordinates = function () {\r\n        return __assign({}, this.coordinates);\r\n    };\r\n    LeafGeometry.prototype.getType = function () {\r\n        return GeometryType.Leaf;\r\n    };\r\n    LeafGeometry.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n        var centerPixel = map.pointToPixel(\r\n        // @ts-ignore\r\n        new BMap.Point(coordinates.center.lng, coordinates.center.lat));\r\n        return __assign({}, centerPixel);\r\n    };\r\n    LeafGeometry.prototype.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, isScale = _a.isScale;\r\n        return LeafGeometry.getCenterCoordinate({\r\n            coordinates: this.coordinates,\r\n            ctx: ctx,\r\n            map: this.getMap(),\r\n            style: style,\r\n            isScale: isScale,\r\n        });\r\n    };\r\n    LeafGeometry.drawLeaf = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map, isScale = _a.isScale;\r\n        ctx.save();\r\n        var targetStyle = __assign(__assign({}, GeometryStyle), (style || {}));\r\n        ctx.beginPath();\r\n        ctx.lineWidth = targetStyle.lineWidth;\r\n        ctx.lineJoin = targetStyle.lineJoin;\r\n        ctx.lineCap = targetStyle.lineCap;\r\n        ctx.setLineDash(targetStyle.lineDash);\r\n        ctx.lineDashOffset = targetStyle.lineDashOffset;\r\n        ctx.strokeStyle = targetStyle.strokeStyle;\r\n        ctx.fillStyle = targetStyle.fillStyle;\r\n        var n = coordinates.n, center = coordinates.center, size = coordinates.size, length = coordinates.length;\r\n        var curSize = size;\r\n        var curLength = length;\r\n        if (isScale) {\r\n            // 比例尺\r\n            var scale = Util.getScale(map);\r\n            curSize = scale * size;\r\n            curLength = scale * length;\r\n        }\r\n        // @ts-ignore\r\n        var pixel = map.pointToPixel(new BMap.Point(center.lng, center.lat));\r\n        ctx.moveTo(pixel.x, pixel.y + curSize);\r\n        var degree = (2 * Math.PI) / n;\r\n        for (var i = 1; i < n + 1; i++) {\r\n            var cx1 = Math.sin((i - 1) * degree) * curLength + pixel.x;\r\n            var cy1 = Math.cos((i - 1) * degree) * curLength + pixel.y;\r\n            var cx2 = Math.sin(i * degree) * curLength + pixel.x;\r\n            var cy2 = Math.cos(i * degree) * curLength + pixel.y;\r\n            var x = Math.sin(i * degree) * curSize + pixel.x;\r\n            var y = Math.cos(i * degree) * curSize + pixel.y;\r\n            ctx.bezierCurveTo(cx1, cy1, cx2, cy2, x, y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    };\r\n    /**\r\n     * draw - 绘制一个多边形\r\n     * @param ctx\r\n     * @param style\r\n     */\r\n    LeafGeometry.prototype.draw = function (ctx, style) {\r\n        LeafGeometry.drawLeaf({\r\n            ctx: ctx,\r\n            style: style,\r\n            coordinates: this.coordinates,\r\n            map: this.getMap(),\r\n            isScale: true,\r\n        });\r\n    };\r\n    LeafGeometry.isPixelInGeometry = function (_a) {\r\n        var coordinates = _a.coordinates, map = _a.map, pixel = _a.pixel, style = _a.style, isScale = _a.isScale;\r\n        // const { n, center, size } = coordinates;\r\n        //\r\n        // const scale = Util.getScale(map);\r\n        // const points: IPixel[] = [];\r\n        //\r\n        // let curSize = size;\r\n        // if (isScale) {\r\n        //   curSize = scale * size;\r\n        // }\r\n        //\r\n        // // @ts-ignore\r\n        // const centerPixel = map.pointToPixel(new BMap.Point(center.lng, center.lat));\r\n        //\r\n        // const degree = (2 * Math.PI) / n;\r\n        //\r\n        // for (let i = 0; i < n; i++) {\r\n        //   const x = Math.cos(i * degree);\r\n        //   const y = Math.sin(i * degree);\r\n        //   points.push({\r\n        //     x: x * curSize + centerPixel.x,\r\n        //     y: y * curSize + centerPixel.y,\r\n        //   });\r\n        // }\r\n        //\r\n        // const polygon = points.map((point) => [point.x, point.y]);\r\n        // polygon.push(polygon[0]);\r\n        //\r\n        // const point = turf.point([pixel.x, pixel.y]);\r\n        // const poly = turf.polygon([polygon]);\r\n        //\r\n        // return turf.booleanPointInPolygon(point, poly);\r\n        var canvas = document.createElement('canvas');\r\n        var ctx = canvas.getContext('2d');\r\n        if (!ctx)\r\n            return false;\r\n        LeafGeometry.drawLeaf({\r\n            ctx: ctx,\r\n            coordinates: coordinates,\r\n            style: style,\r\n            map: map,\r\n            isScale: isScale,\r\n        });\r\n        return ctx.isPointInPath(pixel.x, pixel.y);\r\n    };\r\n    /**\r\n     * isPixelInGeometry\r\n     * @param pixel\r\n     * @param style\r\n     * @return boolean\r\n     */\r\n    LeafGeometry.prototype.isPixelInGeometry = function (pixel, style) {\r\n        return LeafGeometry.isPixelInGeometry({\r\n            coordinates: this.coordinates,\r\n            map: this.getMap(),\r\n            style: style,\r\n            isScale: true,\r\n            pixel: pixel,\r\n        });\r\n    };\r\n    return LeafGeometry;\r\n}(Geometry));\r\nexport default LeafGeometry;\r\n"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","Geometry","VectorActions","GeometryType","GeometryStyle","Util","LeafGeometry","_super","coordinates","_this","setCoordinates","_b","_a","getLayer","getEmitter","trigger","UPDATE","getCoordinates","getType","Leaf","getCenterCoordinate","ctx","map","centerPixel","style","isScale","pointToPixel","BMap","Point","center","lng","lat","getMap","drawLeaf","save","targetStyle","beginPath","lineWidth","lineJoin","lineCap","setLineDash","lineDash","lineDashOffset","strokeStyle","fillStyle","size","curSize","curLength","scale","getScale","pixel","moveTo","x","y","degree","Math","PI","cx1","sin","cy1","cos","cx2","cy2","bezierCurveTo","closePath","stroke","fill","restore","draw","isPixelInGeometry","document","createElement","getContext","isPointInPath"],"mappings":"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"}