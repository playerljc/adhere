var __extends=this&&this.__extends||function(){var o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};return function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),__assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var e,r=1,o=arguments.length;r<o;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)},__spreadArrays=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;for(var o=Array(t),n=0,e=0;e<r;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,n++)o[n]=i[s];return o};import*as turf from"@turf/turf";import GeometryStyle from"../style/GeometryStyle";import{GeometryType,VectorActions}from"../types";import CircleGeometry from"./CircleGeometry";import Geometry from"./Geometry";var MulitCircleGeometry=function(r){function t(t){var e=r.call(this)||this;return e.coordinates=t,e}return __extends(t,r),t.prototype.setCoordinates=function(t){this.coordinates=t,null!=(t=null==this?void 0:this.getLayer())&&t.getEmitter().trigger(VectorActions.UPDATE)},t.prototype.getCoordinates=function(){return __spreadArrays(this.coordinates)},t.prototype.getType=function(){return GeometryType.MulitCircle},t.prototype.getCenterCoordinate=function(t){t.ctx,t.style,t.isScale;var t=this.coordinates,e=this.getMap(),r=[],t=(t.forEach(function(t){t=e.pointToPixel(new BMap.Point(t.center.lng,t.center.lat));r.push(turf.point([t.x,t.y]))}),turf.featureCollection(r)),t=turf.center(t);return{x:t.geometry.coordinates[0],y:t.geometry.coordinates[1]}},t.prototype.draw=function(e,t){var r=this,o=this.coordinates,n=__assign(__assign({},GeometryStyle),t||{});o.forEach(function(t){CircleGeometry.drawCircle({ctx:e,style:n,coordinates:t,map:r.getMap(),isScale:!0})})},t.prototype.isPixelInGeometry=function(e,r){var o=this;return this.coordinates.some(function(t){return CircleGeometry.isPixelInGeometry({coordinates:t,map:o.getMap(),style:r,pixel:e,isScale:!0})})},t}(Geometry);export default MulitCircleGeometry;
//# sourceMappingURL=MulitCircleGeometry.js.map
