{"version":3,"file":"GeoJSONFormat.js","sources":["vector/format/GeoJSONFormat.js"],"sourcesContent":["import Util from '@baifendian/adhere-util';\r\nimport { GeoJSONType, } from '../types';\r\nimport PointGeometry from '../geom/PointGeometry';\r\nimport MulitPointGeometry from '../geom/MulitPointGeometry';\r\nimport LineStringGeometry from '../geom/LineStringGeometry';\r\nimport MulitLineStringGeometry from '../geom/MulitLineStringGeometry';\r\nimport PolygonGeometry from '../geom/PolygonGeometry';\r\nimport MulitPolygonGeometry from '../geom/MulitPolygonGeometry';\r\nexport default {\r\n    /**\r\n     * parse - GeoJSON转IFeature[]\r\n     * @param geoJSON\r\n     * @param onForeachGeom\r\n     */\r\n    parse: function (geoJSON, onForeachGeom) {\r\n        /**\r\n         * Recursion\r\n         * @param node\r\n         * @param handler\r\n         * @param features\r\n         * @constructor\r\n         */\r\n        function Recursion(node, handler, features) {\r\n            var feature = null;\r\n            /**\r\n             * Point\r\n             * MultiPoint\r\n             * LineString\r\n             * MultiLineString\r\n             * Polygon\r\n             * MultiPolygon\r\n             * GeometryCollection\r\n             * Feature\r\n             * FeatureCollection\r\n             */\r\n            if (node.type === GeoJSONType.Point) {\r\n                var geom = new PointGeometry({\r\n                    lng: node.coordinates[0],\r\n                    lat: node.coordinates[1],\r\n                });\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.MultiPoint) {\r\n                var geom = new MulitPointGeometry(node.coordinates.map(function (coordinate) { return ({\r\n                    lng: coordinate[0],\r\n                    lat: coordinate[1],\r\n                }); }));\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.LineString) {\r\n                var geom = new LineStringGeometry({\r\n                    point1: {\r\n                        lng: node.coordinates[0][0],\r\n                        lat: node.coordinates[0][1],\r\n                    },\r\n                    point2: {\r\n                        lng: node.coordinates[1][0],\r\n                        lat: node.coordinates[1][1],\r\n                    },\r\n                });\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.MultiLineString) {\r\n                var geom = new MulitLineStringGeometry(node.coordinates.map(function (coordinate) { return ({\r\n                    point1: {\r\n                        lng: coordinate[0][0],\r\n                        lat: coordinate[0][1],\r\n                    },\r\n                    point2: {\r\n                        lng: coordinate[1][0],\r\n                        lat: coordinate[1][1],\r\n                    },\r\n                }); }));\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.Polygon) {\r\n                var geom = new PolygonGeometry(node.coordinates.map(function (coordinate) { return ({\r\n                    lng: coordinate[0],\r\n                    lat: coordinate[1],\r\n                }); }));\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.MultiPolygon) {\r\n                var geom = new MulitPolygonGeometry(node.coordinates.map(function (coordinate) {\r\n                    return coordinate.map(function (p) { return ({\r\n                        lng: p[0],\r\n                        lat: p[1],\r\n                    }); });\r\n                }));\r\n                feature = handler(geom);\r\n                feature.setId(Util.uuid());\r\n                features.push(feature);\r\n            }\r\n            else if (node.type === GeoJSONType.GeometryCollection) {\r\n                node.geometries.forEach(function (geom) {\r\n                    Recursion(geom, onForeachGeom, features);\r\n                });\r\n            }\r\n            else if (node.type === GeoJSONType.Feature) {\r\n                Recursion(node.geometry, function (g) {\r\n                    var f = onForeachGeom(g);\r\n                    f.setId(node.id);\r\n                    f.setProperties(node.properties);\r\n                    return f;\r\n                }, features);\r\n            }\r\n            else if (node.type === GeoJSONType.FeatureCollection) {\r\n                node.features.forEach(function (feature) {\r\n                    Recursion(feature, onForeachGeom, features);\r\n                });\r\n            }\r\n        }\r\n        var features = [];\r\n        Recursion(geoJSON, onForeachGeom, features);\r\n        return features;\r\n    },\r\n    /**\r\n     * stringify - features转GeoJSON\r\n     * @param features\r\n     * @return GeoJSONNode\r\n     */\r\n    stringify: function (features) {\r\n        function getCoordinatesByType(geometry) {\r\n            var mapping = new Map([\r\n                [GeoJSONType.Point, getPointCoordinates],\r\n                [GeoJSONType.MultiPoint, getMulitPointCoordinates],\r\n                [GeoJSONType.LineString, getLineStringCoordinates],\r\n                [GeoJSONType.MultiLineString, getMulitLineStringCoordinates],\r\n                [GeoJSONType.Polygon, getPolygonCoordinates],\r\n                [GeoJSONType.MultiPolygon, getMulitPolygonCoordinates],\r\n            ]);\r\n            var type = geometry.getType();\r\n            // @ts-ignore\r\n            return mapping.get(type)(geometry);\r\n        }\r\n        function getPointCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return [coordinates.lng, coordinates.lat];\r\n        }\r\n        function getMulitPointCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return coordinates.map(function (coordinate) { return [coordinate.lng, coordinate.lat]; });\r\n        }\r\n        function getLineStringCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return [\r\n                [coordinates.point1.lng, coordinates.point1.lat],\r\n                [coordinates.point2.lng, coordinates.point2.lat],\r\n            ];\r\n        }\r\n        function getMulitLineStringCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return coordinates.map(function (coordinate) { return [\r\n                [coordinate.point1.lng, coordinate.point1.lat],\r\n                [coordinate.point2.lng, coordinate.point2.lat],\r\n            ]; });\r\n        }\r\n        function getPolygonCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return coordinates.map(function (coordinate) { return [coordinate.lng, coordinate.lat]; });\r\n        }\r\n        function getMulitPolygonCoordinates(geometry) {\r\n            var coordinates = geometry.getCoordinates();\r\n            return coordinates.map(function (coordinate) { return coordinate.map(function (p) { return [p.lng, p.lat]; }); });\r\n        }\r\n        var geoJSON = {\r\n            type: GeoJSONType.FeatureCollection,\r\n            features: [],\r\n        };\r\n        var filterType = [];\r\n        for (var key in GeoJSONType) {\r\n            filterType.push(key);\r\n        }\r\n        features.forEach(function (feature) {\r\n            var type = feature.getGeometry().getType();\r\n            if (filterType.includes(type)) {\r\n                geoJSON.features.push({\r\n                    type: GeoJSONType.Feature,\r\n                    geometry: {\r\n                        // @ts-ignore\r\n                        type: type,\r\n                        coordinates: getCoordinatesByType(feature.getGeometry()),\r\n                    },\r\n                    id: feature.getId(),\r\n                    properties: feature.getProperties(),\r\n                });\r\n            }\r\n        });\r\n        return geoJSON;\r\n    },\r\n};\r\n"],"names":["Util","GeoJSONType","PointGeometry","MulitPointGeometry","LineStringGeometry","MulitLineStringGeometry","PolygonGeometry","MulitPolygonGeometry","parse","geoJSON","onForeachGeom","features","Recursion","node","handler","feature","type","Point","lng","coordinates","lat","setId","uuid","push","MultiPoint","map","coordinate","LineString","point1","point2","MultiLineString","Polygon","MultiPolygon","p","GeometryCollection","geometries","forEach","geom","Feature","geometry","g","f","id","setProperties","properties","FeatureCollection","stringify","getPointCoordinates","getCoordinates","getMulitPointCoordinates","getLineStringCoordinates","getMulitLineStringCoordinates","getPolygonCoordinates","getMulitPolygonCoordinates","key","filterType","mapping","getGeometry","getType","includes","Map","get","getId","getProperties"],"mappings":"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"}