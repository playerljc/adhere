{"version":3,"file":"GeoJSONFormat.js","sources":["vector/format/GeoJSONFormat.js"],"sourcesContent":["import Util from '@baifendian/adhere-util';\nimport LineStringGeometry from '../geom/LineStringGeometry';\nimport MulitLineStringGeometry from '../geom/MulitLineStringGeometry';\nimport MulitPointGeometry from '../geom/MulitPointGeometry';\nimport MulitPolygonGeometry from '../geom/MulitPolygonGeometry';\nimport PointGeometry from '../geom/PointGeometry';\nimport PolygonGeometry from '../geom/PolygonGeometry';\nimport { GeoJSONType, } from '../types';\nexport default {\n    /**\n     * parse - GeoJSON转IFeature[]\n     * @param geoJSON\n     * @param onForeachGeom\n     */\n    parse: function (geoJSON, onForeachGeom) {\n        /**\n         * Recursion\n         * @param node\n         * @param handler\n         * @param features\n         * @constructor\n         */\n        function Recursion(node, handler, features) {\n            var feature = null;\n            /**\n             * Point\n             * MultiPoint\n             * LineString\n             * MultiLineString\n             * Polygon\n             * MultiPolygon\n             * GeometryCollection\n             * Feature\n             * FeatureCollection\n             */\n            if (node.type === GeoJSONType.Point) {\n                var geom = new PointGeometry({\n                    lng: node.coordinates[0],\n                    lat: node.coordinates[1],\n                });\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.MultiPoint) {\n                var geom = new MulitPointGeometry(node.coordinates.map(function (coordinate) { return ({\n                    lng: coordinate[0],\n                    lat: coordinate[1],\n                }); }));\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.LineString) {\n                var geom = new LineStringGeometry({\n                    point1: {\n                        lng: node.coordinates[0][0],\n                        lat: node.coordinates[0][1],\n                    },\n                    point2: {\n                        lng: node.coordinates[1][0],\n                        lat: node.coordinates[1][1],\n                    },\n                });\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.MultiLineString) {\n                var geom = new MulitLineStringGeometry(node.coordinates.map(function (coordinate) { return ({\n                    point1: {\n                        lng: coordinate[0][0],\n                        lat: coordinate[0][1],\n                    },\n                    point2: {\n                        lng: coordinate[1][0],\n                        lat: coordinate[1][1],\n                    },\n                }); }));\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.Polygon) {\n                var geom = new PolygonGeometry(node.coordinates.map(function (coordinate) { return ({\n                    lng: coordinate[0],\n                    lat: coordinate[1],\n                }); }));\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.MultiPolygon) {\n                var geom = new MulitPolygonGeometry(node.coordinates.map(function (coordinate) {\n                    return coordinate.map(function (p) { return ({\n                        lng: p[0],\n                        lat: p[1],\n                    }); });\n                }));\n                feature = handler(geom);\n                feature.setId(Util.uuid());\n                features.push(feature);\n            }\n            else if (node.type === GeoJSONType.GeometryCollection) {\n                node.geometries.forEach(function (geom) {\n                    Recursion(geom, onForeachGeom, features);\n                });\n            }\n            else if (node.type === GeoJSONType.Feature) {\n                Recursion(node.geometry, function (g) {\n                    var f = onForeachGeom(g);\n                    f.setId(node.id);\n                    f.setProperties(node.properties);\n                    return f;\n                }, features);\n            }\n            else if (node.type === GeoJSONType.FeatureCollection) {\n                node.features.forEach(function (feature) {\n                    Recursion(feature, onForeachGeom, features);\n                });\n            }\n        }\n        var features = [];\n        Recursion(geoJSON, onForeachGeom, features);\n        return features;\n    },\n    /**\n     * stringify - features转GeoJSON\n     * @param features\n     * @return GeoJSONNode\n     */\n    stringify: function (features) {\n        function getCoordinatesByType(geometry) {\n            var mapping = new Map([\n                [GeoJSONType.Point, getPointCoordinates],\n                [GeoJSONType.MultiPoint, getMulitPointCoordinates],\n                [GeoJSONType.LineString, getLineStringCoordinates],\n                [GeoJSONType.MultiLineString, getMulitLineStringCoordinates],\n                [GeoJSONType.Polygon, getPolygonCoordinates],\n                [GeoJSONType.MultiPolygon, getMulitPolygonCoordinates],\n            ]);\n            var type = geometry.getType();\n            // @ts-ignore\n            return mapping.get(type)(geometry);\n        }\n        function getPointCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return [coordinates.lng, coordinates.lat];\n        }\n        function getMulitPointCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return coordinates.map(function (coordinate) { return [coordinate.lng, coordinate.lat]; });\n        }\n        function getLineStringCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return [\n                [coordinates.point1.lng, coordinates.point1.lat],\n                [coordinates.point2.lng, coordinates.point2.lat],\n            ];\n        }\n        function getMulitLineStringCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return coordinates.map(function (coordinate) { return [\n                [coordinate.point1.lng, coordinate.point1.lat],\n                [coordinate.point2.lng, coordinate.point2.lat],\n            ]; });\n        }\n        function getPolygonCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return coordinates.map(function (coordinate) { return [coordinate.lng, coordinate.lat]; });\n        }\n        function getMulitPolygonCoordinates(geometry) {\n            var coordinates = geometry.getCoordinates();\n            return coordinates.map(function (coordinate) { return coordinate.map(function (p) { return [p.lng, p.lat]; }); });\n        }\n        var geoJSON = {\n            type: GeoJSONType.FeatureCollection,\n            features: [],\n        };\n        var filterType = [];\n        for (var key in GeoJSONType) {\n            filterType.push(key);\n        }\n        features.forEach(function (feature) {\n            var type = feature.getGeometry().getType();\n            if (filterType.includes(type)) {\n                geoJSON.features.push({\n                    type: GeoJSONType.Feature,\n                    geometry: {\n                        // @ts-ignore\n                        type: type,\n                        coordinates: getCoordinatesByType(feature.getGeometry()),\n                    },\n                    id: feature.getId(),\n                    properties: feature.getProperties(),\n                });\n            }\n        });\n        return geoJSON;\n    },\n};\n"],"names":["Util","LineStringGeometry","MulitLineStringGeometry","MulitPointGeometry","MulitPolygonGeometry","PointGeometry","PolygonGeometry","GeoJSONType","parse","geoJSON","onForeachGeom","features","Recursion","node","handler","feature","type","Point","lng","coordinates","lat","setId","uuid","push","MultiPoint","map","coordinate","LineString","point1","point2","MultiLineString","Polygon","MultiPolygon","p","GeometryCollection","geometries","forEach","geom","Feature","geometry","g","f","id","setProperties","properties","FeatureCollection","stringify","getPointCoordinates","getCoordinates","getMulitPointCoordinates","getLineStringCoordinates","getMulitLineStringCoordinates","getPolygonCoordinates","getMulitPolygonCoordinates","key","filterType","mapping","getGeometry","getType","includes","Map","get","getId","getProperties"],"mappings":"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"}