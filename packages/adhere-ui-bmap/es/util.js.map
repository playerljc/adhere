{"version":3,"file":"util.js","sources":["util.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport Util from '@baifendian/adhere-util';\nexport default {\n    /**\n     * flyToChina - 设置地图的zoom为全中国\n     * @param map\n     */\n    flyToChina: function (map) {\n        // @ts-ignore\n        map.centerAndZoom(new BMap.Point(106.638754, 34.842904), 2);\n    },\n    /**\n     * fillCityBoundary - 根据city名字填充城市轮廓\n     * @param cityName\n     * @param style\n     * @param map\n     * @return\n     */\n    fillCityBoundary: function (cityName, style, map) {\n        var cityOverlays = [];\n        var cityPoints = [];\n        return new Promise(function (resolve) {\n            // 勾勒的轮廓\n            // @ts-ignore\n            var bd = new BMap.Boundary();\n            bd.get(cityName, function (rs) {\n                for (var i = 0; i < rs.boundaries.length; i++) {\n                    var boundarieStr = rs.boundaries[i];\n                    var boundarie = boundarieStr.split(';');\n                    boundarie.forEach(function (pointStr) {\n                        var point = pointStr.trim().split(',');\n                        cityPoints.push(\n                        // @ts-ignore\n                        new BMap.Point(parseFloat(point[0].trim()), parseFloat(point[1].trim())));\n                    });\n                    // @ts-ignore\n                    var hole = new BMap.Polygon(boundarieStr, __assign({}, style));\n                    // @ts-ignore\n                    cityOverlays.push(hole);\n                    map.addOverlay(hole);\n                }\n                resolve({\n                    cityOverlays: cityOverlays,\n                    cityPoints: cityPoints,\n                });\n            });\n        });\n    },\n    /**\n     * fit - 根据数据fit适应的zoom上\n     * @param map\n     * @param points\n     * @param config\n     */\n    // @ts-ignore\n    fit: function (map, points, config) {\n        return new Promise(function (resolve) {\n            var viewport = map.getViewport(points, config || {});\n            map.centerAndZoom(viewport.center, viewport.zoom);\n            setTimeout(function () {\n                resolve(null);\n            }, 200);\n        });\n    },\n    /**\n     * pixelToPoint - 像素坐标转换为经纬度坐标\n     * @param map\n     * @param pixel\n     */\n    pixelToPoint: function (map, pixel) {\n        return map.pixelToPoint(pixel);\n    },\n    /**\n     * pointToPixel - 经纬度坐标转换为像素坐标\n     * @param map\n     * @param point\n     */\n    pointToPixel: function (map, point) {\n        return map.pointToPixel(point);\n    },\n    /**\n     * getViewBound 获取当前视图的矩形范围坐标(坐上 | 右下)\n     * @param map\n     * @return {\n     *   leftTopLon\n     *   leftTopLat\n     *   rightBottomLon\n     *   rightBottomLat\n     * }\n     */\n    getBound: function (map) {\n        var bounds = map.getBounds();\n        //获取西南角的经纬度(左下端点)\n        var sw = bounds.getSouthWest();\n        //获取东北角的经纬度(右上端点)\n        var ne = bounds.getNorthEast();\n        return {\n            leftTopLon: sw.lng,\n            leftTopLat: ne.lat,\n            rightBottomLon: ne.lng,\n            rightBottomLat: sw.lat,\n        };\n    },\n    /**\n     * getScale - 根据zoom获取比例尺\n     * @param map\n     * @return number\n     */\n    getScale: function (map) {\n        // const zoom = map.getZoom();\n        //\n        // /**\n        //  * 比例尺的单位是(m)\n        //  */\n        // const zoomScaleMap = new Map([\n        //   [19, 20],\n        //   [18, 50],\n        //   [17, 10],\n        //   [16, 200],\n        //   [15, 500],\n        //   [14, 1000],\n        //   [13, 2000],\n        //   [12, 5000],\n        //   [11, 10000],\n        //   [10, 20000],\n        //   [9, 25000],\n        //   [8, 50000],\n        //   [7, 100000],\n        //   [6, 200000],\n        //   [5, 500000],\n        //   [4, 1000000],\n        //   [3, 2000000],\n        //   [2, 5000000],\n        //   [1, 10000000],\n        // ]);\n        //\n        // // @ts-ignore\n        // return 1 / zoomScaleMap.get(zoom);\n        // 根据输入范围值(单位：米) 计算出需要画的区域像素：px\n        var pointA = map.getCenter();\n        // const pointAPixel = map.pointToOverlayPixel(pointA);\n        var pointAPixel = map.pointToPixel(pointA);\n        // @ts-ignore\n        var pointB = new BMap.Point(pointA.lng, pointA.lat + 0.001);\n        // const pointBPixel = map.pointToOverlayPixel(pointB);\n        var pointBPixel = map.pointToPixel(pointB);\n        // 像素距离\n        var pixelDistanceBetween2Points = Math.abs(pointBPixel.y - pointAPixel.y);\n        var realDistanceBetween2Points = map.getDistance(pointA, pointB);\n        // console.log('pointAPixel', pointAPixel);\n        // console.log('pointBPixel', pointBPixel);\n        // console.log('realDistanceBetween2Points', realDistanceBetween2Points);\n        // 比例尺\n        return ((pixelDistanceBetween2Points <= 0 ? 1 : pixelDistanceBetween2Points) /\n            realDistanceBetween2Points);\n        // return this.getUnitPixelToM(map.getZoom());\n    },\n    /**\n     * getUnitPixelToM - 1px等于多少米(m)\n     * @param zoom\n     * @return number\n     */\n    getUnitPixelToM: function (zoom) {\n        return Math.pow(2, 18 - zoom);\n    },\n    /**\n     * getArrowPoints - 获取三角形三个顶点值\n     * @param from\n     * @param to\n     * @param scale\n     * @param width\n     * @param theta\n     * @return {{A: {x: number, y: number}, B: {x: number, y: number}, C: {x: number, y: number}}}\n     */\n    getArrowPoints: function (_a) {\n        var from = _a.from, to = _a.to, _b = _a.scale, scale = _b === void 0 ? 1 : _b, _c = _a.width, width = _c === void 0 ? 5 : _c, _d = _a.theta, theta = _d === void 0 ? 35 : _d;\n        var fromX = from.x, fromY = from.y;\n        var toX = to.x, toY = to.y;\n        var arrowX, arrowY; // 箭头线终点坐标\n        // 计算各角度和对应的箭头终点坐标\n        var angle = (Math.atan2(fromY - toY, fromX - toX) * 180) / Math.PI;\n        var angle1 = ((angle + theta) * Math.PI) / 180;\n        var angle2 = ((angle - theta) * Math.PI) / 180;\n        var topX = width * Math.cos(angle1);\n        var topY = width * Math.sin(angle1);\n        var botX = width * Math.cos(angle2);\n        var botY = width * Math.sin(angle2);\n        arrowX = toX + topX;\n        arrowY = toY + topY;\n        var A = {\n            x: arrowX * scale,\n            y: arrowY * scale,\n        };\n        var B = {\n            x: toX * scale,\n            y: toY * scale,\n        };\n        arrowX = toX + botX;\n        arrowY = toY + botY;\n        var C = {\n            x: arrowX * scale,\n            y: arrowY * scale,\n        };\n        return {\n            A: A,\n            B: B,\n            C: C,\n        };\n    },\n    clientToCtxPointToEl: function (_a) {\n        var event = _a.event, rect = _a.rect, offsetEl = _a.offsetEl;\n        var _b = typeof window !== 'undefined'\n            ? window.getComputedStyle(offsetEl, null)\n            : {\n                left: '0',\n                top: '0',\n            }, left = _b.left, top = _b.top;\n        var offsetLeft = parseInt(left.replace('px', ''));\n        var offsetTop = parseInt(top.replace('px', ''));\n        return this.clientToCtxPoint({\n            event: event,\n            rect: rect,\n            offsetLeft: offsetLeft,\n            offsetTop: offsetTop,\n        });\n    },\n    clientToCtxPoint: function (_a) {\n        var event = _a.event, rect = _a.rect, offsetLeft = _a.offsetLeft, offsetTop = _a.offsetTop;\n        var pixel = Util.clientToCtxPoint({\n            event: event,\n            rect: rect,\n        });\n        pixel.x -= offsetLeft;\n        pixel.y -= offsetTop;\n        return pixel;\n    },\n};\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","Util","flyToChina","map","centerAndZoom","BMap","Point","fillCityBoundary","cityName","style","cityOverlays","cityPoints","Promise","resolve","Boundary","get","rs","boundaries","boundarieStr","hole","split","forEach","pointStr","point","trim","push","parseFloat","Polygon","addOverlay","fit","points","config","viewport","getViewport","center","zoom","setTimeout","pixelToPoint","pixel","pointToPixel","getBound","bounds","getBounds","sw","getSouthWest","ne","getNorthEast","leftTopLon","lng","leftTopLat","lat","rightBottomLon","rightBottomLat","getScale","pointA","getCenter","pointAPixel","pointB","pointBPixel","pixelDistanceBetween2Points","Math","abs","y","getDistance","getUnitPixelToM","pow","getArrowPoints","_a","from","to","_b","scale","_c","width","_d","theta","fromX","x","fromY","toX","toY","angle","atan2","PI","angle1","angle2","arrowX","cos","arrowY","sin","A","B","C","clientToCtxPointToEl","event","rect","offsetEl","window","getComputedStyle","left","top","offsetLeft","parseInt","replace","offsetTop","clientToCtxPoint"],"mappings":"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"}