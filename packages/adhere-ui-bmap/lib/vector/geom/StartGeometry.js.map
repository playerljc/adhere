{"version":3,"file":"StartGeometry.js","sources":["vector/geom/StartGeometry.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport Geometry from './Geometry';\r\nimport { VectorActions, GeometryType, } from '../types';\r\nimport GeometryStyle from '../style/GeometryStyle';\r\nimport Util from '../../util';\r\n/**\r\n * StartGeometry\r\n * @class StartGeometry\r\n * @classdesc StartGeometry - 五角星\r\n */\r\nvar StartGeometry = /** @class */ (function (_super) {\r\n    __extends(StartGeometry, _super);\r\n    function StartGeometry(coordinates) {\r\n        var _this = _super.call(this) || this;\r\n        _this.coordinates = coordinates;\r\n        return _this;\r\n    }\r\n    StartGeometry.prototype.setCoordinates = function (coordinates) {\r\n        var _a;\r\n        this.coordinates = coordinates;\r\n        (_a = this === null || this === void 0 ? void 0 : this.getLayer()) === null || _a === void 0 ? void 0 : _a.getEmitter().trigger(VectorActions.UPDATE);\r\n    };\r\n    StartGeometry.prototype.getCoordinates = function () {\r\n        return __assign({}, this.coordinates);\r\n    };\r\n    StartGeometry.prototype.getType = function () {\r\n        return GeometryType.Start;\r\n    };\r\n    StartGeometry.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n        var centerPixel = map.pointToPixel(\r\n        // @ts-ignore\r\n        new BMap.Point(coordinates.center.lng, coordinates.center.lat));\r\n        return __assign({}, centerPixel);\r\n    };\r\n    StartGeometry.prototype.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, isScale = _a.isScale;\r\n        return StartGeometry.getCenterCoordinate({\r\n            coordinates: this.coordinates,\r\n            ctx: ctx,\r\n            map: this.getMap(),\r\n            style: style,\r\n            isScale: isScale,\r\n        });\r\n    };\r\n    StartGeometry.drawStart = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map, isScale = _a.isScale;\r\n        ctx.save();\r\n        var targetStyle = __assign(__assign({}, GeometryStyle), (style || {}));\r\n        ctx.beginPath();\r\n        ctx.lineWidth = targetStyle.lineWidth;\r\n        ctx.lineJoin = targetStyle.lineJoin;\r\n        ctx.lineCap = targetStyle.lineCap;\r\n        ctx.setLineDash(targetStyle.lineDash);\r\n        ctx.lineDashOffset = targetStyle.lineDashOffset;\r\n        ctx.strokeStyle = targetStyle.strokeStyle;\r\n        ctx.fillStyle = targetStyle.fillStyle;\r\n        var center = coordinates.center, innerRadius = coordinates.innerRadius, outRadius = coordinates.outRadius;\r\n        var curInnerRadius = innerRadius;\r\n        var curOutRadius = outRadius;\r\n        if (isScale) {\r\n            // 比例尺\r\n            var scale = Util.getScale(map);\r\n            curInnerRadius = scale * innerRadius;\r\n            curOutRadius = scale * outRadius;\r\n        }\r\n        // @ts-ignore\r\n        var pixel = map.pointToPixel(new BMap.Point(center.lng, center.lat));\r\n        var startCount = 5;\r\n        var spend = 360 / startCount;\r\n        var min = 90 - spend;\r\n        var max = spend - min;\r\n        for (var i = 0; i < startCount; i++) {\r\n            ctx.lineTo(Math.cos(((min + i * spend) / 180) * Math.PI) * curOutRadius + pixel.x, -Math.sin(((min + i * spend) / 180) * Math.PI) * curOutRadius + pixel.y);\r\n            ctx.lineTo(Math.cos(((max + i * spend) / 180) * Math.PI) * curInnerRadius + pixel.x, -Math.sin(((max + i * spend) / 180) * Math.PI) * curInnerRadius + pixel.y);\r\n        }\r\n        ctx.stroke();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    };\r\n    /**\r\n     * draw - 绘制一个五角星\r\n     * @param ctx\r\n     * @param style\r\n     */\r\n    StartGeometry.prototype.draw = function (ctx, style) {\r\n        StartGeometry.drawStart({\r\n            ctx: ctx,\r\n            style: style,\r\n            coordinates: this.coordinates,\r\n            map: this.getMap(),\r\n            isScale: true,\r\n        });\r\n    };\r\n    StartGeometry.isPixelInGeometry = function (_a) {\r\n        // const { center, innerRadius, outRadius } = coordinates;\r\n        //\r\n        // // 比例尺\r\n        // const scale = Util.getScale(map);\r\n        //\r\n        // // @ts-ignore\r\n        // const centerPixel = map.pointToPixel(new BMap.Point(center.lng, center.lat));\r\n        //\r\n        // let curInnerRadius = innerRadius;\r\n        // let curOutRadius = outRadius;\r\n        //\r\n        // if (isScale) {\r\n        //   curInnerRadius = scale * innerRadius;\r\n        //   curOutRadius = scale * outRadius;\r\n        // }\r\n        //\r\n        // const startCount = 5;\r\n        // const spend = 360 / startCount;\r\n        // const min = 90 - spend;\r\n        // const max = spend - min;\r\n        //\r\n        // const points: IPixel[] = [];\r\n        //\r\n        // for (let i = 0; i < startCount; i++) {\r\n        //   points.push({\r\n        //     x: Math.cos(((min + i * spend) / 180) * Math.PI) * curOutRadius + centerPixel.x,\r\n        //     y: -Math.sin(((min + i * spend) / 180) * Math.PI) * curOutRadius + centerPixel.y,\r\n        //   });\r\n        //   points.push({\r\n        //     x: Math.cos(((max + i * spend) / 180) * Math.PI) * curInnerRadius + centerPixel.x,\r\n        //     y: -Math.sin(((max + i * spend) / 180) * Math.PI) * curInnerRadius + centerPixel.y,\r\n        //   });\r\n        // }\r\n        //\r\n        // const polygon = points.map((point) => [point.x, point.y]);\r\n        // polygon.push(polygon[0]);\r\n        //\r\n        // const point = turf.point([pixel.x, pixel.y]);\r\n        // const poly = turf.polygon([polygon]);\r\n        //\r\n        // return turf.booleanPointInPolygon(point, poly);\r\n        var coordinates = _a.coordinates, map = _a.map, pixel = _a.pixel, style = _a.style, isScale = _a.isScale;\r\n        var canvas = document.createElement('canvas');\r\n        var ctx = canvas.getContext('2d');\r\n        if (!ctx)\r\n            return false;\r\n        StartGeometry.drawStart({\r\n            ctx: ctx,\r\n            coordinates: coordinates,\r\n            style: style,\r\n            map: map,\r\n            isScale: isScale,\r\n        });\r\n        return ctx.isPointInPath(pixel.x, pixel.y);\r\n    };\r\n    /**\r\n     * isPixelInGeometry\r\n     * @param pixel\r\n     * @param style\r\n     * @return boolean\r\n     */\r\n    StartGeometry.prototype.isPixelInGeometry = function (pixel, style) {\r\n        return StartGeometry.isPixelInGeometry({\r\n            coordinates: this.coordinates,\r\n            map: this.getMap(),\r\n            isScale: true,\r\n            // @ts-ignore\r\n            style: style,\r\n            pixel: pixel,\r\n        });\r\n    };\r\n    return StartGeometry;\r\n}(Geometry));\r\nexport default StartGeometry;\r\n"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","Geometry","VectorActions","GeometryType","GeometryStyle","Util","StartGeometry","_super","coordinates","_this","setCoordinates","_a","getLayer","getEmitter","trigger","UPDATE","getCoordinates","getType","Start","getCenterCoordinate","ctx","map","centerPixel","style","isScale","pointToPixel","BMap","Point","center","lng","lat","getMap","drawStart","save","targetStyle","beginPath","lineWidth","lineJoin","lineCap","setLineDash","lineDash","lineDashOffset","strokeStyle","fillStyle","innerRadius","outRadius","curInnerRadius","curOutRadius","scale","getScale","pixel","spend","lineTo","Math","cos","PI","x","sin","y","stroke","fill","restore","draw","isPixelInGeometry","document","createElement","getContext","isPointInPath"],"mappings":"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"}