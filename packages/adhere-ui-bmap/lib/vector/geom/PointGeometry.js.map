{"version":3,"file":"PointGeometry.js","sources":["vector/geom/PointGeometry.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { GeometryType, VectorActions, } from '../types';\r\nimport Geometry from './Geometry';\r\nimport GeometryStyle from '../style/GeometryStyle';\r\nimport RegularPolygonGeometry from './RegularPolygonGeometry';\r\nimport StartGeometry from './StartGeometry';\r\nimport SectorGeometry from './SectorGeometry';\r\nimport CircleGeometry from './CircleGeometry';\r\nimport RectGeometry from './RectGeometry';\r\nimport RadiusRectGeometry from './RadiusRectGeometry';\r\nimport LeafGeometry from './LeafGeometry';\r\n/**\r\n * PointGeometry\r\n * @class PointGeometry\r\n * @classdesc PointGeometry - 点\r\n */\r\nvar PointGeometry = /** @class */ (function (_super) {\r\n    __extends(PointGeometry, _super);\r\n    function PointGeometry(coordinates) {\r\n        var _this = _super.call(this) || this;\r\n        _this.coordinates = coordinates;\r\n        return _this;\r\n    }\r\n    PointGeometry.prototype.setCoordinates = function (coordinates) {\r\n        var _a;\r\n        this.coordinates = coordinates;\r\n        (_a = this === null || this === void 0 ? void 0 : this.getLayer()) === null || _a === void 0 ? void 0 : _a.getEmitter().trigger(VectorActions.UPDATE);\r\n    };\r\n    PointGeometry.prototype.getCoordinates = function () {\r\n        return __assign({}, this.coordinates);\r\n    };\r\n    PointGeometry.prototype.getType = function () {\r\n        return GeometryType.Point;\r\n    };\r\n    PointGeometry.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n        // @ts-ignore\r\n        return PointGeometry.centerCoordinateMapping.get(style.pointType)({\r\n            ctx: ctx,\r\n            coordinates: coordinates,\r\n            map: map,\r\n            style: style,\r\n            isScale: isScale,\r\n        });\r\n    };\r\n    // @ts-ignore\r\n    PointGeometry.prototype.getCenterCoordinate = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, isScale = _a.isScale;\r\n        return PointGeometry.getCenterCoordinate({\r\n            coordinates: this.coordinates,\r\n            ctx: ctx,\r\n            map: this.getMap(),\r\n            style: style,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawCirclePoint - 绘制圆的点\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawCirclePoint = function (_a) {\r\n        // ctx.save();\r\n        // ctx.beginPath();\r\n        //\r\n        // ctx.lineWidth = style.lineWidth;\r\n        // ctx.lineJoin = style.lineJoin;\r\n        // ctx.lineCap = style.lineCap;\r\n        // ctx.setLineDash(style.lineDash);\r\n        // ctx.lineDashOffset = style.lineDashOffset;\r\n        // ctx.strokeStyle = style.strokeStyle;\r\n        // ctx.fillStyle = style.fillStyle;\r\n        //\r\n        // // @ts-ignore\r\n        // const pixel = map.pointToPixel(new BMap.Point(coordinates.lng, coordinates.lat));\r\n        //\r\n        // ctx.ellipse(pixel.x, pixel.y, style.radius, style.radius, (45 * Math.PI) / 180, 0, 2 * Math.PI);\r\n        //\r\n        // ctx.stroke();\r\n        // ctx.fill();\r\n        // ctx.restore();\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        CircleGeometry.drawCircle({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: { radius: style.radius, center: coordinates },\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawImagePoint - 绘制图片的点\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawImagePoint = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        // @ts-ignore\r\n        var image = new Image(style.img.width, style.img.height);\r\n        // @ts-ignore\r\n        image.src = style.img.src;\r\n        // @ts-ignore\r\n        var pixel = map.pointToPixel(new BMap.Point(coordinates.lng, coordinates.lat));\r\n        // @ts-ignore\r\n        ctx.drawImage(image, pixel.x, pixel.y, style.img.width, style.img.height);\r\n    };\r\n    /**\r\n     * drawRegularPolygon\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawRegularPolygon = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        RegularPolygonGeometry.drawRegularPolygon({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.regularPolygon), { center: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawStart\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawStart = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        StartGeometry.drawStart({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.start), { center: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawSector\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawSector = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        SectorGeometry.drawSector({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.sector), { center: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawRect\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawRect = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        RectGeometry.drawRect({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.rect), { leftTop: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    PointGeometry.drawRadiusRect = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        RadiusRectGeometry.drawRadiusRect({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.radiusRect), { leftTop: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    PointGeometry.drawLeaf = function (_a) {\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        LeafGeometry.drawLeaf({\r\n            ctx: ctx,\r\n            style: style,\r\n            // @ts-ignore\r\n            coordinates: __assign(__assign({}, style.leaf), { center: coordinates }),\r\n            map: map,\r\n            isScale: false,\r\n        });\r\n    };\r\n    /**\r\n     * drawPoint\r\n     * @param ctx\r\n     * @param style\r\n     * @param coordinates\r\n     * @param map\r\n     */\r\n    PointGeometry.drawPoint = function (_a) {\r\n        var _b;\r\n        var ctx = _a.ctx, style = _a.style, coordinates = _a.coordinates, map = _a.map;\r\n        var targetStyle = __assign(__assign(__assign({}, GeometryStyle), { radius: 5, pointType: 'circle' }), (style || {}));\r\n        // @ts-ignore\r\n        PointGeometry.drawMapping.get((_b = targetStyle) === null || _b === void 0 ? void 0 : _b.pointType)({\r\n            ctx: ctx,\r\n            style: targetStyle,\r\n            coordinates: coordinates,\r\n            map: map,\r\n        });\r\n    };\r\n    /**\r\n     * draw\r\n     * @param ctx\r\n     * @param style\r\n     */\r\n    PointGeometry.prototype.draw = function (ctx, style) {\r\n        PointGeometry.drawPoint({\r\n            ctx: ctx,\r\n            style: style,\r\n            coordinates: this.coordinates,\r\n            map: this.getMap(),\r\n        });\r\n    };\r\n    PointGeometry.isPixelInGeometry = function (_a) {\r\n        var _b, _c;\r\n        var coordinates = _a.coordinates, map = _a.map, pixel = _a.pixel, style = _a.style;\r\n        // @ts-ignore\r\n        return PointGeometry.isPixelInGeometryMapping.get((_b = style) === null || _b === void 0 ? void 0 : _b.pointType)({\r\n            // @ts-ignore\r\n            coordinates: PointGeometry.pointTypeToCoordinatesMapping.get((_c = style) === null || _c === void 0 ? void 0 : _c.pointType)(coordinates, style),\r\n            isScale: false,\r\n            map: map,\r\n            style: style,\r\n            pixel: pixel,\r\n        });\r\n    };\r\n    /**\r\n     * isPixelInGeometry\r\n     * @param pixel\r\n     * @param style\r\n     * @return boolean\r\n     */\r\n    PointGeometry.prototype.isPixelInGeometry = function (pixel, style) {\r\n        return PointGeometry.isPixelInGeometry({\r\n            coordinates: this.coordinates,\r\n            pixel: pixel,\r\n            map: this.getMap(),\r\n            style: style,\r\n        });\r\n    };\r\n    PointGeometry.drawMapping = new Map([\r\n        ['circle', PointGeometry.drawCirclePoint],\r\n        ['image', PointGeometry.drawImagePoint],\r\n        ['regularPolygon', PointGeometry.drawRegularPolygon],\r\n        ['start', PointGeometry.drawStart],\r\n        ['sector', PointGeometry.drawSector],\r\n        ['rect', PointGeometry.drawRect],\r\n        ['radiusRect', PointGeometry.drawRadiusRect],\r\n        ['leaf', PointGeometry.drawLeaf],\r\n    ]);\r\n    PointGeometry.isPixelInGeometryMapping = new Map([\r\n        ['circle', CircleGeometry.isPixelInGeometry],\r\n        ['image', RectGeometry.isPixelInGeometry],\r\n        ['regularPolygon', RegularPolygonGeometry.isPixelInGeometry],\r\n        ['start', StartGeometry.isPixelInGeometry],\r\n        ['sector', SectorGeometry.isPixelInGeometry],\r\n        ['rect', RectGeometry.isPixelInGeometry],\r\n        ['radiusRect', RadiusRectGeometry.isPixelInGeometry],\r\n        ['leaf', LeafGeometry.isPixelInGeometry],\r\n    ]);\r\n    PointGeometry.centerCoordinateMapping = new Map([\r\n        [\r\n            'circle',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return CircleGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    coordinates: {\r\n                        center: coordinates,\r\n                        // @ts-ignore\r\n                        radius: style.radius,\r\n                    },\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'image',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return RectGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ leftTop: coordinates }, style.img),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'regularPolygon',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return RegularPolygonGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ center: coordinates }, style.regularPolygon),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'start',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return StartGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ center: coordinates }, style.start),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'sector',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return SectorGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ center: coordinates }, style.sector),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'rect',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return RectGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ leftTop: coordinates }, style.rect),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'radiusRect',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return RadiusRectGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ leftTop: coordinates }, style.radiusRect),\r\n                });\r\n            },\r\n        ],\r\n        [\r\n            'leaf',\r\n            function (_a) {\r\n                var ctx = _a.ctx, coordinates = _a.coordinates, map = _a.map, style = _a.style, isScale = _a.isScale;\r\n                return LeafGeometry.getCenterCoordinate({\r\n                    ctx: ctx,\r\n                    map: map,\r\n                    style: style,\r\n                    isScale: isScale,\r\n                    // @ts-ignore\r\n                    coordinates: __assign({ center: coordinates }, style.leaf),\r\n                });\r\n            },\r\n        ],\r\n    ]);\r\n    PointGeometry.pointTypeToCoordinatesMapping = new Map([\r\n        [\r\n            'circle',\r\n            function (coordinates, style) { return ({\r\n                center: coordinates,\r\n                radius: style.radius,\r\n            }); },\r\n        ],\r\n        [\r\n            'image',\r\n            function (coordinates, style) { return ({\r\n                leftTop: coordinates,\r\n                // @ts-ignore\r\n                width: style.img.width,\r\n                // @ts-ignore\r\n                height: style.img.height,\r\n            }); },\r\n        ],\r\n        [\r\n            'regularPolygon',\r\n            function (coordinates, style) { return (__assign({ center: coordinates }, style.regularPolygon)); },\r\n        ],\r\n        [\r\n            'start',\r\n            function (coordinates, style) { return (__assign({ center: coordinates }, style.start)); },\r\n        ],\r\n        [\r\n            'sector',\r\n            function (coordinates, style) { return (__assign({ center: coordinates }, style.sector)); },\r\n        ],\r\n        [\r\n            'rect',\r\n            function (coordinates, style) { return (__assign({ leftTop: coordinates }, style.rect)); },\r\n        ],\r\n        [\r\n            'radiusRect',\r\n            function (coordinates, style) { return (__assign({ leftTop: coordinates }, style.radiusRect)); },\r\n        ],\r\n        [\r\n            'leaf',\r\n            function (coordinates, style) { return (__assign({ center: coordinates }, style.leaf)); },\r\n        ],\r\n    ]);\r\n    return PointGeometry;\r\n}(Geometry));\r\nexport default PointGeometry;\r\n"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","GeometryType","VectorActions","Geometry","GeometryStyle","RegularPolygonGeometry","StartGeometry","SectorGeometry","CircleGeometry","RectGeometry","RadiusRectGeometry","LeafGeometry","PointGeometry","_super","coordinates","_this","setCoordinates","_a","getLayer","getEmitter","trigger","UPDATE","getCoordinates","getType","Point","getCenterCoordinate","ctx","map","style","isScale","centerCoordinateMapping","get","pointType","getMap","drawCirclePoint","drawCircle","radius","center","drawImagePoint","image","Image","img","width","height","src","pixel","pointToPixel","BMap","lng","lat","drawImage","x","y","drawRegularPolygon","regularPolygon","drawStart","start","drawSector","sector","drawRect","rect","leftTop","drawRadiusRect","radiusRect","drawLeaf","leaf","drawPoint","targetStyle","drawMapping","draw","isPixelInGeometry","isPixelInGeometryMapping","pointTypeToCoordinatesMapping","Map"],"mappings":"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"}