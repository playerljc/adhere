{"version":3,"file":"useDND.js","sources":["DND/useDND.js"],"sourcesContent":["var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useUpdateEffect } from 'ahooks';\nimport { arrayMoveImmutable } from 'array-move';\nimport { useMemo, useState } from 'react';\n/**\n * UseDND\n * @param mode\n * @param dataSource\n * @param reset\n * @param rowKey\n * @param total\n * @constructor\n */\nexport default function UseDND(_a) {\n  var mode = _a.mode,\n    dataSource = _a.dataSource,\n    reset = _a.reset,\n    rowKey = _a.rowKey,\n    total = _a.total;\n  var _b = useState(__spreadArray([], dataSource !== null && dataSource !== void 0 ? dataSource : [], true)),\n    optionDataSource = _b[0],\n    setOptionDataSource = _b[1];\n  var isUseDNDMode = useMemo(function () {\n    return mode === 'dnd';\n  }, [mode]);\n  function finish() {\n    return optionDataSource.reduce(function (result, optionRecord, _index) {\n      var preValue = dataSource[_index][rowKey];\n      var currentValue = optionRecord[rowKey];\n      if (preValue !== currentValue) {\n        result.push({\n          preValue: preValue,\n          currentValue: currentValue\n        });\n      }\n      return result;\n    }, []);\n  }\n  function cancel() {\n    setOptionDataSource(__spreadArray([], dataSource !== null && dataSource !== void 0 ? dataSource : [], true));\n    reset();\n  }\n  function move(_a) {\n    var oldIndex = _a.oldIndex,\n      newIndex = _a.newIndex;\n    setOptionDataSource(function (_optionDataSource) {\n      return arrayMoveImmutable(_optionDataSource, oldIndex, newIndex);\n    });\n  }\n  useUpdateEffect(function () {\n    setOptionDataSource(__spreadArray([], dataSource !== null && dataSource !== void 0 ? dataSource : [], true));\n  }, [dataSource]);\n  return {\n    optionDataSource: {\n      data: optionDataSource,\n      total: total\n    },\n    isUseDNDMode: isUseDNDMode,\n    finish: finish,\n    cancel: cancel,\n    move: move\n  };\n}"],"names":["__spreadArray","this","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","useUpdateEffect","arrayMoveImmutable","useMemo","useState","UseDND","_a","mode","dataSource","reset","rowKey","total","_b","optionDataSource","setOptionDataSource","isUseDNDMode","data","finish","reduce","result","optionRecord","_index","preValue","currentValue","push","cancel","move","oldIndex","newIndex","_optionDataSource"],"mappings":"AAAA,IAAIA,cAAgBC,MAAQA,KAAKD,eAAiB,SAAUE,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBC,UAAUC,OAAc,IAAK,IAA4BC,EAAxBC,EAAI,EAAGC,EAAIN,EAAKG,OAAYE,EAAIC,EAAGD,CAAC,GAC3ED,CAAAA,GAAQC,KAAKL,KACVI,EAAAA,GAASG,MAAMC,UAAUC,MAAMC,KAAKV,EAAM,EAAGK,CAAC,GAChDA,GAAKL,EAAKK,IAGjB,OAAON,EAAGY,OAAOP,GAAMG,MAAMC,UAAUC,MAAMC,KAAKV,CAAI,CAAC,CACzD,SACSY,eAA+B,KAAR,gBACvBC,kBAAsC,KAAZ,oBAC1BC,QAASC,QAAuB,KAAP,uBAUnB,SAASC,OAAOC,GAC7B,IAAIC,EAAOD,EAAGC,KACZC,EAAaF,EAAGE,WAChBC,EAAQH,EAAGG,MACXC,EAASJ,EAAGI,OACZC,EAAQL,EAAGK,MACTC,EAAKR,SAASlB,cAAc,GAAIsB,MAAAA,EAA+CA,EAAa,GAAI,CAAA,CAAI,CAAC,EACvGK,EAAmBD,EAAG,GACtBE,EAAsBF,EAAG,GACvBG,EAAeZ,QAAQ,WACzB,MAAgB,QAATI,CACT,EAAG,CAACA,EAAK,EA4BT,OAHAN,gBAAgB,WACda,EAAoB5B,cAAc,GAAIsB,MAAAA,EAA+CA,EAAa,GAAI,CAAA,CAAI,CAAC,CAC7G,EAAG,CAACA,EAAW,EACR,CACLK,iBAAkB,CAChBG,KAAMH,EACNF,MAAOA,CACT,EACAI,aAAcA,EACdE,OAjCF,WACE,OAAOJ,EAAiBK,OAAO,SAAUC,EAAQC,EAAcC,GACzDC,EAAWd,EAAWa,GAAQX,GAC9Ba,EAAeH,EAAaV,GAOhC,OANIY,IAAaC,GACfJ,EAAOK,KAAK,CACVF,SAAUA,EACVC,aAAcA,CAChB,CAAC,EAEIJ,CACT,EAAG,EAAE,CACP,EAsBEM,OArBF,WACEX,EAAoB5B,cAAc,GAAIsB,MAAAA,EAA+CA,EAAa,GAAI,CAAA,CAAI,CAAC,EAC3GC,EAAM,CACR,EAmBEiB,KAlBF,SAAcpB,GACZ,IAAIqB,EAAWrB,EAAGqB,SAChBC,EAAWtB,EAAGsB,SAChBd,EAAoB,SAAUe,GAC5B,OAAO3B,mBAAmB2B,EAAmBF,EAAUC,CAAQ,CACjE,CAAC,CACH,CAaA,CACF"}