var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,t){var n={};for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]]);return n};import React,{useEffect,useMemo,useState}from"react";import Dict from"@baifendian/adhere-util-dict";import TreeMulitSelectFormItem from"../TreeMulitSelectFormItem";import TreeSelectFormItem from"../TreeSelectFormItem";var FormItemComponents={};export default function(){var e=Object.keys(Dict.handlers).filter(function(e){return e.endsWith("Tree")}),t=Object.keys(Dict.handlers).filter(function(e){return e.endsWith("DynamicTree")});return FormItemComponents.TreeSelectFormItem=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeSelectFormItem,__assign({},e,{treeData:t}))},FormItemComponents.TreeSelectLeafFormItem=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]),n=useMemo(function(){var e=JSON.parse(JSON.stringify(t));return function t(e){(e||[]).forEach(function(e){"leaf"in e&&e.leaf?e.disabled=!1:e.disabled=!0,t(e.children)})}(e),e},[t]);return React.createElement(TreeSelectFormItem,__assign({},e,{treeData:n}))},FormItemComponents.TreeSelectMulitFormItem=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeMulitSelectFormItem,__assign({},e,{treeData:t}))},FormItemComponents.TreeSelectLeafMulitFormItem=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]),n=useMemo(function(){var e=JSON.parse(JSON.stringify(t));return function t(e){(e||[]).forEach(function(e){"leaf"in e&&e.leaf?e.disabled=!1:e.disabled=!0,t(e.children)})}(e),e},[t]);return React.createElement(TreeMulitSelectFormItem,__assign({},e,{treeData:n}))},e.forEach(function(r){FormItemComponents[r+"FormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=Dict.value[r].value,t=n instanceof Function?n(t):n,n=FormItemComponents.TreeSelectFormItem;return React.createElement(n,__assign({},e,{dataSource:t}))},FormItemComponents[r+"LeafFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=Dict.value[r].value,t=n instanceof Function?n(t):n,n=FormItemComponents.TreeSelectLeafFormItem;return React.createElement(n,__assign({},e,{dataSource:t}))},FormItemComponents[r+"MulitFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=Dict.value[r].value,t=n instanceof Function?n(t):n,n=FormItemComponents.TreeSelectMulitFormItem;return React.createElement(n,__assign({},e,{dataSource:t}))},FormItemComponents[r+"LeafMulitFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=Dict.value[r].value,t=n instanceof Function?n(t):n,n=FormItemComponents.TreeSelectLeafMulitFormItem;return React.createElement(n,__assign({},e,{dataSource:t}))}}),t.forEach(function(c){FormItemComponents[c+"FormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=useState([]),r=n[0],a=n[1],o=Dict.value[c].value,n=(useEffect(function(){o.then&&o.then(function(e){a(e)})},[]),useEffect(function(){o instanceof Function&&o(t).then(function(e){a(e)})},[t]),FormItemComponents.TreeSelectFormItem);return React.createElement(n,__assign({},e,{dataSource:r}))},FormItemComponents[c+"LeafFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=useState([]),r=n[0],a=n[1],o=Dict.value[c].value,n=(useEffect(function(){o.then&&o.then(function(e){a(e)})},[]),useEffect(function(){o instanceof Function&&o(t).then(function(e){a(e)})},[t]),FormItemComponents.TreeSelectLeafFormItem);return React.createElement(n,__assign({},e,{dataSource:r}))},FormItemComponents[c+"MulitFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=useState([]),r=n[0],a=n[1],o=Dict.value[c].value,n=(useEffect(function(){o.then&&o.then(function(e){a(e)})},[]),useEffect(function(){o instanceof Function&&o(t).then(function(e){a(e)})},[t]),FormItemComponents.TreeSelectMulitFormItem);return React.createElement(n,__assign({},e,{dataSource:r}))},FormItemComponents[c+"LeafMulitFormItem"]=function(e){var t=e.cascadeParams,e=__rest(e,["cascadeParams"]),n=useState([]),r=n[0],a=n[1],o=Dict.value[c].value,n=(useEffect(function(){o.then&&o.then(function(e){a(e)})},[]),useEffect(function(){o instanceof Function&&o(t).then(function(e){a(e)})},[t]),FormItemComponents.TreeSelectLeafMulitFormItem);return React.createElement(n,__assign({},e,{dataSource:r}))}}),FormItemComponents}
//# sourceMappingURL=TreeSelect.js.map
