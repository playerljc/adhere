{"version":3,"file":"math.js","sources":["math.js"],"sourcesContent":["export default {\n    /**--------------------------math-start----------------------**/\n    /**\n     * toPoint - 百分数转化为小数\n     * @param percent\n     */\n    toPoint: function (percent) {\n        var str = percent.replace('%', '');\n        return parseInt(str) / 100;\n    },\n    /**\n     * point - 小数转化为百分数\n     * @param point\n     */\n    toPercent: function (point) {\n        var str = Number(point * 100).toFixed(1);\n        str += '%';\n        return str;\n    },\n    /**\n     * straightLineIntersection - 计算两个直线的交点\n     * @param p1\n     * @param p2\n     * @param p3\n     * @param p4\n     */\n    straightLineIntersection: function (p1, p2, p3, p4) {\n        var x1 = p1.x, y1 = p1.y;\n        var x2 = p2.x, y2 = p2.y;\n        var x3 = p3.x, y3 = p3.y;\n        var x4 = p4.x, y4 = p4.y;\n        return {\n            x: ((x3 - x4) * (x2 * y1 - x1 * y2) - (x1 - x2) * (x4 * y3 - x3 * y4)) /\n                ((x3 - x4) * (y1 - y2) - (x1 - x2) * (y3 - y4)),\n            y: ((y3 - y4) * (y2 * x1 - y1 * x2) - (y1 - y2) * (y4 * x3 - y3 * x4)) /\n                ((y3 - y4) * (x1 - x2) - (y1 - y2) * (x3 - x4)),\n        };\n    },\n    /**\n     * getA3Piint - 计算两点p1,p2 距离p1点distance距离的点p3的坐标\n     * @param {Point} - p1\n     * @param {Point} - p2\n     * @param {Number} - distance 与p1的距离\n     * @return {{x: *, y: *}}\n     */\n    getA3Point: function (_a) {\n        var p1 = _a.p1, p2 = _a.p2, distance = _a.distance;\n        var Ax1 = p1.x, Ay1 = p1.y;\n        var Ax2 = p2.x, Ay2 = p2.y;\n        var dLA1A2 = Math.sqrt(Math.pow(Ax2 - Ax1, 2) + Math.pow(Ay2 - Ay1, 2)); // 计算A1A2的长度\n        var Ax3 = (distance / dLA1A2) * (Ax2 - Ax1) + Ax1; // A3的横坐标\n        var Ay3 = (distance / dLA1A2) * (Ay2 - Ay1) + Ay1; // A3的横坐标\n        return {\n            x: Ax3,\n            y: Ay3,\n        };\n    },\n    /**\n     * getDistanceByBetweenPoint - 获取p1,p2两点间的距离\n     * @param {Point} - p1\n     * @param {Point} - p2\n     * @return {number}\n     */\n    getDistanceByBetweenPoint: function (_a) {\n        var p1 = _a.p1, p2 = _a.p2;\n        var Ax1 = p1.x, Ay1 = p1.y;\n        var Ax2 = p2.x, Ay2 = p2.y;\n        return Math.sqrt(Math.pow(Ax2 - Ax1, 2) + Math.pow(Ay2 - Ay1, 2)); // 计算A1A2的长度\n    },\n    /**\n     * clientToCtxPoint - 屏幕坐标转换成画布坐标\n     * @param {Event} - event\n     * @param {Rect} - rect\n     * @return {x:number,y:number}\n     */\n    clientToCtxPoint: function (_a) {\n        var event = _a.event, rect = _a.rect;\n        var clientX;\n        var clientY;\n        if (event instanceof MouseEvent) {\n            clientX = event.clientX;\n            clientY = event.clientY;\n        }\n        else {\n            clientX = event.changedTouches[0].clientX;\n            clientY = event.changedTouches[0].clientY;\n        }\n        // const zoom = Dom.getZoom();\n        return {\n            x: clientX /*/ zoom*/ - rect.left,\n            y: clientY /*/ zoom*/ - rect.top,\n        };\n    },\n    /**\n     * isPointInCircle - 判断一个点是否在圆内\n     * @param point\n     * @param circle\n     */\n    isPointInCircle: function (point, circle) {\n        var _x = point.x - circle.center.x;\n        var _y = point.y - circle.center.y;\n        return !(_x * _x + _y * _y > circle.radius * circle.radius);\n    },\n    /**\n     * isPointInRect - 点是否在矩形中\n     * @param point\n     * @param rect 1 2 3 4 5 6 7 8 9 10\n     */\n    isPointInRect: function (point, rect) {\n        return (point.x >= rect.x &&\n            point.x <= rect.x + rect.width - 1 &&\n            point.y >= rect.y &&\n            point.y <= rect.y + rect.height - 1);\n    },\n    /**\n     * getCanvasTextInGemX\n     * @description - 获取一个文本在Rect中的居中的X位置\n     * @param ctx\n     * @param text\n     * @param rect\n     */\n    getCanvasTextInGemX: function (ctx, text, rect) {\n        var left = rect.leftTop.x;\n        var right = rect.rightBottom.x;\n        var rectWidth = right - left;\n        var textWidth = ctx.measureText(text).width;\n        return (rectWidth - textWidth) / 2;\n    },\n    /**\n     * midpoint - 计算两个点的中心点\n     * @param fromPoint\n     * @param toPoint\n     * @return IPoint\n     */\n    midpoint: function (fromPoint, toPoint) {\n        return { x: (fromPoint.x + toPoint.x) / 2, y: (fromPoint.y + toPoint.y) / 2 };\n    },\n    /**\n     * slope - 计算两个点的斜率\n     * @param fromPoint\n     * @param toPoint\n     * @param axis - 'cartesian' | 'geographic'\n     * @return number | undefined\n     */\n    slope: function (fromPoint, toPoint, \n    // cartesian 平面直角坐标系\n    // geographic 地理坐标系\n    axis) {\n        if (axis === void 0) { axis = 'geographic'; }\n        // 垂直\n        if (fromPoint.x === toPoint.x)\n            return undefined;\n        // 平行\n        if (fromPoint.y === toPoint.y)\n            return 0;\n        // 有角度\n        var slope = (toPoint.y - fromPoint.y) / (toPoint.x - fromPoint.x);\n        // 如果是地理坐标系则取负值\n        return axis === 'geographic' ? -slope : slope;\n    },\n    /**\n     * slopToRadian - 获取两点斜率的弧度\n     * @param fromPoint\n     * @param toPoint\n     * @param axis cartesian(平面) | geographic(地理)\n     */\n    slopToRadian: function (fromPoint, toPoint, axis) {\n        if (axis === void 0) { axis = 'geographic'; }\n        // 斜率\n        var slope = this.slope(fromPoint, toPoint);\n        // 垂直\n        if (slope === 0) {\n            return fromPoint.x < toPoint.x ? this.angleToRadian(0) : this.angleToRadian(180);\n        }\n        // 平行\n        else if (slope === undefined) {\n            return axis === 'cartesian'\n                ? fromPoint.y <= toPoint.y\n                    ? this.angleToRadian(90)\n                    : this.angleToRadian(-90)\n                : fromPoint.y <= toPoint.y\n                    ? this.angleToRadian(-90)\n                    : this.angleToRadian(90);\n        }\n        // 有角度\n        else {\n            var dy = toPoint.y - fromPoint.y;\n            var dx = toPoint.x - fromPoint.x;\n            var degrees = Math.atan2(dy, dx);\n            return axis === 'cartesian' ? degrees : -degrees;\n        }\n    },\n    /**\n     * slopToAngle - 获取两点斜率的角度\n     * @param fromPoint\n     * @param toPoint\n     * @param axis\n     * @return number - 角度\n     */\n    slopToAngle: function (fromPoint, toPoint, axis) {\n        if (axis === void 0) { axis = 'geographic'; }\n        // 获取斜率的弧度\n        var slopRadian = this.slopToRadian(fromPoint, toPoint, axis);\n        // 弧度转换成角度\n        return this.radianToAngle(slopRadian);\n    },\n    /**\n     * radianToAngle - 弧度转换成角度\n     * @param radian - 弧度\n     * @return number - 角度\n     */\n    radianToAngle: function (radian) {\n        return (180 * radian) / Math.PI;\n    },\n    /**\n     * angleToRadian - 角度转弧度\n     * @param angle - 角度\n     * @return number - 弧度\n     */\n    angleToRadian: function (angle) {\n        return (angle * Math.PI) / 180;\n    },\n    /**\n     * distance - 距离\n     * @param value - 数值(m)\n     * @param unit - 单位\n     * @return 转换后的数值\n     */\n    distance: function (value, unit) {\n        var map = new Map([['kilometer', 1000]]);\n        return value / map.get(unit);\n    },\n    /**\n     * getCirclePoint\n     * @description - 获取圆上任意一点\n     * @param center\n     * @param raduis\n     * @param angle\n     */\n    getCirclePoint: function (center, raduis, angle) {\n        return {\n            x: center.x + Math.cos(angle) * raduis,\n            y: center.y + Math.sin(angle) * raduis,\n        };\n    },\n    /**\n     * getOvalPoint\n     * @description - 获取椭圆上任意一点\n     * @param center\n     * @param radiusX\n     * @param radiusY\n     * @param angle\n     */\n    getOvalPoint: function (center, radiusX, radiusY, angle) {\n        return {\n            x: center.x + Math.cos(angle) * radiusX,\n            y: center.y + Math.sin(angle) * radiusY,\n        };\n    },\n    /**\n     * pxToRemNumber\n     * @param {number} px\n     * @param {number} base\n     * @return {number}\n     */\n    pxToRemNumber: function (px, base) {\n        return px / base;\n    },\n    /**\n     * pxToRem\n     * @param {number} px\n     * @param {number} base\n     * @param media\n     * @return {string}\n     */\n    pxToRem: function (px, base, media) {\n        if (!media || media.isUseMedia) {\n            return \"\".concat(this.pxToRemNumber(px, base), \"rem\");\n        }\n        return \"\".concat(px, \"px\");\n    },\n    /**--------------------------math-end------------------------**/\n};\n"],"names":["toPoint","percent","str","replace","parseInt","toPercent","point","Number","toFixed","straightLineIntersection","p1","p2","p3","p4","x1","x","y1","y","x2","y2","x3","y3","x4","y4","getA3Point","_a","distance","Ax1","Ay1","Ax2","Ay2","dLA1A2","Math","sqrt","pow","getDistanceByBetweenPoint","clientToCtxPoint","clientX","event","rect","clientY","MouseEvent","changedTouches","left","top","isPointInCircle","circle","_x","center","_y","radius","isPointInRect","width","height","getCanvasTextInGemX","ctx","text","leftTop","rightBottom","measureText","midpoint","fromPoint","slope","axis","slopToRadian","this","angleToRadian","undefined","dy","dx","degrees","atan2","slopToAngle","slopRadian","radianToAngle","radian","PI","angle","value","unit","Map","get","getCirclePoint","raduis","cos","sin","getOvalPoint","radiusX","radiusY","pxToRemNumber","px","base","pxToRem","media","isUseMedia","concat"],"mappings":"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"}