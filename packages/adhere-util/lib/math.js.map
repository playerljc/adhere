{"version":3,"file":"math.js","sources":["math.js"],"sourcesContent":["export default {\r\n    /**--------------------------math-start----------------------**/\r\n    /**\r\n     * toPoint - 百分数转化为小数\r\n     * @param percent\r\n     */\r\n    toPoint: function (percent) {\r\n        var str = percent.replace('%', '');\r\n        // @ts-ignore\r\n        return str / 100;\r\n    },\r\n    /**\r\n     * point - 小数转化为百分数\r\n     * @param point\r\n     */\r\n    toPercent: function (point) {\r\n        var str = Number(point * 100).toFixed(1);\r\n        str += '%';\r\n        return str;\r\n    },\r\n    /**\r\n     * straightLineIntersection - 计算两个直线的交点\r\n     * @param p1\r\n     * @param p2\r\n     * @param p3\r\n     * @param p4\r\n     */\r\n    straightLineIntersection: function (p1, p2, p3, p4) {\r\n        var x1 = p1.x, y1 = p1.y;\r\n        var x2 = p2.x, y2 = p2.y;\r\n        var x3 = p3.x, y3 = p3.y;\r\n        var x4 = p4.x, y4 = p4.y;\r\n        return {\r\n            x: ((x3 - x4) * (x2 * y1 - x1 * y2) - (x1 - x2) * (x4 * y3 - x3 * y4)) /\r\n                ((x3 - x4) * (y1 - y2) - (x1 - x2) * (y3 - y4)),\r\n            y: ((y3 - y4) * (y2 * x1 - y1 * x2) - (y1 - y2) * (y4 * x3 - y3 * x4)) /\r\n                ((y3 - y4) * (x1 - x2) - (y1 - y2) * (x3 - x4)),\r\n        };\r\n    },\r\n    /**\r\n     * getA3Piint - 计算两点p1,p2 距离p1点distance距离的点p3的坐标\r\n     * @param {Point} - p1\r\n     * @param {Point} - p2\r\n     * @param {Number} - distance 与p1的距离\r\n     * @return {{x: *, y: *}}\r\n     */\r\n    getA3Point: function (_a) {\r\n        var p1 = _a.p1, p2 = _a.p2, distance = _a.distance;\r\n        var Ax1 = p1.x, Ay1 = p1.y;\r\n        var Ax2 = p2.x, Ay2 = p2.y;\r\n        var dLA1A2 = Math.sqrt(Math.pow(Ax2 - Ax1, 2) + Math.pow(Ay2 - Ay1, 2)); // 计算A1A2的长度\r\n        var Ax3 = (distance / dLA1A2) * (Ax2 - Ax1) + Ax1; // A3的横坐标\r\n        var Ay3 = (distance / dLA1A2) * (Ay2 - Ay1) + Ay1; // A3的横坐标\r\n        return {\r\n            x: Ax3,\r\n            y: Ay3,\r\n        };\r\n    },\r\n    /**\r\n     * getDistanceByBetweenPoint - 获取p1,p2两点间的距离\r\n     * @param {Point} - p1\r\n     * @param {Point} - p2\r\n     * @return {number}\r\n     */\r\n    getDistanceByBetweenPoint: function (_a) {\r\n        var p1 = _a.p1, p2 = _a.p2;\r\n        var Ax1 = p1.x, Ay1 = p1.y;\r\n        var Ax2 = p2.x, Ay2 = p2.y;\r\n        return Math.sqrt(Math.pow(Ax2 - Ax1, 2) + Math.pow(Ay2 - Ay1, 2)); // 计算A1A2的长度\r\n    },\r\n    /**\r\n     * clientToCtxPoint - 屏幕坐标转换成画布坐标\r\n     * @param {Event} - event\r\n     * @param {Rect} - rect\r\n     * @return {x:number,y:number}\r\n     */\r\n    clientToCtxPoint: function (_a) {\r\n        var event = _a.event, rect = _a.rect;\r\n        var clientX = event.clientX, clientY = event.clientY;\r\n        return {\r\n            x: clientX - rect.left,\r\n            y: clientY - rect.top,\r\n        };\r\n    },\r\n    /**\r\n     * isPointInCircle - 判断一个点是否在圆内\r\n     * @param point\r\n     * @param circle\r\n     */\r\n    isPointInCircle: function (point, circle) {\r\n        var _x = point.x - circle.center.x;\r\n        var _y = point.y - circle.center.y;\r\n        return !(_x * _x + _y * _y > circle.radius * circle.radius);\r\n    },\r\n    /**\r\n     * isPointInRect - 点是否在矩形中\r\n     * @param point\r\n     * @param rect 1 2 3 4 5 6 7 8 9 10\r\n     */\r\n    isPointInRect: function (point, rect) {\r\n        return (point.x >= rect.x &&\r\n            point.x <= rect.x + rect.width - 1 &&\r\n            point.y >= rect.y &&\r\n            point.y <= rect.y + rect.height - 1);\r\n    },\r\n    /**\r\n     * getCanvasTextInGemX\r\n     * @description - 获取一个文本在Rect中的居中的X位置\r\n     * @param ctx\r\n     * @param text\r\n     * @param rect\r\n     */\r\n    getCanvasTextInGemX: function (ctx, text, rect) {\r\n        var left = rect.leftTop.x;\r\n        var right = rect.rightBottom.x;\r\n        var rectWidth = right - left;\r\n        var textWidth = ctx.measureText(text).width;\r\n        return (rectWidth - textWidth) / 2;\r\n    },\r\n    /**\r\n     * midpoint - 计算两个点的中心点\r\n     * @param startPoint\r\n     * @param endPoint\r\n     * @return IPoint\r\n     */\r\n    midpoint: function (startPoint, endPoint) {\r\n        return { x: (startPoint.x + endPoint.x) / 2, y: (startPoint.y + endPoint.y) / 2 };\r\n    },\r\n    /**\r\n     * slope - 计算两个点的斜率\r\n     * @param startPoint\r\n     * @param endPoint\r\n     * @return number\r\n     */\r\n    slope: function (startPoint, endPoint) {\r\n        if (startPoint.x === endPoint.x)\r\n            return 0;\r\n        return (endPoint.y - startPoint.y) / (endPoint.x - startPoint.x);\r\n    },\r\n    /**\r\n     * slopToRadian - 获取两点斜率的弧度\r\n     * @param startPoint\r\n     * @param endPoint\r\n     * @param yAxis cartesian(平面) | geographic(地理)\r\n     */\r\n    slopToRadian: function (startPoint, endPoint, yAxis) {\r\n        if (yAxis === void 0) { yAxis = 'geographic'; }\r\n        var slope = this.slope(startPoint, endPoint);\r\n        if (slope === 0) {\r\n            // 直角坐标系\r\n            if (yAxis === 'cartesian') {\r\n                if (endPoint.y > startPoint.y) {\r\n                    return this.angleToRadian(90);\r\n                }\r\n                else {\r\n                    return this.angleToRadian(270);\r\n                }\r\n            }\r\n            // 地理坐标系\r\n            else if (yAxis === 'geographic') {\r\n                if (endPoint.y > startPoint.y) {\r\n                    return this.angleToRadian(270);\r\n                }\r\n                else {\r\n                    return this.angleToRadian(90);\r\n                }\r\n            }\r\n        }\r\n        return Math.atan(slope);\r\n    },\r\n    /**\r\n     * slopToAngle - 获取两点斜率的角度\r\n     * @param startPoint\r\n     * @param endPoint\r\n     * @param yAxis\r\n     * @return number - 角度\r\n     */\r\n    slopToAngle: function (startPoint, endPoint, yAxis) {\r\n        if (yAxis === void 0) { yAxis = 'geographic'; }\r\n        var slopRadian = this.slopToRadian(startPoint, endPoint, yAxis);\r\n        return this.radianToAngle(slopRadian);\r\n    },\r\n    /**\r\n     * radianToAngle - 弧度转换成角度\r\n     * @param radian - 弧度\r\n     * @return number - 角度\r\n     */\r\n    radianToAngle: function (radian) {\r\n        return (180 * radian) / Math.PI;\r\n    },\r\n    /**\r\n     * angleToRadian - 角度转弧度\r\n     * @param angle - 角度\r\n     * @return number - 弧度\r\n     */\r\n    angleToRadian: function (angle) {\r\n        return (angle * Math.PI) / 180;\r\n    },\r\n    /**\r\n     * distance - 距离\r\n     * @param value - 数值(m)\r\n     * @param unit - 单位\r\n     * @return 转换后的数值\r\n     */\r\n    distance: function (value, unit) {\r\n        var map = new Map([['kilometer', 1000]]);\r\n        return value / map.get(unit);\r\n    },\r\n};\r\n"],"names":["toPoint","percent","replace","toPercent","point","str","Number","toFixed","straightLineIntersection","p1","p2","p3","p4","x1","x","y1","y","x2","y2","x3","y3","x4","y4","getA3Point","_a","distance","Ax1","Ay1","Ax2","Ay2","dLA1A2","Math","sqrt","pow","getDistanceByBetweenPoint","clientToCtxPoint","event","rect","clientX","clientY","left","top","isPointInCircle","circle","_x","center","_y","radius","isPointInRect","width","height","getCanvasTextInGemX","ctx","text","leftTop","rightBottom","measureText","midpoint","startPoint","endPoint","slope","slopToRadian","yAxis","this","angleToRadian","atan","slopToAngle","slopRadian","radianToAngle","radian","PI","angle","value","unit","Map","get"],"mappings":"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"}