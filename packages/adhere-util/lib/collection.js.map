{"version":3,"file":"collection.js","sources":["collection.js"],"sourcesContent":["export default {\n    /**----------------------------集合相关---------------------------**/\n    /**\n     * processAsyncQueue\n     * @description 异步执行的队列\n     * @param {ProcessAsyncQueueItem[]} tasks 执行的任务\n     * @return {Promise<any>}\n     */\n    processAsyncQueue: function (tasks) {\n        // 执行队列的索引\n        var _index = 0;\n        // 队列的所有任务\n        var _tasks = tasks !== null && tasks !== void 0 ? tasks : [];\n        /**\n         * loopTask\n         * @return {Promise}\n         */\n        function loopTask() {\n            return new Promise(function (resolve, reject) {\n                var _a, _b;\n                // 队列结束\n                if (_index >= _tasks.length) {\n                    resolve();\n                }\n                // 执行队列任务\n                else {\n                    // 从队列顺序拿出一个任务\n                    var task_1 = _tasks[_index++];\n                    // 没拿出任务直接结束\n                    if (!task_1) {\n                        reject();\n                        return;\n                    }\n                    // 执行任务的run方法\n                    task_1.run\n                        .apply((_a = task_1 === null || task_1 === void 0 ? void 0 : task_1.context) !== null && _a !== void 0 ? _a : task_1.run, (_b = task_1 === null || task_1 === void 0 ? void 0 : task_1.argv) !== null && _b !== void 0 ? _b : [])\n                        // run方法执行成功\n                        .then(function (_res) {\n                        var _a;\n                        (_a = task_1 === null || task_1 === void 0 ? void 0 : task_1.success) === null || _a === void 0 ? void 0 : _a.call(task_1, _res);\n                        // 下钻执行其余的任务\n                        loopTask()\n                            .then(function () {\n                            resolve();\n                        })\n                            .catch(function (_error) {\n                            reject(_error);\n                        });\n                    })\n                        // run方法执行失败\n                        .catch(function (_error) {\n                        var _a;\n                        (_a = task_1 === null || task_1 === void 0 ? void 0 : task_1.fail) === null || _a === void 0 ? void 0 : _a.call(task_1, _error);\n                        reject(_error);\n                    });\n                }\n            });\n        }\n        return loopTask();\n    },\n    /**----------------------------集合相关---------------------------**/\n};\n"],"names":["processAsyncQueue","tasks","_index","_tasks","loopTask","Promise","resolve","reject","_b","task_1","length","run","apply","_a","context","argv","then","_res","success","call","catch","_error","fail"],"mappings":"cAAe,CAQXA,kBAAmB,SAAUC,GAEzB,IAAIC,EAAS,EAETC,EAASF,MAAAA,EAAqCA,EAAQ,GA8C1D,OAzCA,SAASG,IACL,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClC,IAAQC,EAQAC,EANJP,GAAUC,EAAOO,OACjBJ,EAAQ,GAKJG,EAASN,EAAOD,CAAM,KAO1BO,EAAOE,IACFC,MAAM,OAACC,EAAKJ,MAAAA,EAAuC,KAAA,EAASA,EAAOK,SAAqCD,EAAKJ,EAAOE,IAAK,OAACH,EAAKC,MAAAA,EAAuC,KAAA,EAASA,EAAOM,MAAkCP,EAAK,EAAE,EAE/NQ,KAAK,SAAUC,GAChB,IAAIJ,EACJ,OAACA,EAAKJ,MAAAA,EAAuC,KAAA,EAASA,EAAOS,UAA8CL,EAAGM,KAAKV,EAAQQ,CAAI,EAE/Hb,EAAS,EACJY,KAAK,WACNV,EAAQ,CACZ,CAAC,EACIc,MAAM,SAAUC,GACjBd,EAAOc,CAAM,CACjB,CAAC,CACL,CAAC,EAEID,MAAM,SAAUC,GACjB,IAAIR,EACJ,OAACA,EAAKJ,MAAAA,EAAuC,KAAA,EAASA,EAAOa,OAA2CT,EAAGM,KAAKV,EAAQY,CAAM,EAC9Hd,EAAOc,CAAM,CACjB,CAAC,EAxBGd,EAAO,CA0BnB,CAAC,CACL,EACgB,CACpB,CAEJ"}