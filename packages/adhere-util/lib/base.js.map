{"version":3,"file":"base.js","sources":["base.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// 特殊符号\r\nvar SPECIAL_SYMBOL = '__';\r\n// 记录对象路径的变量\r\nvar PATH_SYMBOLS = [\r\n    \"\".concat(SPECIAL_SYMBOL, \"parentName\").concat(SPECIAL_SYMBOL),\r\n    \"\".concat(SPECIAL_SYMBOL, \"parent\").concat(SPECIAL_SYMBOL),\r\n];\r\nexports.default = {\r\n    /**----------------------------基本---------------------------**/\r\n    /**\r\n     * isEmpty - 对象是否为空\r\n     * @param value\r\n     */\r\n    isEmpty: function (value) {\r\n        return value === null || value === '' || value === undefined;\r\n    },\r\n    /**\r\n     * isNumber - 判断是否是number\r\n     * @param val\r\n     * @return {boolean}\r\n     */\r\n    isNumber: function (val) {\r\n        return (!this.isObject(val) && !this.isArray(val) && !this.isFunction(val) && typeof val === 'number');\r\n    },\r\n    /**\r\n     * isBoolean - 判断是否是boolean\r\n     * @param val\r\n     * @return {boolean}\r\n     */\r\n    isBoolean: function (val) {\r\n        return (typeof val).toLowerCase() === 'boolean';\r\n    },\r\n    /**\r\n     * isString - 判断是否是string\r\n     * @param val\r\n     * @return {boolean}\r\n     */\r\n    isString: function (val) {\r\n        return (typeof val).toLowerCase() === 'string';\r\n    },\r\n    /**\r\n     * isSymbol - 是否是符号类型\r\n     * @param val\r\n     * @return boolean\r\n     */\r\n    isSymbol: function (val) {\r\n        return (typeof val).toLowerCase() === 'symbol';\r\n    },\r\n    /**\r\n     * isPrimitive - 是否是基本类型\r\n     * @param val\r\n     */\r\n    isPrimitive: function (val) {\r\n        return this.isBoolean(val) || this.isNumber(val) || this.isString(val) || this.isSymbol(val);\r\n    },\r\n    /**\r\n     * isArray - 判断数组\r\n     * @param obj\r\n     * @return {boolean}\r\n     */\r\n    isArray: function (obj) {\r\n        return Array.isArray(obj);\r\n    },\r\n    /**\r\n     * isFunction - 判断函数\r\n     * @param obj\r\n     * @return {boolean}\r\n     */\r\n    isFunction: function (obj) {\r\n        return obj instanceof Function;\r\n    },\r\n    /**\r\n     * isObject - 是否是对象\r\n     * @param obj\r\n     * @return {boolean}\r\n     */\r\n    isObject: function (obj) {\r\n        return obj instanceof Object && !Array.isArray(obj) && !(obj instanceof Function);\r\n    },\r\n    /**\r\n     * isRef - 是否是引用类型\r\n     * @param obj\r\n     */\r\n    isRef: function (obj) {\r\n        return this.isArray(obj) || this.isObject(obj);\r\n    },\r\n    /**\r\n     * chainCallAssignment - 对象的链式赋值\r\n     * obj.a.b.c.d.x.x.x = value\r\n     * @param obj Object - 赋值的对象\r\n     * @param chainStr string - 属性链式表达式 a.b.c\r\n     * @param value any - 要复值的值\r\n     */\r\n    chainCallAssignment: function (_a) {\r\n        var obj = _a.obj, chainStr = _a.chainStr, value = _a.value;\r\n        if (!this.isObject(obj) ||\r\n            !this.isString(chainStr) ||\r\n            this.isEmpty(chainStr) ||\r\n            this.isEmpty(obj))\r\n            return false;\r\n        var chain = chainStr.split('.');\r\n        // const obj = {};\r\n        // a.b.c\r\n        // const item = obj['a']\r\n        var target = obj;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            var property = chain[i];\r\n            if (i < chain.length - 1) {\r\n                target = target[property];\r\n            }\r\n            else {\r\n                target[property] = value;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * getObjectByChainStr - 通过chainStr获取对象\r\n     * obj.a.b.c.d.x.x.x = value\r\n     * @param obj Object - 赋值的对象\r\n     * @param chainStr string - 属性链式表达式 a.b.c\r\n     * @return Object\r\n     */\r\n    getObjectByChainStr: function (_a) {\r\n        var obj = _a.obj, chainStr = _a.chainStr;\r\n        if (!this.isObject(obj) ||\r\n            !this.isString(chainStr) ||\r\n            this.isEmpty(chainStr) ||\r\n            this.isEmpty(obj))\r\n            return obj;\r\n        var chain = chainStr.split('.');\r\n        // const obj = {};\r\n        // a.b.c\r\n        // const item = obj['a']\r\n        var target = obj;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            target = target[chain[i]];\r\n        }\r\n        return target;\r\n    },\r\n    /**\r\n     * toCamelCase - 用连接符链接的字符串转换成驼峰写法\r\n     * 例：abc-def AbcDef\r\n     * @param str - string 用连接符节点的字符串\r\n     * @param toUpperCase - boolean 是否转换成大写\r\n     * @return {String}\r\n     */\r\n    toCamelCase: function (str, toUpperCase) {\r\n        if (toUpperCase === void 0) { toUpperCase = false; }\r\n        var result = str\r\n            .split('-')\r\n            .map(function (item) { return item.charAt(0).toUpperCase() + item.substring(1); })\r\n            .join('');\r\n        return !toUpperCase ? \"\".concat(result.charAt(0).toLowerCase()).concat(result.substring(1)) : result;\r\n    },\r\n    /**\r\n     * isKebabCase - 是否是烤肉串形式的名字\r\n     * @param name - string 名称\r\n     * @return boolean\r\n     */\r\n    isKebabCase: function (name) {\r\n        return /^([a-z][a-z0-9]*)(-[a-z0-9]+)*$/.test(name);\r\n    },\r\n    /**\r\n     * isPascalCase - 是否是驼峰形式的名字\r\n     * @param name - string 名称\r\n     * @return boolean\r\n     */\r\n    isPascalCase: function (name) {\r\n        return /^[A-Z][a-z]+(?:[A-Z][a-z]+)*$/.test(name);\r\n    },\r\n    /**\r\n     * pascalCaseToKebabCase 驼峰转xxx-xxx-xxx\r\n     * @param name - string pascalCase的字符串\r\n     * @return {string}\r\n     */\r\n    pascalCaseToKebabCase: function (name) {\r\n        var result = name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2');\r\n        return (result.startsWith('-') ? result.substring(1) : result).toLowerCase();\r\n    },\r\n    /**\r\n     * execExpression - 执行表达式\r\n     * @param context - {Object} 执行的上下文\r\n     * @param expressionStr - {String} 表达式\r\n     * @param data\r\n     * @return {any}\r\n     */\r\n    execExpression: function (context, expressionStr, data) {\r\n        // 实参列表，调用函数传递的参数\r\n        var argv = [data];\r\n        // 形参列表，函数声明的参数列表\r\n        var parameters = ['context'];\r\n        // 迭代context\r\n        for (var p in context) {\r\n            // 拼凑其他实参\r\n            argv.push(context[p]);\r\n            // 拼凑其他形参\r\n            parameters.push(p);\r\n        }\r\n        // 创建函数并调用\r\n        return eval(\"\\n    const fun = new Function(\\n      `\".concat(parameters.join(','), \"`,\\n      `return eval(\\\"with(context){\").concat(expressionStr, \"}\\\")`,\\n    );\\n\\n    fun.apply(window, argv);\\n  \"));\r\n    },\r\n    /**\r\n     * getCookie\r\n     * @return {string}\r\n     * @param name\r\n     */\r\n    getCookie: function (name) {\r\n        if (name === void 0) { name = 'lang'; }\r\n        var strCookie = typeof document !== 'undefined' ? document.cookie : ''; // 获取cookie字符串\r\n        var arrCookie = strCookie.split(';'); // 分割\r\n        // 遍历匹配\r\n        var value = '';\r\n        for (var i = 0; i < arrCookie.length; i++) {\r\n            var arr = arrCookie[i].split('=');\r\n            if (arr[0].trim() === name) {\r\n                value = arr[1];\r\n                break;\r\n            }\r\n        }\r\n        return value;\r\n    },\r\n    /**\r\n     * noop - 返回一个空实现的函数\r\n     * @return Function\r\n     */\r\n    noop: function () {\r\n        return function () { };\r\n    },\r\n    /**\r\n     * generatorRandom - 生成随机数\r\n     * @param lowerValue - 最小值\r\n     * @param upperValue - 最大值\r\n     */\r\n    generatorRandom: function (lowerValue, upperValue) {\r\n        var choices = upperValue - lowerValue + 1;\r\n        return Math.floor(Math.random() * choices + lowerValue);\r\n    },\r\n    /**\r\n     * uuid - 获取uuid\r\n     * @return string\r\n     */\r\n    uuid: function () {\r\n        var s = [];\r\n        var hexDigits = '0123456789abcdef';\r\n        for (var i = 0; i < 36; i++) {\r\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n        }\r\n        s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010\r\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n        s[8] = s[13] = s[18] = s[23] = '-';\r\n        return s.join('');\r\n    },\r\n    /**\r\n     * getPropertyVisitPathStr - 获取属性访问的完整字符串路径 a.b.c.d.e.f\r\n     * @param target Proxy中set的target参数\r\n     * @param key Proxy中set的key参数\r\n     * @return {string}\r\n     */\r\n    getPropertyVisitPathStr: function (target, key) {\r\n        // 最终的访问路径 - 先将最后一个key放入\r\n        var visitPath = this.isArray(target) /* && key !== 'length' */ ? [] : [key];\r\n        if (target[PATH_SYMBOLS[0]]) {\r\n            visitPath.push(target[PATH_SYMBOLS[0]]);\r\n        }\r\n        var parent = target[PATH_SYMBOLS[1]];\r\n        while (parent) {\r\n            if (parent[PATH_SYMBOLS[0]]) {\r\n                visitPath.push(parent[PATH_SYMBOLS[0]]);\r\n            }\r\n            parent = parent[PATH_SYMBOLS[1]];\r\n        }\r\n        // [0] c b a\r\n        // a b c [0]\r\n        // a [0]\r\n        visitPath.reverse();\r\n        var result = [];\r\n        for (var i = 0; i < visitPath.length; i++) {\r\n            var item = visitPath[i];\r\n            if (item.startsWith('[') && item.endsWith(']')) {\r\n                result[result.length - 1] = \"\".concat(result[result.length - 1]).concat(item);\r\n            }\r\n            else {\r\n                result.push(item);\r\n            }\r\n        }\r\n        return result.join('.');\r\n    },\r\n    /**\r\n     * convertBase64UrlToBlob - 转换base64位blob对象\r\n     * @return Blob\r\n     * @param data\r\n     */\r\n    convertBase64UrlToBlob: function (data) {\r\n        if (typeof window === 'undefined')\r\n            return null;\r\n        var bytes = window.atob(data.split(',')[1]); // 去掉url的头，并转换为byte\r\n        // 处理异常,将ascii码小于0的转换为大于0\r\n        var ab = new ArrayBuffer(bytes.length);\r\n        var ia = new Uint8Array(ab);\r\n        for (var i = 0; i < bytes.length; i++) {\r\n            ia[i] = bytes.charCodeAt(i);\r\n        }\r\n        return new Blob([ab], { type: 'image/png' });\r\n    },\r\n    /**\r\n     * omitObject\r\n     * @description - 对象排除空值\r\n     * @param obj\r\n     * @return object\r\n     */\r\n    omitObject: function (obj) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        obj = obj || {};\r\n        var res = {};\r\n        var keys = Object.keys(obj);\r\n        keys.forEach(function (key) {\r\n            var value = obj[key];\r\n            if (![null, undefined, '', 'undefined'].includes(value)) {\r\n                if (typeof value === 'string') {\r\n                    value = value.trim();\r\n                }\r\n                res[key] = value;\r\n            }\r\n        });\r\n        return res;\r\n    },\r\n    /**----------------------------基本end---------------------------**/\r\n};\r\n"],"names":["Object","defineProperty","exports","value","SPECIAL_SYMBOL","PATH_SYMBOLS","concat","default","isEmpty","undefined","isNumber","val","this","isObject","isArray","isFunction","isBoolean","toLowerCase","isString","isSymbol","isPrimitive","obj","Array","Function","isRef","chainCallAssignment","_a","chainStr","chain","split","target","i","length","property","getObjectByChainStr","toCamelCase","str","toUpperCase","result","map","item","charAt","substring","join","isKebabCase","name","test","isPascalCase","pascalCaseToKebabCase","replace","startsWith","execExpression","context","expressionStr","data","argv","parameters","p","push","eval","getCookie","arrCookie","document","cookie","arr","trim","noop","generatorRandom","lowerValue","upperValue","choices","Math","floor","random","uuid","s","hexDigits","substr","getPropertyVisitPathStr","key","visitPath","parent","reverse","endsWith","convertBase64UrlToBlob","window","bytes","atob","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","type","omitObject","res","keys","forEach","includes"],"mappings":"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"}