{"version":3,"file":"tree.js","sources":["tree.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar TreeUtil = {\n    /**\n     * treeToArray\n     * @description tree数据转换成Array\n     * @param treeData\n     * @param config\n     * @param keyAttr\n     */\n    treeToArray: function (treeData, config, keyAttr) {\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        // key: string;\n        // title: string;\n        // isLeaf: boolean;\n        // children?: IAntdTreeNode[];\n        // properties?: any;\n        var parentIdAttr = config.parentIdAttr, rootParentId = config.rootParentId;\n        var result = [];\n        function loop(context, data, parentId) {\n            var _a;\n            for (var i = 0; i < data.length; i++) {\n                var item = data[i];\n                result.push(__assign(__assign({}, item), (_a = {}, _a[parentIdAttr] = parentId, _a)));\n                if (item.children && Array.isArray(item.children) && item.children.length) {\n                    loop(context, item.children, item[keyAttr !== null && keyAttr !== void 0 ? keyAttr : 'key']);\n                }\n            }\n        }\n        loop(result, treeData, rootParentId);\n        return result;\n    },\n    /**\n     * arrayToAntdTree - array转换成Tree\n     * @param arr\n     * @param config\n     */\n    arrayToAntdTree: function (arr, config) {\n        var \n        // 主键属性\n        keyAttr = config.keyAttr, \n        // title属性\n        titleAttr = config.titleAttr, \n        // parentId属性\n        parentIdAttr = config.parentIdAttr, \n        // root的parentId的值\n        rootParentId = config.rootParentId;\n        /**\n         * findNodesByParentId\n         * @param arr\n         * @param parentId\n         * @return {*}\n         */\n        function findNodesByParentId(arr, parentId) {\n            return arr\n                .filter(function (item) { return item[parentIdAttr] == parentId; })\n                .map(function (item) { return (__assign(__assign({}, item), { title: item[titleAttr], key: item[keyAttr], \n                // isLeaf: true,\n                children: [], properties: __assign({}, item) })); });\n        }\n        /**\n         * Recursion\n         * @constructor\n         */\n        function Recursion(node) {\n            node.children = findNodesByParentId(arr, node.properties[keyAttr]);\n            node.isLeaf = 'isLeaf' in node ? node.isLeaf : !node.children.length;\n            if (node.isLeaf) {\n                delete node.children;\n            }\n            (node.children || []).forEach(function (node) {\n                Recursion(node);\n            });\n        }\n        var roots = findNodesByParentId(arr, rootParentId);\n        roots.forEach(function (root) {\n            Recursion(root);\n        });\n        return roots;\n    },\n    /**\n     * arrayToAntdTreeSelect - array转换成TreeSelect\n     * @param arr\n     * @param config\n     */\n    arrayToAntdTreeSelect: function (arr, config) {\n        var keyAttr = config.keyAttr, titleAttr = config.titleAttr, rootParentId = config.rootParentId, parentIdAttr = config.parentIdAttr;\n        /**\n         * findNodesByParentId\n         * @param arr\n         * @param parentId\n         * @return {*}\n         */\n        function findNodesByParentId(arr, parentId) {\n            return arr\n                .filter(function (item) { return item[parentIdAttr] == parentId; })\n                .map(function (item) { return (__assign(__assign({}, item), { key: item[keyAttr], title: item[titleAttr], value: item[keyAttr], \n                // isLeaf: true,\n                children: [], properties: __assign({}, item) })); });\n        }\n        /**\n         * Recursion\n         * @constructor\n         */\n        function Recursion(node) {\n            node.children = findNodesByParentId(arr, node.properties[keyAttr]);\n            node.isLeaf = 'isLeaf' in node ? node.isLeaf : !node.children.length;\n            if (node.isLeaf) {\n                delete node.children;\n            }\n            (node.children || []).forEach(function (node) {\n                Recursion(node);\n            });\n        }\n        var roots = findNodesByParentId(arr, rootParentId);\n        roots.forEach(function (root) {\n            Recursion(root);\n        });\n        return roots;\n    },\n    /**\n     * getAncestor - 获取祖先\n     * @param data\n     * @param node\n     * @param config\n     */\n    getAncestor: function (data, node, config) {\n        var result = [];\n        var curNode = node;\n        while (curNode && curNode[config.parentIdAttr] != config.rootParentId) {\n            var item = data.find(function (t) { return t[config.keyAttr] === curNode[config.parentIdAttr]; });\n            if (item) {\n                result.push(item);\n            }\n            curNode = item;\n        }\n        return result;\n    },\n    /**\n     * getDescendants\n     * @description - 获取子孙\n     */\n    getDescendants: function (data, node, config) {\n        function loop(n) {\n            var children = data.filter(function (t) { return t[config.parentIdAttr] === n[config.keyAttr]; });\n            children.forEach(function (t) {\n                result.push(t);\n                loop(t);\n            });\n        }\n        var result = [];\n        loop(node);\n        return result;\n    },\n    /**\n     * completionIncompleteFlatArr\n     * @description 补残缺的FlatArr\n     */\n    completionIncompleteFlatArr: function (treeFlatNodes, incompleteTreeFlatNodes, config) {\n        var _this = this;\n        var set = new Set();\n        incompleteTreeFlatNodes.forEach(function (t) {\n            var tops = _this.getAncestor(treeFlatNodes, t, config);\n            var tArr = __spreadArray([], (tops || []), true).map(function (item) { return item[config.keyAttr]; });\n            set = new Set(__spreadArray(__spreadArray([], Array.from(set), true), tArr, true));\n        });\n        set = new Set(__spreadArray(__spreadArray([], Array.from(set), true), incompleteTreeFlatNodes.map(function (t) { return t[config.keyAttr]; }), true));\n        return this.arrayToAntdTree(__spreadArray([], Array.from(set), true).map(function (t) { return treeFlatNodes.find(function (item) { return item[config.keyAttr] === t; }); }), config);\n    },\n    /**\n     * filterTreeByFlatData\n     * @description 本地过滤tree\n     * @param treeFlatNodes\n     * @param kw\n     * @param config\n     */\n    filterTreeByFlatData: function (treeFlatNodes, kw, config) {\n        var filterAttr = config.filterAttr, arrayToAntdTreeConfig = __rest(config, [\"filterAttr\"]);\n        if (kw) {\n            var arr = treeFlatNodes.filter(function (node) {\n                return node[config.filterAttr].indexOf(kw) !== -1;\n            });\n            return this.completionIncompleteFlatArr(treeFlatNodes, arr, config);\n        }\n        else {\n            return this.arrayToAntdTree(treeFlatNodes, arrayToAntdTreeConfig);\n        }\n    },\n    /**\n     * filterTree\n     * @description\n     * @param treeNodes\n     * @param kw\n     * @param config\n     */\n    filterTree: function (treeNodes, kw, config) {\n        var filterAttr = config.filterAttr, arrayToAntdTreeConfig = __rest(config, [\"filterAttr\"]);\n        var treeFlatNodes = this.treeToArray(treeNodes, {\n            parentIdAttr: config.parentIdAttr,\n            rootParentId: config.rootParentId,\n        });\n        if (kw) {\n            var arr = treeFlatNodes.filter(function (node) {\n                return node[config.filterAttr].indexOf(kw) !== -1;\n            });\n            return this.completionIncompleteFlatArr(treeFlatNodes, arr, config);\n        }\n        else {\n            return this.arrayToAntdTree(treeFlatNodes, arrayToAntdTreeConfig);\n        }\n    },\n    /**\n     * findNodeByKey\n     * @description - 根据keyAttr查找结点\n     * @param treeData\n     * @param val\n     * @param config\n     */\n    findNodeByKey: function (treeData, val, config) {\n        function findLoop(data) {\n            var _a, _b;\n            var result = null;\n            for (var i = 0; i < data.length; i++) {\n                if (data[i][config.keyAttr] === val) {\n                    result = data[i];\n                    break;\n                }\n                else {\n                    if ('children' in data[i] &&\n                        Array.isArray(data[i].children) &&\n                        ((_b = (_a = data[i]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length)) {\n                        result = findLoop(data[i].children);\n                        if (result)\n                            break;\n                    }\n                }\n            }\n            return result;\n        }\n        return findLoop(treeData);\n    },\n    /**\n     * findParentNodeByKey\n     * @description 根据key查找parentNode\n     * @param treeData\n     * @param val\n     * @param config\n     */\n    findParentNodeByKey: function (treeData, val, _a) {\n        var keyAttr = _a.keyAttr;\n        var parentNode;\n        function loop(_parentNode, _nodes) {\n            var _a;\n            for (var i = 0; i < _nodes.length; i++) {\n                var _node = _nodes[i];\n                if (_node[keyAttr] === val) {\n                    parentNode = _parentNode;\n                    break;\n                }\n                else {\n                    loop(_node, (_a = _node.children) !== null && _a !== void 0 ? _a : []);\n                    if (parentNode) {\n                        break;\n                    }\n                }\n            }\n        }\n        loop(parentNode, treeData);\n        return parentNode;\n    },\n    /**\n     * transformTreeData\n     * @description - 转换一个treeData为antd的TreeData\n     * @param treeData\n     * @param childrenAttr\n     * @param onCallback\n     * @return IAntdTreeNode[]\n     */\n    transformTreeData: function (treeData, childrenAttr, onCallback) {\n        function loop(children) {\n            var result = [];\n            for (var i = 0; i < children.length; i++) {\n                var node = children[i];\n                node[childrenAttr || 'children'] = loop(node[childrenAttr || 'children']);\n                result.push(onCallback(node));\n            }\n            return result;\n        }\n        return loop(treeData);\n    },\n    /**\n     * getLeafNodes\n     * @description 获取叶子节点\n     */\n    getLeafNodes: function (nodes, childrenAttr) {\n        if (nodes === void 0) { nodes = []; }\n        if (childrenAttr === void 0) { childrenAttr = 'children'; }\n        function loop(treeNodes, childrenAttr) {\n            var result = [];\n            for (var i = 0; i < treeNodes.length; i++) {\n                var node = treeNodes[i];\n                if (childrenAttr in node && Array.isArray(node[childrenAttr])) {\n                    // 有孩子\n                    result = __spreadArray(__spreadArray([], result, true), loop(node[childrenAttr], childrenAttr), true);\n                }\n                else {\n                    // 没有孩子就是叶子节点\n                    result.push(node);\n                }\n            }\n            return result;\n        }\n        return loop(nodes || [], childrenAttr || 'children');\n    },\n    /**\n     * getLeafNodesByIndex\n     * @description 通过索引获取叶子节点的集合\n     */\n    getLeafNodesByIndex: function (nodes, childrenAttr, indexAttr) {\n        if (nodes === void 0) { nodes = []; }\n        if (childrenAttr === void 0) { childrenAttr = 'children'; }\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\n        function loop(treeNodes, childrenAttr, leafAttr) {\n            var result = [];\n            for (var i = 0; i < treeNodes.length; i++) {\n                var node = treeNodes[i];\n                if (leafAttr in node && typeof node[leafAttr] === 'boolean' && node[leafAttr]) {\n                    result.push(node);\n                }\n                if (childrenAttr in node && Array.isArray(node[childrenAttr])) {\n                    result = __spreadArray(__spreadArray([], result, true), loop(node[childrenAttr], childrenAttr, leafAttr), true);\n                }\n            }\n            return result;\n        }\n        return loop(nodes || [], childrenAttr || 'children', indexAttr || 'isLeaf');\n    },\n    /**\n     * getLeafNodeByFlatData\n     * @description 获取叶子节点通过拉平的数据\n     * @param arr\n     * @param config\n     */\n    getLeafNodeByFlatData: function (arr, config) {\n        var parentIdAttr = config.parentIdAttr, keyAttr = config.keyAttr;\n        // 获取所有的parentId\n        var parentIds = arr\n            .filter(function (t) { return parentIdAttr in t && t[parentIdAttr]; })\n            .map(function (t) { return t[parentIdAttr]; });\n        // 1,2,3 parentIds\n        // 1,2,3,4,5 arr\n        return arr.filter(function (t) { return !parentIds.includes(t[keyAttr]); });\n    },\n    /**\n     * getLeafNodeByFlatDataToIndex\n     * @description 获取叶子节点通过索引和拉平的数据\n     * @param arr\n     * @param indexAttr\n     */\n    getLeafNodeByFlatDataToIndex: function (arr, indexAttr) {\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\n        return arr.filter(function (t) { return typeof t[indexAttr || 'isLeaf'] === 'boolean' && t[indexAttr]; });\n    },\n    /**\n     * getTreeLevel\n     * @description 获取树的层级\n     */\n    getTreeLevel: function (nodes, keyAttr) {\n        var _a;\n        if (nodes === void 0) { nodes = []; }\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        var flat = this.treeToArray(nodes, {\n            parentIdAttr: 'pid',\n            rootParentId: -1,\n        }, keyAttr);\n        var config = {\n            keyAttr: keyAttr,\n            titleAttr: keyAttr,\n            parentIdAttr: 'pid',\n            rootParentId: -1,\n        };\n        var leafNodes = this.getLeafNodeByFlatData(flat, config);\n        var levels = [];\n        var _loop_1 = function (i) {\n            var leafNode = leafNodes[i];\n            var level = 1;\n            var pid = leafNode[config.parentIdAttr];\n            while (pid !== -1) {\n                pid = (_a = flat.find(function (node) { return node[keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a[config.parentIdAttr];\n                level++;\n            }\n            levels.push(level);\n        };\n        for (var i = 0; i < leafNodes.length; i++) {\n            _loop_1(i);\n        }\n        return Math.max.apply(Math, levels);\n    },\n    /**\n     * getTreeLevelByIndex\n     * @description 获取树的层级通过索引\n     */\n    getTreeLevelByIndex: function (nodes, indexAttr, keyAttr) {\n        var _a;\n        if (nodes === void 0) { nodes = []; }\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        var config = {\n            parentIdAttr: 'pid',\n            rootParentId: -1,\n        };\n        var flat = this.treeToArray(nodes, config);\n        var leafNodes = this.getLeafNodeByFlatDataToIndex(flat, indexAttr);\n        var levels = [];\n        var _loop_2 = function (i) {\n            var leafNode = leafNodes[i];\n            var level = 1;\n            var pid = leafNode[config.parentIdAttr];\n            while (pid !== -1) {\n                pid = (_a = flat.find(function (node) { return node[keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a[config.parentIdAttr];\n                level++;\n            }\n            levels.push(level);\n        };\n        for (var i = 0; i < leafNodes.length; i++) {\n            _loop_2(i);\n        }\n        return Math.max.apply(Math, levels);\n    },\n    /**\n     * getTreeLevelToFlat\n     * @description 获取树的层级通过拉平的数据\n     */\n    getTreeLevelToFlat: function (flatArr, config) {\n        var _a;\n        var leafNodes = this.getLeafNodeByFlatData(flatArr, config);\n        var levels = [];\n        var _loop_3 = function (i) {\n            var leafNode = leafNodes[i];\n            var level = 1;\n            var pid = leafNode[config.parentIdAttr];\n            while (pid !== -1) {\n                pid = (_a = flatArr.find(function (node) { return node[config.keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a[config.parentIdAttr];\n                level++;\n            }\n            levels.push(level);\n        };\n        for (var i = 0; i < leafNodes.length; i++) {\n            _loop_3(i);\n        }\n        return Math.max.apply(Math, levels);\n    },\n    /**\n     * getTreeLevelByIndexToFlat\n     * @description 获取树的层级通过拉平的数据和索引\n     */\n    getTreeLevelByIndexToFlat: function (flatArr, config, indexAttr) {\n        var _a;\n        var leafNodes = this.getLeafNodeByFlatDataToIndex(flatArr, indexAttr);\n        var levels = [];\n        var _loop_4 = function (i) {\n            var leafNode = leafNodes[i];\n            var level = 1;\n            var pid = leafNode[config.parentIdAttr];\n            while (pid !== -1) {\n                pid = (_a = flatArr.find(function (node) { return node[config.keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a[config.parentIdAttr];\n                level++;\n            }\n            levels.push(level);\n        };\n        for (var i = 0; i < leafNodes.length; i++) {\n            _loop_4(i);\n        }\n        return Math.max.apply(Math, levels);\n    },\n    /**\n     * getNodeLevel\n     * @description 获取节点所在的level\n     * @param nodes\n     * @param node\n     * @param keyAttr\n     */\n    getNodeLevel: function (nodes, node, keyAttr) {\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        var currentLevel = -1;\n        var treeLevel = this.getTreeLevel(nodes, keyAttr);\n        var children = nodes;\n        for (var i = 0; i < treeLevel; i++) {\n            if (children.find(function (t) { return t[keyAttr] === node[keyAttr]; })) {\n                currentLevel = i + 1;\n                break;\n            }\n            else {\n                children = children.map(function (t) { return t.children || []; }).flat();\n            }\n        }\n        return currentLevel;\n    },\n    /**\n     * excludeAntdTreeNodes\n     * @description 排除指定节点后形成一棵树\n     * @param nodes\n     * @param excludeKeys\n     * @param keyAttr\n     */\n    excludeAntdTreeNodes: function (nodes, excludeKeys, keyAttr) {\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        var config = {\n            parentIdAttr: 'pid',\n            rootParentId: -1,\n        };\n        var flatArr = this.treeToArray(nodes, config, keyAttr);\n        var _excludeKeys = [];\n        for (var i = 0; i < excludeKeys.length; i++) {\n            var result = loop(excludeKeys[i]);\n            _excludeKeys = __spreadArray(__spreadArray([], _excludeKeys, true), result, true);\n        }\n        _excludeKeys = __spreadArray(__spreadArray([], _excludeKeys, true), excludeKeys, true);\n        var omitArr = flatArr.filter(function (node) { return !_excludeKeys.includes(node[keyAttr]); });\n        function loop(excludeKey) {\n            var childrenKeys = flatArr\n                .filter(function (t) { return t[config.parentIdAttr] === excludeKey; })\n                .map(function (t) { return t[keyAttr]; });\n            var excludeKeys = childrenKeys;\n            for (var i = 0; i < childrenKeys.length; i++) {\n                var result = loop(childrenKeys[i]);\n                excludeKeys = __spreadArray(__spreadArray([], excludeKeys, true), result, true);\n            }\n            return excludeKeys;\n        }\n        return this.completionIncompleteFlatArr(flatArr, omitArr, {\n            keyAttr: keyAttr,\n            titleAttr: 'title',\n            parentIdAttr: config.parentIdAttr,\n            rootParentId: config.rootParentId,\n        });\n    },\n    /**\n     * excludeAntdSelectTreeNodes\n     * @description 排除指定节点后形成一棵树\n     * @param nodes\n     * @param excludeKeys\n     * @param keyAttr\n     */\n    excludeAntdSelectTreeNodes: function (nodes, excludeKeys, keyAttr) {\n        if (keyAttr === void 0) { keyAttr = 'key'; }\n        var config = {\n            parentIdAttr: 'pid',\n            rootParentId: -1,\n        };\n        var flatArr = this.treeToArray(nodes, config, keyAttr);\n        var _excludeKeys = [];\n        for (var i = 0; i < excludeKeys.length; i++) {\n            var result = loop(excludeKeys[i]);\n            _excludeKeys = __spreadArray(__spreadArray([], _excludeKeys, true), result, true);\n        }\n        _excludeKeys = __spreadArray(__spreadArray([], _excludeKeys, true), excludeKeys, true);\n        var omitArr = flatArr.filter(function (node) { return !_excludeKeys.includes(node[keyAttr]); });\n        function loop(excludeKey) {\n            var childrenKeys = flatArr\n                .filter(function (t) { return t[config.parentIdAttr] === excludeKey; })\n                .map(function (t) { return t[keyAttr]; });\n            var excludeKeys = childrenKeys;\n            for (var i = 0; i < childrenKeys.length; i++) {\n                var result = loop(childrenKeys[i]);\n                excludeKeys = __spreadArray(__spreadArray([], excludeKeys, true), result, true);\n            }\n            return excludeKeys;\n        }\n        return this.completionIncompleteFlatArr(flatArr, omitArr, {\n            keyAttr: keyAttr,\n            titleAttr: 'title',\n            parentIdAttr: config.parentIdAttr,\n            rootParentId: config.rootParentId,\n        });\n    },\n};\nexport default TreeUtil;\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArray","to","from","pack","ar","l","Array","slice","concat","TreeUtil","treeToArray","treeData","config","keyAttr","parentIdAttr","rootParentId","result","loop","context","data","parentId","_a","item","push","children","isArray","arrayToAntdTree","arr","titleAttr","findNodesByParentId","filter","map","title","key","properties","roots","forEach","root","Recursion","node","isLeaf","arrayToAntdTreeSelect","value","getAncestor","curNode","find","getDescendants","completionIncompleteFlatArr","treeFlatNodes","incompleteTreeFlatNodes","_this","set","Set","tops","tArr","filterTreeByFlatData","kw","filterAttr","arrayToAntdTreeConfig","filterTree","treeNodes","findNodeByKey","val","findLoop","_b","findParentNodeByKey","parentNode","_parentNode","_nodes","_node","transformTreeData","childrenAttr","onCallback","getLeafNodes","nodes","getLeafNodesByIndex","indexAttr","leafAttr","getLeafNodeByFlatData","parentIds","includes","getLeafNodeByFlatDataToIndex","getTreeLevel","flat","leafNodes","levels","_loop_1","level","pid","Math","max","getTreeLevelByIndex","_loop_2","getTreeLevelToFlat","flatArr","_loop_3","getTreeLevelByIndexToFlat","_loop_4","getNodeLevel","currentLevel","treeLevel","excludeAntdTreeNodes","excludeKeys","_excludeKeys","excludeKey","childrenKeys","omitArr","excludeAntdSelectTreeNodes"],"mappings":"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"}