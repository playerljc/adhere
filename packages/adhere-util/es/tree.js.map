{"version":3,"file":"tree.js","sources":["tree.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar TreeUtil = {\r\n    /**\r\n     * treeToArray\r\n     * @description tree数据转换成Array\r\n     * @param treeData\r\n     * @param config\r\n     */\r\n    treeToArray: function (treeData, config) {\r\n        // key: string;\r\n        // title: string;\r\n        // isLeaf: boolean;\r\n        // children?: IAntdTreeNode[];\r\n        // properties?: any;\r\n        var parentIdAttr = config.parentIdAttr, rootParentId = config.rootParentId;\r\n        var result = [];\r\n        function loop(context, data, parentId) {\r\n            var _a;\r\n            for (var i = 0; i < data.length; i++) {\r\n                var item = data[i];\r\n                result.push(__assign(__assign({}, item), (_a = {}, _a[parentIdAttr] = parentId, _a)));\r\n                if (item.children && Array.isArray(item.children) && item.children.length) {\r\n                    loop(context, item.children, item.key);\r\n                }\r\n            }\r\n        }\r\n        loop(result, treeData, rootParentId);\r\n        return result;\r\n    },\r\n    /**\r\n     * arrayToAntdTree - array转换成Tree\r\n     * @param arr\r\n     * @param config\r\n     */\r\n    arrayToAntdTree: function (arr, config) {\r\n        var \r\n        // 主键属性\r\n        keyAttr = config.keyAttr, \r\n        // title属性\r\n        titleAttr = config.titleAttr, \r\n        // parentId属性\r\n        parentIdAttr = config.parentIdAttr, \r\n        // root的parentId的值\r\n        rootParentId = config.rootParentId;\r\n        /**\r\n         * findNodesByParentId\r\n         * @param arr\r\n         * @param parentId\r\n         * @return {*}\r\n         */\r\n        function findNodesByParentId(arr, parentId) {\r\n            return arr\r\n                .filter(function (item) { return item[parentIdAttr] == parentId; })\r\n                .map(function (item) { return (__assign(__assign({}, item), { title: item[titleAttr], key: item[keyAttr], isLeaf: true, children: [], properties: __assign({}, item) })); });\r\n        }\r\n        /**\r\n         * Recursion\r\n         * @constructor\r\n         */\r\n        function Recursion(node) {\r\n            node.children = findNodesByParentId(arr, node.properties[keyAttr]);\r\n            node.isLeaf = !node.children.length;\r\n            if (node.isLeaf) {\r\n                delete node.children;\r\n            }\r\n            (node.children || []).forEach(function (node) {\r\n                Recursion(node);\r\n            });\r\n        }\r\n        var roots = findNodesByParentId(arr, rootParentId);\r\n        roots.forEach(function (root) {\r\n            Recursion(root);\r\n        });\r\n        return roots;\r\n    },\r\n    /**\r\n     * arrayToAntdTreeSelect - array转换成TreeSelect\r\n     * @param arr\r\n     * @param config\r\n     */\r\n    arrayToAntdTreeSelect: function (arr, config) {\r\n        var keyAttr = config.keyAttr, titleAttr = config.titleAttr, rootParentId = config.rootParentId, parentIdAttr = config.parentIdAttr;\r\n        /**\r\n         * findNodesByParentId\r\n         * @param arr\r\n         * @param parentId\r\n         * @return {*}\r\n         */\r\n        function findNodesByParentId(arr, parentId) {\r\n            return arr\r\n                .filter(function (item) { return item[parentIdAttr] == parentId; })\r\n                .map(function (item) { return (__assign(__assign({}, item), { key: item[keyAttr], title: item[titleAttr], value: item[keyAttr], isLeaf: true, children: [], properties: __assign({}, item) })); });\r\n        }\r\n        /**\r\n         * Recursion\r\n         * @constructor\r\n         */\r\n        function Recursion(node) {\r\n            node.children = findNodesByParentId(arr, node.properties[keyAttr]);\r\n            node.isLeaf = !node.children.length;\r\n            if (node.isLeaf) {\r\n                delete node.children;\r\n            }\r\n            (node.children || []).forEach(function (node) {\r\n                Recursion(node);\r\n            });\r\n        }\r\n        var roots = findNodesByParentId(arr, rootParentId);\r\n        roots.forEach(function (root) {\r\n            Recursion(root);\r\n        });\r\n        return roots;\r\n    },\r\n    /**\r\n     * getAncestor - 获取祖先\r\n     * @param data\r\n     * @param node\r\n     * @param config\r\n     */\r\n    getAncestor: function (data, node, config) {\r\n        var result = [];\r\n        var curNode = node;\r\n        while (curNode && curNode[config.parentIdAttr] != config.rootParentId) {\r\n            var item = data.find(function (t) { return t[config.keyAttr] === curNode[config.parentIdAttr]; });\r\n            if (item) {\r\n                result.push(item);\r\n            }\r\n            curNode = item;\r\n        }\r\n        return result;\r\n    },\r\n    /**\r\n     * getDescendants\r\n     * @description - 获取子孙\r\n     */\r\n    getDescendants: function (data, node, config) {\r\n        function loop(n) {\r\n            var children = data.filter(function (t) { return t[config.parentIdAttr] === n[config.keyAttr]; });\r\n            children.forEach(function (t) {\r\n                result.push(t);\r\n                loop(t);\r\n            });\r\n        }\r\n        var result = [];\r\n        loop(node);\r\n        return result;\r\n    },\r\n    /**\r\n     * completionIncompleteFlatArr\r\n     * @description 补残缺的FlatArr\r\n     */\r\n    completionIncompleteFlatArr: function (treeFlatNodes, incompleteTreeFlatNodes, config) {\r\n        var _this = this;\r\n        var set = new Set();\r\n        incompleteTreeFlatNodes.forEach(function (t) {\r\n            var tops = _this.getAncestor(treeFlatNodes, t, config);\r\n            var tArr = __spreadArrays((tops || [])).map(function (item) { return item[config.keyAttr]; });\r\n            set = new Set(__spreadArrays(Array.from(set), tArr));\r\n        });\r\n        set = new Set(__spreadArrays(Array.from(set), incompleteTreeFlatNodes.map(function (t) { return t[config.keyAttr]; })));\r\n        return this.arrayToAntdTree(__spreadArrays(Array.from(set)).map(function (t) { return treeFlatNodes.find(function (item) { return item[config.keyAttr] === t; }); }), config);\r\n    },\r\n    /**\r\n     * filterTreeByFlatData\r\n     * @description 本地过滤tree\r\n     * @param treeFlatNodes\r\n     * @param kw\r\n     * @param config\r\n     */\r\n    filterTreeByFlatData: function (treeFlatNodes, kw, config) {\r\n        var filterAttr = config.filterAttr, arrayToAntdTreeConfig = __rest(config, [\"filterAttr\"]);\r\n        if (kw) {\r\n            var arr = treeFlatNodes.filter(function (node) {\r\n                return node[config.filterAttr].indexOf(kw) !== -1;\r\n            });\r\n            return this.completionIncompleteFlatArr(treeFlatNodes, arr, config);\r\n        }\r\n        else {\r\n            return this.arrayToAntdTree(treeFlatNodes, arrayToAntdTreeConfig);\r\n        }\r\n    },\r\n    /**\r\n     * filterTree\r\n     * @description\r\n     * @param treeNodes\r\n     * @param kw\r\n     * @param config\r\n     */\r\n    filterTree: function (treeNodes, kw, config) {\r\n        var filterAttr = config.filterAttr, arrayToAntdTreeConfig = __rest(config, [\"filterAttr\"]);\r\n        var treeFlatNodes = this.treeToArray(treeNodes, {\r\n            parentIdAttr: config.parentIdAttr,\r\n            rootParentId: config.rootParentId,\r\n        });\r\n        if (kw) {\r\n            var arr = treeFlatNodes.filter(function (node) {\r\n                return node[config.filterAttr].indexOf(kw) !== -1;\r\n            });\r\n            return this.completionIncompleteFlatArr(treeFlatNodes, arr, config);\r\n        }\r\n        else {\r\n            return this.arrayToAntdTree(treeFlatNodes, arrayToAntdTreeConfig);\r\n        }\r\n    },\r\n    /**\r\n     * findNodeByKey\r\n     * @description - 根据keyAttr查找结点\r\n     * @param treeData\r\n     * @param val\r\n     * @param config\r\n     */\r\n    findNodeByKey: function (treeData, val, config) {\r\n        function findLoop(data) {\r\n            var _a, _b;\r\n            var result = null;\r\n            for (var i = 0; i < data.length; i++) {\r\n                if (data[i][config.keyAttr] === val) {\r\n                    result = data[i];\r\n                    break;\r\n                }\r\n                else {\r\n                    if ('children' in data[i] &&\r\n                        Array.isArray(data[i].children) && ((_b = (_a = data[i]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                        result = findLoop(data[i].children);\r\n                        if (result)\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return findLoop(treeData);\r\n    },\r\n    /**\r\n     * transformTreeData\r\n     * @description - 转换一个treeData为antd的TreeData\r\n     * @param treeData\r\n     * @param childrenAttr\r\n     * @param onCallback\r\n     * @return IAntdTreeNode[]\r\n     */\r\n    transformTreeData: function (treeData, childrenAttr, onCallback) {\r\n        function loop(children) {\r\n            var result = [];\r\n            for (var i = 0; i < children.length; i++) {\r\n                var node = children[i];\r\n                node[childrenAttr || 'children'] = loop(node[childrenAttr || 'children']);\r\n                result.push(onCallback(node));\r\n            }\r\n            return result;\r\n        }\r\n        return loop(treeData);\r\n    },\r\n    /**\r\n     * getLeafNodes\r\n     * @description 获取叶子节点\r\n     */\r\n    getLeafNodes: function (nodes, childrenAttr) {\r\n        if (nodes === void 0) { nodes = []; }\r\n        if (childrenAttr === void 0) { childrenAttr = 'children'; }\r\n        function loop(treeNodes, childrenAttr) {\r\n            var result = [];\r\n            for (var i = 0; i < treeNodes.length; i++) {\r\n                var node = treeNodes[i];\r\n                if (childrenAttr in node && Array.isArray(node[childrenAttr])) {\r\n                    // 有孩子\r\n                    result = __spreadArrays(result, loop(node[childrenAttr], childrenAttr));\r\n                }\r\n                else {\r\n                    // 没有孩子就是叶子节点\r\n                    result.push(node);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return loop(nodes || [], childrenAttr || 'children');\r\n    },\r\n    /**\r\n     * getLeafNodesByIndex\r\n     * @description 通过索引获取叶子节点的集合\r\n     */\r\n    getLeafNodesByIndex: function (nodes, childrenAttr, indexAttr) {\r\n        if (nodes === void 0) { nodes = []; }\r\n        if (childrenAttr === void 0) { childrenAttr = 'children'; }\r\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\r\n        function loop(treeNodes, childrenAttr, leafAttr) {\r\n            var result = [];\r\n            for (var i = 0; i < treeNodes.length; i++) {\r\n                var node = treeNodes[i];\r\n                if (leafAttr in node && typeof node[leafAttr] === 'boolean' && node[leafAttr]) {\r\n                    result.push(node);\r\n                }\r\n                if (childrenAttr in node && Array.isArray(node[childrenAttr])) {\r\n                    result = __spreadArrays(result, loop(node[childrenAttr], childrenAttr, leafAttr));\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return loop(nodes || [], childrenAttr || 'children', indexAttr || 'isLeaf');\r\n    },\r\n    /**\r\n     * getLeafNodeByFlatData\r\n     * @description 获取叶子节点通过拉平的数据\r\n     * @param arr\r\n     * @param config\r\n     */\r\n    getLeafNodeByFlatData: function (arr, config) {\r\n        var parentIdAttr = config.parentIdAttr, keyAttr = config.keyAttr;\r\n        // 获取所有的parentId\r\n        var parentIds = arr\r\n            .filter(function (t) { return parentIdAttr in t && t[parentIdAttr]; })\r\n            .map(function (t) { return t[parentIdAttr]; });\r\n        // 1,2,3 parentIds\r\n        // 1,2,3,4,5 arr\r\n        return arr.filter(function (t) { return !parentIds.includes(t[keyAttr]); });\r\n    },\r\n    /**\r\n     * getLeafNodeByFlatDataToIndex\r\n     * @description 获取叶子节点通过索引和拉平的数据\r\n     * @param arr\r\n     * @param indexAttr\r\n     */\r\n    getLeafNodeByFlatDataToIndex: function (arr, indexAttr) {\r\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\r\n        return arr.filter(function (t) { return typeof t[indexAttr || 'isLeaf'] === 'boolean' && t[indexAttr]; });\r\n    },\r\n    /**\r\n     * getTreeLevel\r\n     * @description 获取树的层级\r\n     */\r\n    getTreeLevel: function (nodes) {\r\n        var _a;\r\n        if (nodes === void 0) { nodes = []; }\r\n        var flat = this.treeToArray(nodes, {\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n        var leafNodes = this.getLeafNodeByFlatData(flat, {\r\n            keyAttr: 'key',\r\n            titleAttr: 'key',\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n        var levels = [];\r\n        var _loop_1 = function (i) {\r\n            var leafNode = leafNodes[i];\r\n            var level = 1;\r\n            var pid = leafNode.pid;\r\n            while (pid !== -1) {\r\n                pid = (_a = flat.find(function (node) { return node.key === pid; })) === null || _a === void 0 ? void 0 : _a.pid;\r\n                level++;\r\n            }\r\n            levels.push(level);\r\n        };\r\n        for (var i = 0; i < leafNodes.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return Math.max.apply(Math, levels);\r\n    },\r\n    /**\r\n     * getTreeLevelByIndex\r\n     * @description 获取树的层级通过索引\r\n     */\r\n    getTreeLevelByIndex: function (nodes, indexAttr) {\r\n        var _a;\r\n        if (nodes === void 0) { nodes = []; }\r\n        if (indexAttr === void 0) { indexAttr = 'isLeaf'; }\r\n        var flat = this.treeToArray(nodes, {\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n        var leafNodes = this.getLeafNodeByFlatDataToIndex(flat, indexAttr);\r\n        var levels = [];\r\n        var _loop_2 = function (i) {\r\n            var leafNode = leafNodes[i];\r\n            var level = 1;\r\n            var pid = leafNode.pid;\r\n            while (pid !== -1) {\r\n                pid = (_a = flat.find(function (node) { return node.key === pid; })) === null || _a === void 0 ? void 0 : _a.pid;\r\n                level++;\r\n            }\r\n            levels.push(level);\r\n        };\r\n        for (var i = 0; i < leafNodes.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        return Math.max.apply(Math, levels);\r\n    },\r\n    /**\r\n     * getTreeLevelToFlat\r\n     * @description 获取树的层级通过拉平的数据\r\n     */\r\n    getTreeLevelToFlat: function (flatArr, config) {\r\n        var _a;\r\n        var leafNodes = this.getLeafNodeByFlatData(flatArr, config);\r\n        var levels = [];\r\n        var _loop_3 = function (i) {\r\n            var leafNode = leafNodes[i];\r\n            var level = 1;\r\n            var pid = leafNode.pid;\r\n            while (pid !== -1) {\r\n                pid = (_a = flatArr.find(function (node) { return node[config.keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a.pid;\r\n                level++;\r\n            }\r\n            levels.push(level);\r\n        };\r\n        for (var i = 0; i < leafNodes.length; i++) {\r\n            _loop_3(i);\r\n        }\r\n        return Math.max.apply(Math, levels);\r\n    },\r\n    /**\r\n     * getTreeLevelByIndexToFlat\r\n     * @description 获取树的层级通过拉平的数据和索引\r\n     */\r\n    getTreeLevelByIndexToFlat: function (flatArr, config, indexAttr) {\r\n        var _a;\r\n        var leafNodes = this.getLeafNodeByFlatDataToIndex(flatArr, indexAttr);\r\n        var levels = [];\r\n        var _loop_4 = function (i) {\r\n            var leafNode = leafNodes[i];\r\n            var level = 1;\r\n            var pid = leafNode.pid;\r\n            while (pid !== -1) {\r\n                pid = (_a = flatArr.find(function (node) { return node[config.keyAttr] === pid; })) === null || _a === void 0 ? void 0 : _a.pid;\r\n                level++;\r\n            }\r\n            levels.push(level);\r\n        };\r\n        for (var i = 0; i < leafNodes.length; i++) {\r\n            _loop_4(i);\r\n        }\r\n        return Math.max.apply(Math, levels);\r\n    },\r\n    /**\r\n     * excludeAntdTreeNodes\r\n     * @description 排除指定节点后形成一棵树\r\n     * @param nodes\r\n     * @param excludeKeys\r\n     */\r\n    excludeAntdTreeNodes: function (nodes, excludeKeys) {\r\n        var flatArr = this.treeToArray(nodes, {\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n        var _excludeKeys = [];\r\n        for (var i = 0; i < excludeKeys.length; i++) {\r\n            var result = loop(excludeKeys[i]);\r\n            _excludeKeys = __spreadArrays(_excludeKeys, result);\r\n        }\r\n        _excludeKeys = __spreadArrays(_excludeKeys, excludeKeys);\r\n        var omitArr = flatArr.filter(function (node) { return !_excludeKeys.includes(node.key); });\r\n        function loop(excludeKey) {\r\n            var childrenKeys = flatArr.filter(function (t) { return t.pid === excludeKey; }).map(function (t) { return t.key; });\r\n            var excludeKeys = childrenKeys;\r\n            for (var i = 0; i < childrenKeys.length; i++) {\r\n                var result = loop(childrenKeys[i]);\r\n                excludeKeys = __spreadArrays(excludeKeys, result);\r\n            }\r\n            return excludeKeys;\r\n        }\r\n        return this.completionIncompleteFlatArr(flatArr, omitArr, {\r\n            keyAttr: 'key',\r\n            titleAttr: 'title',\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n    },\r\n    /**\r\n     * excludeAntdSelectTreeNodes\r\n     * @description 排除指定节点后形成一棵树\r\n     * @param nodes\r\n     * @param excludeKeys\r\n     */\r\n    excludeAntdSelectTreeNodes: function (nodes, excludeKeys) {\r\n        var flatArr = this.treeToArray(nodes, {\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n        var _excludeKeys = [];\r\n        for (var i = 0; i < excludeKeys.length; i++) {\r\n            var result = loop(excludeKeys[i]);\r\n            _excludeKeys = __spreadArrays(_excludeKeys, result);\r\n        }\r\n        _excludeKeys = __spreadArrays(_excludeKeys, excludeKeys);\r\n        var omitArr = flatArr.filter(function (node) { return !_excludeKeys.includes(node.key); });\r\n        function loop(excludeKey) {\r\n            var childrenKeys = flatArr.filter(function (t) { return t.pid === excludeKey; }).map(function (t) { return t.key; });\r\n            var excludeKeys = childrenKeys;\r\n            for (var i = 0; i < childrenKeys.length; i++) {\r\n                var result = loop(childrenKeys[i]);\r\n                excludeKeys = __spreadArrays(excludeKeys, result);\r\n            }\r\n            return excludeKeys;\r\n        }\r\n        return this.completionIncompleteFlatArr(flatArr, omitArr, {\r\n            keyAttr: 'key',\r\n            titleAttr: 'title',\r\n            parentIdAttr: 'pid',\r\n            rootParentId: -1,\r\n        });\r\n    },\r\n};\r\nexport default TreeUtil;\r\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArrays","il","r","Array","k","a","j","jl","TreeUtil","treeToArray","treeData","config","parentIdAttr","rootParentId","result","loop","context","data","parentId","_a","item","push","children","isArray","key","arrayToAntdTree","arr","keyAttr","titleAttr","findNodesByParentId","filter","map","title","isLeaf","properties","roots","forEach","root","Recursion","node","arrayToAntdTreeSelect","value","getAncestor","curNode","find","getDescendants","completionIncompleteFlatArr","treeFlatNodes","incompleteTreeFlatNodes","_this","set","Set","tops","tArr","from","filterTreeByFlatData","kw","filterAttr","arrayToAntdTreeConfig","filterTree","treeNodes","findNodeByKey","val","findLoop","_b","transformTreeData","childrenAttr","onCallback","getLeafNodes","nodes","getLeafNodesByIndex","indexAttr","leafAttr","getLeafNodeByFlatData","parentIds","includes","getLeafNodeByFlatDataToIndex","getTreeLevel","flat","leafNodes","levels","_loop_1","level","pid","Math","max","getTreeLevelByIndex","_loop_2","getTreeLevelToFlat","flatArr","_loop_3","getTreeLevelByIndexToFlat","_loop_4","excludeAntdTreeNodes","excludeKeys","_excludeKeys","excludeKey","childrenKeys","omitArr","excludeAntdSelectTreeNodes"],"mappings":"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"}