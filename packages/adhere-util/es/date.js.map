{"version":3,"file":"date.js","sources":["date.js"],"sourcesContent":["var DateUtil = {\n    /**\n     * toTimestampByTimeZone\n     * @description 根据format字符串和时区获取时间错\n     * @param str format的str YYYY-MM-DD HH:mm:ss\n     * @param timezone utc的字符串 11 ~ 0 ~ -12\n     * @return number timestamp 时间错\n     */\n    toTimestampByFormatStrAndTimeZone: function (str, timezone) {\n        var datetime = Date.parse(str);\n        return Math.ceil(datetime / 1000) - (parseInt(timezone, 10) - DateUtil.getTimezone()) * 3600;\n    },\n    /**\n     * toStrByTimestampAndTimeZone\n     * @description 通过时间错和时区获取format时间字符串\n     * @param _timestamp 时间错的字符串\n     * @param timezone utc的字符串 11 ~ 0 ~ -12\n     * @return YYYY-MM-DD HH:mm:ss\n     */\n    toStrByTimestampAndTimeZone: function (_timestamp, timezone) {\n        var timestamp = (parseInt(_timestamp, 10) + (parseInt(timezone, 10) - DateUtil.getTimezone()) * 3600) *\n            1000, dt = new Date(timestamp);\n        dt.setMinutes(dt.getMinutes() - dt.getTimezoneOffset()); // 修正时区偏移\n        return dt.toISOString().slice(0, -5).replace(/[T]/g, ' ');\n    },\n    /**\n     * getCurrentTimestamp\n     * @description 获取当前的时间错\n     * @return number\n     */\n    getCurrentTimestamp: function () {\n        return Math.ceil(new Date().getTime() / 1000);\n    },\n    /**\n     * getTimezone\n     * @description 获取当前Timezone(时区) 11 ~ 0 ~ -12\n     * @return number\n     */\n    getTimezone: function () {\n        return -Math.floor(\n        //获取本地计算机上的时间与世界协调时间（UTC）之间的分钟差\n        new Date().getTimezoneOffset() / 60);\n    },\n    /**\n     * formatMilliseconds\n     * @description format毫秒数\n     * @param {number} milliseconds 毫秒数\n     * @return {\n     *   days: number;\n     *   hours: number;\n     *   minutes: number;\n     *   remainingSeconds: number;\n     * }\n     */\n    formatMilliseconds: function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var days = Math.floor(seconds / 86400);\n        var hours = Math.floor((seconds % 86400) / 3600);\n        var minutes = Math.floor(((seconds % 86400) % 3600) / 60);\n        var remainingSeconds = ((seconds % 86400) % 3600) % 60;\n        return {\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            remainingSeconds: remainingSeconds,\n        };\n        // return `${days} 天 ${hours} 小时 ${minutes} 分钟 ${remainingSeconds} 秒`;\n    },\n};\nexport default DateUtil;\n"],"names":["DateUtil","toTimestampByFormatStrAndTimeZone","str","timezone","datetime","Date","parse","Math","ceil","parseInt","getTimezone","toStrByTimestampAndTimeZone","_timestamp","timestamp","dt","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","replace","getCurrentTimestamp","getTime","floor","formatMilliseconds","milliseconds","seconds","days","hours","minutes","remainingSeconds"],"mappings":"AAAA,IAAIA,SAAW,CAQXC,kCAAmC,SAAUC,EAAKC,GAC1CC,EAAWC,KAAKC,MAAMJ,CAAG,EAC7B,OAAOK,KAAKC,KAAKJ,EAAW,GAAI,EAAwD,MAAnDK,SAASN,EAAU,EAAE,EAAIH,SAASU,YAAY,EACvF,EAQAC,4BAA6B,SAAUC,EAAYT,GAC3CU,EACA,KADaJ,SAASG,EAAY,EAAE,EAAwD,MAAnDH,SAASN,EAAU,EAAE,EAAIH,SAASU,YAAY,IACjFI,EAAK,IAAIT,KAAKQ,CAAS,EAEjC,OADAC,EAAGC,WAAWD,EAAGE,WAAW,EAAIF,EAAGG,kBAAkB,CAAC,EAC/CH,EAAGI,YAAY,EAAEC,MAAM,EAAG,CAAC,CAAC,EAAEC,QAAQ,OAAQ,GAAG,CAC5D,EAMAC,oBAAqB,WACjB,OAAOd,KAAKC,MAAK,IAAIH,MAAOiB,QAAQ,EAAI,GAAI,CAChD,EAMAZ,YAAa,WACT,MAAO,CAACH,KAAKgB,OAEb,IAAIlB,MAAOY,kBAAkB,EAAI,EAAE,CACvC,EAYAO,mBAAoB,SAAUC,GACtBC,EAAUnB,KAAKgB,MAAME,EAAe,GAAI,EAK5C,MAAO,CACHE,KALOpB,KAAKgB,MAAMG,EAAU,KAAK,EAMjCE,MALQrB,KAAKgB,MAAOG,EAAU,MAAS,IAAI,EAM3CG,QALUtB,KAAKgB,MAAQG,EAAU,MAAS,KAAQ,EAAE,EAMpDI,iBALqBJ,EAAU,MAAS,KAAQ,EAMpD,CAEJ,CACJ,iBACe1B"}