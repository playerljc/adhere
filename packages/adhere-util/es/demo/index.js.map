{"version":3,"file":"index.js","sources":["demo/index.js"],"sourcesContent":["import TreeUtil from '../tree';\r\nvar antdTreeNodes = [\r\n    {\r\n        key: '1',\r\n        title: '1',\r\n        value: '1',\r\n        isLeaf: false,\r\n        properties: {\r\n            a: 1,\r\n        },\r\n        children: [\r\n            {\r\n                key: '1-1',\r\n                title: '1-1',\r\n                value: '1-1',\r\n                isLeaf: false,\r\n                properties: {\r\n                    a: 1,\r\n                },\r\n                children: [\r\n                    {\r\n                        key: '1-1-1',\r\n                        title: '1-1-1',\r\n                        value: '1-1-1',\r\n                        isLeaf: true,\r\n                        properties: {\r\n                            a: 1,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                key: '1-2',\r\n                title: '1-2',\r\n                value: '1-2',\r\n                isLeaf: true,\r\n                properties: {\r\n                    a: 1,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n];\r\nvar flatArr = TreeUtil.treeToArray(antdTreeNodes, {\r\n    parentIdAttr: 'pid',\r\n    rootParentId: -1,\r\n});\r\nvar treeNodes = TreeUtil.arrayToAntdTree(flatArr, {\r\n    keyAttr: 'key',\r\n    titleAttr: 'title',\r\n    parentIdAttr: 'pid',\r\n    rootParentId: -1,\r\n});\r\nvar filter1Nodes = TreeUtil.filterTreeByFlatData(flatArr, '2', {\r\n    keyAttr: 'key',\r\n    titleAttr: 'title',\r\n    parentIdAttr: 'pid',\r\n    rootParentId: -1,\r\n    filterAttr: 'value',\r\n});\r\nvar filter2Nodes = TreeUtil.filterTree(antdTreeNodes, '2', {\r\n    keyAttr: 'key',\r\n    titleAttr: 'title',\r\n    parentIdAttr: 'pid',\r\n    rootParentId: -1,\r\n    filterAttr: 'value',\r\n});\r\nvar findNode = TreeUtil.findNodeByKey(antdTreeNodes, '1', {\r\n    keyAttr: 'value',\r\n});\r\nvar leafNodes1 = TreeUtil.getLeafNodeByFlatDataToIndex(flatArr);\r\nvar level = TreeUtil.getTreeLevelByIndexToFlat(flatArr, {\r\n    keyAttr: 'key',\r\n    titleAttr: 'title',\r\n    parentIdAttr: 'pid',\r\n    rootParentId: -1,\r\n}, 'isLeaf');\r\nvar excludeNodes = TreeUtil.excludeAntdTreeNodes(antdTreeNodes, ['1-1']);\r\nconsole.log(excludeNodes);\r\n"],"names":["TreeUtil","antdTreeNodes","key","title","value","isLeaf","properties","a","children","flatArr","treeToArray","parentIdAttr","rootParentId","treeNodes","arrayToAntdTree","keyAttr","titleAttr","filter1Nodes","filterTreeByFlatData","filterAttr","filter2Nodes","filterTree","findNode","findNodeByKey","leafNodes1","getLeafNodeByFlatDataToIndex","level","getTreeLevelByIndexToFlat","excludeNodes","excludeAntdTreeNodes","console","log"],"mappings":"OAAOA,aAAc,UACrB,IAAIC,cAAgB,CAChB,CACIC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,OAAQ,CAAA,EACRC,WAAY,CACRC,EAAG,CACP,EACAC,SAAU,CACN,CACIN,IAAK,MACLC,MAAO,MACPC,MAAO,MACPC,OAAQ,CAAA,EACRC,WAAY,CACRC,EAAG,CACP,EACAC,SAAU,CACN,CACIN,IAAK,QACLC,MAAO,QACPC,MAAO,QACPC,OAAQ,CAAA,EACRC,WAAY,CACRC,EAAG,CACP,CACJ,EAER,EACA,CACIL,IAAK,MACLC,MAAO,MACPC,MAAO,MACPC,OAAQ,CAAA,EACRC,WAAY,CACRC,EAAG,CACP,CACJ,EAER,GAEAE,QAAUT,SAASU,YAAYT,cAAe,CAC9CU,aAAc,MACdC,aAAc,CAAC,CACnB,CAAC,EACGC,UAAYb,SAASc,gBAAgBL,QAAS,CAC9CM,QAAS,MACTC,UAAW,QACXL,aAAc,MACdC,aAAc,CAAC,CACnB,CAAC,EACGK,aAAejB,SAASkB,qBAAqBT,QAAS,IAAK,CAC3DM,QAAS,MACTC,UAAW,QACXL,aAAc,MACdC,aAAc,CAAC,EACfO,WAAY,OAChB,CAAC,EACGC,aAAepB,SAASqB,WAAWpB,cAAe,IAAK,CACvDc,QAAS,MACTC,UAAW,QACXL,aAAc,MACdC,aAAc,CAAC,EACfO,WAAY,OAChB,CAAC,EACGG,SAAWtB,SAASuB,cAActB,cAAe,IAAK,CACtDc,QAAS,OACb,CAAC,EACGS,WAAaxB,SAASyB,6BAA6BhB,OAAO,EAC1DiB,MAAQ1B,SAAS2B,0BAA0BlB,QAAS,CACpDM,QAAS,MACTC,UAAW,QACXL,aAAc,MACdC,aAAc,CAAC,CACnB,EAAG,QAAQ,EACPgB,aAAe5B,SAAS6B,qBAAqB5B,cAAe,CAAC,MAAM,EACvE6B,QAAQC,IAAIH,YAAY"}