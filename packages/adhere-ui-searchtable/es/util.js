function findRecord(r,t,c){return void 0===t&&(t="id"),function r(e){for(var n,i=0;i<e.length;i++){if(e[i][t]===c){n=e[i];break}var a=e[i];if("children"in a&&Array.isArray(a.children)&&a.children.length&&(n=r(a.children)))break}return n}(r)}function findBrother(r,t,c){return void 0===t&&(t="id"),function r(e){for(var n=[],i=0;i<e.length;i++){if(e[i][t]===c){n=e;break}var a=e[i];if("children"in a&&Array.isArray(a.children)&&a.children.length&&(n=r(a.children))&&n.length)break}return n}(r)}function flatDataSource(r){var a=[];return function r(e){for(var n=0;n<e.length;n++){var i=e[n];a.push(i),"children"in i&&Array.isArray(i.children)&&i.children&&r(i.children)}}(r),a}function swap(r,e){var n=JSON.parse(JSON.stringify(r));Object.assign(r,e),Object.assign(e,n)}function isSameLevel(r){var e=r.dataSource,n=r.rowKey,i=void 0===n?"id":n,n=r.sourceId,a=r.targetId;return findBrother(e,i,n).some(function(r){return r[i]===a})}var createTreeDataChildren=function(r,e){return[r.props.children[0],e]},createChildren=function(r,e){var n;return((null==(n=null==r?void 0:r.props)?void 0:n.className)||"").split(/\s+/gim).includes("ant-table-cell-with-append")?createTreeDataChildren(r,e):[e]};export{findRecord,findBrother,flatDataSource,swap,isSameLevel,createTreeDataChildren,createChildren};
//# sourceMappingURL=Util.js.map
