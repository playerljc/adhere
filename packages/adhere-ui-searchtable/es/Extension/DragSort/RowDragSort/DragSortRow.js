var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(r){for(var o,e=1,a=arguments.length;e<a;e++)for(var n in o=arguments[e])Object.prototype.hasOwnProperty.call(o,n)&&(r[n]=o[n]);return r}).apply(this,arguments)};import classNames from"classnames";import React,{useContext,useRef}from"react";import{useDrag,useDrop}from"react-dnd";import{SearchTableContext,selectorPrefix}from"../../../SearchTable";import{isSameLevel}from"../../../util";var type="DraggableBodyRow",DragSortRow=function(r){var o,e=r.rowIndex,a=r.rowConfig,n=r.record,t=useContext(SearchTableContext),r={type:type,dropOverDownwardClassName:"".concat(selectorPrefix,"-row-drag-sort-drop-over-downward"),dropOverUpwardClasName:"".concat(selectorPrefix,"-row-drag-sort-drop-over-upward"),dragConfig:function(){return{type:s.type,item:{index:e,record:n},collect:function(r){return{isDragging:r.isDragging()}}}},dropConfig:function(){return{accept:s.type,collect:function(r){var o=(null!=(o=r.getItem())?o:{}).index;return o===e?{}:{isOver:r.isOver(),dropClassName:o<e?s.dropOverDownwardClassName:s.dropOverUpwardClasName}},drop:function(r){var o=null==(o=null==t?void 0:t.context)?void 0:o.getData(),e=null==(e=null==t?void 0:t.context)?void 0:e.getRowKey();isSameLevel({dataSource:o,rowKey:e,sourceId:n[e],targetId:r.record[e]})&&null!=(o=null==t?void 0:t.context)&&o.moveRow(r.record,n)}}}},s=__assign(__assign({},r),null!=(o=null==a?void 0:a.$rowDragSort)?o:{}),i=(null!=(o=null==a?void 0:a.$rowDragSort)&&o.dropConfig?s.dropConfig=Object.assign(r.dropConfig(),null!=(o=a.$rowDragSort.dropConfig)?o:{}):s.dropConfig=r.dropConfig(),null!=(o=null==a?void 0:a.$rowDragSort)&&o.dragConfig?s.dragConfig=Object.assign(r.dragConfig(),null!=(o=a.$rowDragSort.dragConfig)?o:{}):s.dragConfig=r.dragConfig(),useRef(null));try{var l=useDrag(s.dragConfig)[1],g=useDrop(s.dropConfig),d=g[0].isOver,c=g[0].dropClassName;(0,g[1])(l(i))}catch(r){console.log(r)}return function(r){var o={cursor:"canDrag"in s.dragConfig&&!s.dragConfig.canDrag()?"no-drop":"move"};return React.cloneElement(r,__assign(__assign({},r.props),{ref:i,style:__assign(__assign({},o),null!=(o=r.props.style)?o:{}),className:classNames(r.props.className,d?c:"")}))}};export default DragSortRow;
//# sourceMappingURL=DragSortRow.js.map
