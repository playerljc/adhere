import{__assign}from"tslib";import classNames from"classnames";import React,{useContext,useRef}from"react";import{useDrag,useDrop}from"react-dnd";import{SearchTableContext,selectorPrefix}from"../../../SearchTable";var type="DraggableBodyRow",DragSortRow=function(r){var o,e=r.rowIndex,r=r.rowConfig,a=useContext(SearchTableContext),n={type:type,dropOverDownwardClassName:selectorPrefix+"-row-drag-sort-drop-over-downward",dropOverUpwardClasName:selectorPrefix+"-row-drag-sort-drop-over-upward",dragConfig:function(){return{type:s.type,item:{index:e},collect:function(r){return{isDragging:r.isDragging()}}}},dropConfig:function(){return{accept:s.type,collect:function(r){var o=(r.getItem()||{}).index;return o===e?{}:{isOver:r.isOver(),dropClassName:o<e?s.dropOverDownwardClassName:s.dropOverUpwardClasName}},drop:function(r){var o;null!=(o=null==a?void 0:a.context)&&o.moveRow(r.index,e)}}}},s=__assign(__assign({},n),(null==r?void 0:r.$rowDragSort)||{}),t=(null!=(o=null==r?void 0:r.$rowDragSort)&&o.dropConfig?s.dropConfig=Object.assign(n.dropConfig(),r.$rowDragSort.dropConfig||{}):s.dropConfig=n.dropConfig(),null!=(o=null==r?void 0:r.$rowDragSort)&&o.dragConfig?s.dragConfig=Object.assign(n.dragConfig(),r.$rowDragSort.dragConfig||{}):s.dragConfig=n.dragConfig(),useRef(null));try{var g=useDrag(s.dragConfig)[1],i=useDrop(s.dropConfig),d=i[0].isOver,l=i[0].dropClassName;(0,i[1])(g(t))}catch(r){console.log(r)}return function(r){var o={cursor:"canDrag"in s.dragConfig&&!s.dragConfig.canDrag()?"no-drop":"move"};return React.cloneElement(r,__assign(__assign({},r.props),{ref:t,style:__assign(__assign({},o),r.props.style||{}),className:classNames(r.props.className,d?l:"")}))}};export default DragSortRow;
//# sourceMappingURL=DragSortRow.js.map
