{"version":3,"file":"notnull.js","sources":["notnull.js"],"sourcesContent":["import Util from '@baifendian/adhere-util';\r\n/**\r\n * createProxy\r\n * @param target\r\n * @return Object\r\n */\r\nfunction createProxy(target) {\r\n    if (Util.isEmpty(target)) {\r\n        target = {};\r\n    }\r\n    // 只有对象和数组才能进行代理\r\n    if (!Util.isObject(target) && !Util.isArray(target))\r\n        return target;\r\n    // 创建代理\r\n    var proxy = new Proxy(target, {\r\n        get: function (target, p, receiver) {\r\n            var value = target[p];\r\n            if (Util.isEmpty(value)) {\r\n                value = {};\r\n                target[p] = createProxy(value);\r\n            }\r\n            return Reflect.get(target, p, receiver);\r\n        },\r\n        set: function (target, key, value, receiver) {\r\n            if (Util.isEmpty(value)) {\r\n                value = {};\r\n            }\r\n            // 是数组\r\n            if (Util.isArray(target)) {\r\n                // 数组的原始长度\r\n                var srcLength = target.length;\r\n                var result = Reflect.set(target, key, value, receiver);\r\n                // 数组的当前长度\r\n                var targetLength = target.length;\r\n                // 数组是删除\r\n                if (targetLength < srcLength) {\r\n                    // console.log('删除', `key:${key}`, `value:${value}`);\r\n                }\r\n                // 数组是添加\r\n                else if (targetLength > srcLength) {\r\n                    // console.log('添加', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if (Util.isObject(value) || Util.isArray(value)) {\r\n                        value = createProxy(value);\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // 数组修改\r\n                else {\r\n                    // console.log('修改', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if (Util.isObject(value) || Util.isArray(value)) {\r\n                        value = createProxy(value);\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n            }\r\n            // 是对象\r\n            if (Util.isObject(target)) {\r\n                value = createProxy(value);\r\n            }\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n    });\r\n    // 继续进行迭代，迭代target的所有属性，为srcObj的所有属性都进行代理\r\n    for (var p in target) {\r\n        var objItem = target[p];\r\n        if (Util.isObject(objItem) || Util.isArray(objItem)) {\r\n            target[p] = createProxy(objItem);\r\n        }\r\n    }\r\n    return proxy;\r\n}\r\nexport default (function (target) {\r\n    return createProxy(target);\r\n});\r\n"],"names":["Util","createProxy","target","isEmpty","isObject","isArray","p","proxy","Proxy","get","receiver","value","Reflect","set","key","srcLength","length","objItem"],"mappings":"OAAOA,SAAU,0BAMjB,SAASC,YAAYC,GAKjB,GAJIF,KAAKG,QAAQD,CAAM,IACnBA,EAAS,IAGT,CAACF,KAAKI,SAASF,CAAM,GAAK,CAACF,KAAKK,QAAQH,CAAM,EAC9C,OAAOA,EAEX,IAmDSI,EAnDLC,EAAQ,IAAIC,MAAMN,EAAQ,CAC1BO,IAAK,SAAUP,EAAQI,EAAGI,GACtB,IAAIC,EAAQT,EAAOI,GAKnB,OAJIN,KAAKG,QAAQQ,CAAK,IAElBT,EAAOI,GAAKL,YADJ,EACqB,GAE1BW,QAAQH,IAAIP,EAAQI,EAAGI,CAAQ,CAC1C,EACAG,IAAK,SAAUX,EAAQY,EAAKH,EAAOD,GAK/B,IAEQK,EA+BR,OArCIf,KAAKG,QAAQQ,CAAK,IAClBA,EAAQ,IAGRX,KAAKK,QAAQH,CAAM,IAEfa,EAAYb,EAAOc,OACVJ,QAAQC,IAAIX,EAAQY,EAAKH,EAAOD,CAAQ,EAElCR,EAAOc,OAEPD,IAOXf,KAAKI,SAASO,CAAK,GAAKX,KAAKK,QAAQM,CAAK,KAC1CA,EAAQV,YAAYU,CAAK,EAChBC,QAAQC,IAAIX,EAAQY,EAAKH,EAAOD,CAAQ,IAczDV,KAAKI,SAASF,CAAM,IACpBS,EAAQV,YAAYU,CAAK,GAEtBC,QAAQC,IAAIX,EAAQY,EAAKH,EAAOD,CAAQ,CACnD,CACJ,CAAC,EAED,IAASJ,KAAKJ,EAAQ,CAClB,IAAIe,EAAUf,EAAOI,IACjBN,KAAKI,SAASa,CAAO,GAAKjB,KAAKK,QAAQY,CAAO,KAC9Cf,EAAOI,GAAKL,YAAYgB,CAAO,EAEvC,CACA,OAAOV,CACX,gBACe,SAAWL,GACtB,OAAOD,YAAYC,CAAM,CAC5B"}