import DictReactComponent,{set,useDict}from"./react";var target={},handlerTarget={},funParams=new Map,defaultConfig={isUseMemo:!0},config=defaultConfig;function diffParams(e,t){if(e.length!==t.length)return!1;for(var n=!1,r=0;r<e.length;r++)if(e[r]!==t[r]){n=!0;break}return!n}function CreateFunProxy(e,a){return new Proxy(e,{apply:function(e,t,n){var t=t||window,r=null,i=funParams.get(a);return i&&diffParams(i.argArray,n)?r=i.result:(r=e.apply(t,n),funParams.set(a,{argArray:n,result:r})),r}})}function initValue(t,e){var n=Dict.handlers[t],r=null;try{r=n(e)}catch(e){throw new Error("".concat(t," dict does not exist"))}return r instanceof Function&&("isUseMemo"in n?n.isUseMemo&&(r=CreateFunProxy(r,t)):"isUseMemo"in config&&config.isUseMemo&&(r=CreateFunProxy(r,t))),r}var Dict={handlers:new Proxy(handlerTarget,{set:function(e,t,n,r){e=Reflect.set(e,t,n,r);return set(t),e}}),value:new Proxy(target,{get:function(e,t,n){return t in e||(n[t]={value:initValue(t,null),refresh:function(){return delete n[t],this}}),Reflect.get(e,t,n)}}),init:function(e,t){config=t=void 0===t?defaultConfig:t,((e=void 0===e?[]:e)||[]).forEach(function(e){var t;e&&(null!=(t=null==e?void 0:e.initStatic)&&t.call(e),null!=(t=null==e?void 0:e.initRemote))&&t.call(e)})},React:DictReactComponent,useDict:useDict};export default Dict;
//# sourceMappingURL=dict.js.map
