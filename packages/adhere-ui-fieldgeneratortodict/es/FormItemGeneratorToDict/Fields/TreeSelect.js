var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,t){var a={};for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(a[r[n]]=e[r[n]]);return a};import{useMount,useUpdateEffect}from"ahooks";import React,{useState}from"react";import Dict from"@baifendian/adhere-util-dict";import{setItem}from"../ItemFactory";import TreeMultiSelectFormItem from"../TreeMultiSelectFormItem";import TreeSelectFormItem from"../TreeSelectFormItem";import TreeSelectLeafFormItem from"../TreeSelectLeafFormItem";import TreeSelectLeafMultiFormItem from"../TreeSelectLeafMultiFormItem";import{deepDep}from"../util";var TreeSelectFormItemWrap=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeSelectFormItem,__assign({},e,{treeData:t}))},TreeSelectMultiFormItemWrap=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeMultiSelectFormItem,__assign({},e,{treeData:t}))};setItem("Tree","FormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=Dict.value[c].value,r=n instanceof Function?n(t):n;return useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectFormItemWrap,__assign({},e,{dataSource:r}))}}),setItem("Tree","LeafFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=Dict.value[c].value,r=n instanceof Function?n(t):n;return useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectLeafFormItem,__assign({},e,{dataSource:r}))}}),setItem("Tree","MultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=Dict.value[c].value,r=n instanceof Function?n(t):n;return useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectMultiFormItemWrap,__assign({},e,{dataSource:r}))}}),setItem("Tree","LeafMultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=Dict.value[c].value,r=n instanceof Function?n(t):n;return useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectLeafMultiFormItem,__assign({},e,{dataSource:r}))}}),setItem("TreeDynamic","FormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=useState([]),r=n[0],c=n[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectFormItemWrap,__assign({},e,{dataSource:r}))}}),setItem("TreeDynamic","LeafFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=useState([]),r=n[0],c=n[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectLeafFormItem,__assign({},e,{dataSource:r}))}}),setItem("TreeDynamic","MultiFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=useState([]),r=n[0],c=n[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectMultiFormItemWrap,__assign({},e,{dataSource:r}))}}),setItem("TreeDynamic","LeafMultiFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),n=useState([]),r=n[0],c=n[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(r)},[r]),React.createElement(TreeSelectLeafMultiFormItem,__assign({},e,{dataSource:r}))}});
//# sourceMappingURL=TreeSelect.js.map
