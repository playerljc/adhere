var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,t){var a={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(a[n[r]]=e[n[r]]);return a};import{useMount,useUpdateEffect}from"ahooks";import React,{useState}from"react";import Dict from"@baifendian/adhere-util-dict";import{setItem}from"../ItemFactory";import TreeMultiSelectFormItem from"../TreeMultiSelectFormItem";import TreeSelectFormItem from"../TreeSelectFormItem";import TreeSelectLeafFormItem from"../TreeSelectLeafFormItem";import TreeSelectLeafMultiFormItem from"../TreeSelectLeafMultiFormItem";import{useAsyncTreeSelect}from"../hooks";import{deepDep}from"../util";var TreeSelectFormItemWrap=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeSelectFormItem,__assign({},e,{treeData:t}))},TreeSelectMultiFormItemWrap=function(e){var t=e.dataSource,e=__rest(e,["dataSource"]);return React.createElement(TreeMultiSelectFormItem,__assign({},e,{treeData:t}))};setItem("Tree","FormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=Dict.value[c].value,n=r instanceof Function?r(t):r;return useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectFormItemWrap,__assign({},e,{dataSource:n}))}}),setItem("Tree","LeafFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=Dict.value[c].value,n=r instanceof Function?r(t):r;return useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectLeafFormItem,__assign({},e,{dataSource:n}))}}),setItem("Tree","MultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=Dict.value[c].value,n=r instanceof Function?r(t):r;return useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectMultiFormItemWrap,__assign({},e,{dataSource:n}))}}),setItem("Tree","LeafMultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=Dict.value[c].value,n=r instanceof Function?r(t):r;return useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectLeafMultiFormItem,__assign({},e,{dataSource:n}))}}),setItem("TreeDynamic","FormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=useState([]),n=r[0],c=r[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectFormItemWrap,__assign({},e,{dataSource:n}))}}),setItem("TreeDynamic","LeafFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=useState([]),n=r[0],c=r[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectLeafFormItem,__assign({},e,{dataSource:n}))}}),setItem("TreeDynamic","MultiFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=useState([]),n=r[0],c=r[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectMultiFormItemWrap,__assign({},e,{dataSource:n}))}}),setItem("TreeDynamic","LeafMultiFormItem",function(u){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,e=__rest(e,["cascadeParams","onDataSourceChange"]),r=useState([]),n=r[0],c=r[1],o=Dict.value[u].value;return useMount(function(){o.then&&o.then(function(e){c(e)})}),useUpdateEffect(function(){o instanceof Function&&o(t).then(function(e){c(e)})},[deepDep(t)]),useUpdateEffect(function(){null!=a&&a(n)},[n]),React.createElement(TreeSelectLeafMultiFormItem,__assign({},e,{dataSource:n}))}}),setItem("TreeAsync","FormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,r=e.fetchBranch,n=e.defaultId,e=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","defaultId"]),t=useAsyncTreeSelect(c,{cascadeParams:t,onDataSourceChange:a,fetchBranch:r,defaultId:n,value:e.value}),a=t.treeData,r=t.onLoadData;return React.createElement(TreeSelectFormItemWrap,__assign({virtual:!1,loadData:r,dataSource:a},e))}}),setItem("TreeAsync","LeafFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,r=e.fetchBranch,n=e.defaultId,e=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","defaultId"]),t=useAsyncTreeSelect(c,{cascadeParams:t,onDataSourceChange:a,fetchBranch:r,defaultId:n,value:e.value}),a=t.treeData,r=t.onLoadData;return React.createElement(TreeSelectLeafFormItem,__assign({virtual:!1,loadData:r,dataSource:a},e))}}),setItem("TreeAsync","MultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,r=e.fetchBranch,n=e.defaultId,e=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","defaultId"]),t=useAsyncTreeSelect(c,{cascadeParams:t,onDataSourceChange:a,fetchBranch:r,defaultId:n,value:e.value}),a=t.treeData,r=t.onLoadData;return React.createElement(TreeSelectMultiFormItemWrap,__assign({virtual:!1,loadData:r,dataSource:a},e))}}),setItem("TreeAsync","LeafMultiFormItem",function(c){return function(e){var t=e.cascadeParams,a=e.onDataSourceChange,r=e.fetchBranch,n=e.defaultId,e=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","defaultId"]),t=useAsyncTreeSelect(c,{cascadeParams:t,onDataSourceChange:a,fetchBranch:r,defaultId:n,value:e.value}),a=t.treeData,r=t.onLoadData;return React.createElement(TreeSelectLeafMultiFormItem,__assign({virtual:!1,loadData:r,dataSource:a},e))}});
//# sourceMappingURL=TreeSelect.js.map
