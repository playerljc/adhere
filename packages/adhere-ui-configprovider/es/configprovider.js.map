{"version":3,"file":"configprovider.js","sources":["configprovider.js"],"sourcesContent":["import { init } from '@baifendian/adhere-ui-css';\nimport { useUpdateEffect } from 'ahooks';\nimport React, { createContext, memo, useEffect, useState } from 'react';\nimport ConditionalRender from '@baifendian/adhere-ui-conditionalrender';\nimport Hooks from '@baifendian/adhere-ui-hooks';\nimport Intl from '@baifendian/adhere-util-intl';\nimport Resource from '@baifendian/adhere-util-resource';\nvar Context = createContext({});\nvar useForceUpdate = Hooks.useForceUpdate;\n/**\n * ConfigProvider\n * @constructor\n * @classdesc 全局配置 国际化、字典配置\n */\nvar ConfigProvider = function (props) {\n    var _a = props.intl, lang = _a.lang, locales = _a.locales, prefix = _a.prefix, mainLanguage = _a.mainLanguage, theme = props.theme, children = props.children, onIntlInit = props.onIntlInit;\n    var _b = useState(false), isIntlInit = _b[0], setIntlInit = _b[1];\n    var forceUpdate = useForceUpdate();\n    useEffect(function () {\n        Intl.init({\n            prefix: prefix || 'local',\n            currentLocale: lang,\n            locales: locales || {},\n            mainLanguage: mainLanguage || 'zh_CN',\n        }, Intl.isInit()).then(function () {\n            Resource.Dict.value.LocalsMoment.value[lang]();\n            if (!isIntlInit) {\n                setIntlInit(true);\n                if (onIntlInit)\n                    onIntlInit();\n            }\n            else {\n                forceUpdate();\n            }\n        });\n    }, [lang, locales, prefix]);\n    useEffect(function () {\n        init(theme);\n    }, []);\n    useUpdateEffect(function () {\n        init(theme);\n    }, [theme]);\n    return (React.createElement(ConditionalRender, { conditional: isIntlInit }, function () { return (React.createElement(Context.Provider, { value: {\n            intl: {\n                lang: lang,\n                prefix: prefix,\n                locales: locales || {},\n            },\n        } }, children())); }));\n};\n/**\n * ConfigProviderHOC\n */\nvar ConfigProviderHOC = memo(ConfigProvider);\n// @ts-ignore\nConfigProviderHOC.Context = Context;\nexport default ConfigProviderHOC;\n"],"names":["init","useUpdateEffect","React","createContext","memo","useEffect","useState","ConditionalRender","Hooks","Intl","Resource","Context","useForceUpdate","ConfigProvider","props","_a","intl","lang","locales","prefix","mainLanguage","theme","children","onIntlInit","_b","isIntlInit","setIntlInit","forceUpdate","currentLocale","isInit","then","Dict","value","LocalsMoment","createElement","conditional","Provider","ConfigProviderHOC"],"mappings":"OAASA,IAAuC,KAA3B,mCACZC,eAA+B,KAAR,gBACzBC,OAASC,cAAeC,KAAMC,UAAWC,QAAuB,KAAP,eACzDC,sBAAuB,iDACvBC,UAAW,qCACXC,SAAU,sCACVC,aAAc,mCACrB,IAAIC,QAAUR,cAAc,EAAE,EAC1BS,eAAiBJ,MAAMI,eAMvBC,eAAiB,SAAUC,GAC3B,IAAIC,EAAKD,EAAME,KAAMC,EAAOF,EAAGE,KAAMC,EAAUH,EAAGG,QAASC,EAASJ,EAAGI,OAAQC,EAAeL,EAAGK,aAAcC,EAAQP,EAAMO,MAAOC,EAAWR,EAAMQ,SAAUC,EAAaT,EAAMS,WAC9KC,EAAKlB,SAAS,CAAA,CAAK,EAAGmB,EAAaD,EAAG,GAAIE,EAAcF,EAAG,GAC3DG,EAAcf,eAAe,EAyBjC,OAxBAP,UAAU,WACNI,KAAKT,KAAK,CACNmB,OAAQA,GAAU,QAClBS,cAAeX,EACfC,QAASA,GAAW,GACpBE,aAAcA,GAAgB,OAClC,EAAGX,KAAKoB,OAAO,CAAC,EAAEC,KAAK,WACnBpB,SAASqB,KAAKC,MAAMC,aAAaD,MAAMf,GAAM,EACxCQ,EAMDE,EAAY,GALZD,EAAY,CAAA,CAAI,EACZH,GACAA,EAAW,EAKvB,CAAC,CACL,EAAG,CAACN,EAAMC,EAASC,EAAO,EAC1Bd,UAAU,WACNL,KAAKqB,CAAK,CACd,EAAG,EAAE,EACLpB,gBAAgB,WACZD,KAAKqB,CAAK,CACd,EAAG,CAACA,EAAM,EACFnB,MAAMgC,cAAc3B,kBAAmB,CAAE4B,YAAaV,CAAW,EAAG,WAAc,OAAQvB,MAAMgC,cAAcvB,QAAQyB,SAAU,CAAEJ,MAAO,CACzIhB,KAAM,CACFC,KAAMA,EACNE,OAAQA,EACRD,QAASA,GAAW,EACxB,CACJ,CAAE,EAAGI,EAAS,CAAE,CAAG,CAAE,CAC7B,EAIIe,kBAAoBjC,KAAKS,cAAc,EAE3CwB,kBAAkB1B,QAAUA,uBACb0B"}