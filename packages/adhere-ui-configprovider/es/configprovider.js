import React,{createContext,memo,useEffect,useState}from"react";import ConditionalRender from"@baifendian/adhere-ui-conditionalrender";import Hooks from"@baifendian/adhere-ui-hooks";import Intl from"@baifendian/adhere-util-intl";import Resource from"@baifendian/adhere-util-resource";var Context=createContext({}),useForceUpdate=Hooks.useForceUpdate,ConfigProvider=function(e){var t=e.intl,n=t.lang,o=t.locales,i=t.prefix,r=t.mainLanguage,a=e.children,l=e.onIntlInit,t=useState(!1),c=t[0],u=t[1],d=useForceUpdate();return useEffect(function(){Intl.init({prefix:i||"local",currentLocale:n,locales:o||{},mainLanguage:r||"zh_CN"},Intl.isInit()).then(function(){Resource.Dict.value.LocalsMoment.value[n](),c?d():(u(!0),l&&l())})},[n,o,i]),React.createElement(ConditionalRender,{conditional:c},function(){return React.createElement(Context.Provider,{value:{intl:{lang:n,prefix:i,locales:o||{}}}},a())})},ConfigProviderHOC=memo(ConfigProvider);ConfigProviderHOC.Context=Context;export default ConfigProviderHOC;
//# sourceMappingURL=configprovider.js.map
