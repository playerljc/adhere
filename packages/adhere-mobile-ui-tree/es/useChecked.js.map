{"version":3,"file":"useChecked.js","sources":["useChecked.js"],"sourcesContent":["var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport uniq from 'lodash.uniq';\nimport Util from '@baifendian/adhere-util';\nimport { DEFAULT_TREE_UTIL_CONFIG } from './Constant';\n/**\n * useChecked\n */\nfunction useChecked() {\n  function targetChildren(children) {\n    var _a;\n    return (_a = children === null || children === void 0 ? void 0 : children.filter(function (node) {\n      if (!('checkable' in node)) return true;\n      return node.checkable;\n    })) === null || _a === void 0 ? void 0 : _a.filter(function (node) {\n      if (!('disabled' in node)) return true;\n      return !node.disabled;\n    });\n  }\n  /**\n   * getChildrenKeys\n   * @description 递归获取所有子节点的key\n   * @param {TreeDataItem} node 触发时候的节点数据\n   * @return {string[]}\n   */\n  function getChildrenKeys(node) {\n    var _a;\n    var keys = [node[DEFAULT_TREE_UTIL_CONFIG.keyAttr]];\n    var children = targetChildren((_a = node.children) !== null && _a !== void 0 ? _a : []);\n    if (children) {\n      children.forEach(function (child) {\n        keys = keys.concat(getChildrenKeys(child));\n      });\n    }\n    return keys;\n  }\n  /**\n   * getDefaultCheckedKeysWithCheckStrictly\n   * @description 获取受控状态下的defaultCheckedKeys\n   * @param {TreeData} treeData\n   * @param {string[]} defaultCheckedKeys\n   * @return {string[]}\n   */\n  function getDefaultCheckedKeysWithCheckStrictly(treeData, defaultCheckedKeys) {\n    var checkedKeys = __spreadArray([], defaultCheckedKeys, true);\n    function up(_a) {\n      var key = _a.key,\n        checkedKeys = _a.checkedKeys,\n        parentId = _a.parentId,\n        childrenData = _a.childrenData;\n      var childrenKeys = childrenData === null || childrenData === void 0 ? void 0 : childrenData.filter(function (_a) {\n        var itemKey = _a.key;\n        return itemKey !== key;\n      }).map(function (node) {\n        return node[DEFAULT_TREE_UTIL_CONFIG.keyAttr];\n      });\n      var selfChecked;\n      selfChecked = childrenKeys.every(function (key) {\n        return checkedKeys.includes(key);\n      });\n      if (selfChecked) {\n        if (!checkedKeys.includes(parentId)) {\n          checkedKeys.push(parentId);\n        }\n      }\n      // @ts-ignore\n      var parentNodeData = Util.findParentNodeByKey(treeData, parentId, {\n        keyAttr: DEFAULT_TREE_UTIL_CONFIG.keyAttr\n      });\n      if (parentNodeData) {\n        up({\n          key: parentId,\n          checkedKeys: checkedKeys,\n          parentId: parentNodeData.key,\n          childrenData: targetChildren(parentNodeData.children)\n        });\n      }\n    }\n    defaultCheckedKeys.forEach(function (checkedKey) {\n      // @ts-ignore\n      var nodeData = Util.findNodeByKey(treeData, checkedKey, {\n        keyAttr: DEFAULT_TREE_UTIL_CONFIG.keyAttr\n      });\n      if (nodeData) {\n        var descendants = getChildrenKeys(nodeData);\n        // 自己加子孙 向下所有的\n        checkedKeys.push.apply(checkedKeys, __spreadArray([checkedKey], descendants, false));\n      }\n      // @ts-ignore\n      var parentNodeData = Util.findParentNodeByKey(treeData, checkedKey, {\n        keyAttr: DEFAULT_TREE_UTIL_CONFIG.keyAttr\n      });\n      if (parentNodeData) {\n        up({\n          key: checkedKey,\n          checkedKeys: checkedKeys,\n          parentId: parentNodeData.key,\n          childrenData: targetChildren(parentNodeData.children)\n        });\n      }\n    });\n    return uniq(checkedKeys);\n  }\n  /**\n   * updateParentChecked\n   * @description 向上处理\n   * @param {string} key 触发checked的节点key\n   * @param {boolean} checked 触发的时候选中状态\n   * @param {string[]} checkedKeys 存放所有checked的keys\n   * @param {string} parentId key的父亲key\n   * @param {TreeDataItem[]} childrenData key父亲的孩子\n   * @param {updateParentChecked} next updateParentChecked\n   */\n  function updateParentChecked(_a) {\n    // console.log('key', key);\n    // console.log('parentId', parentId);\n    // console.log('childrenData', childrenData);\n    // console.log('checked', checked);\n    var _b;\n    var key = _a.key,\n      checked = _a.checked,\n      checkedKeys = _a.checkedKeys,\n      parentId = _a.parentId,\n      childrenData = _a.childrenData,\n      next = _a.next;\n    var selfChecked = false;\n    var targetChildrenData = targetChildren(childrenData);\n    if (checked) {\n      var childrenKeys = targetChildrenData === null || targetChildrenData === void 0 ? void 0 : targetChildrenData.filter(function (_a) {\n        var itemKey = _a.key;\n        return itemKey !== key;\n      }).map(function (_a) {\n        var key = _a.key;\n        return key;\n      });\n      selfChecked = childrenKeys.every(function (key) {\n        return checkedKeys.includes(key);\n      });\n      if (selfChecked) {\n        if (!checkedKeys.includes(parentId)) {\n          checkedKeys.push(parentId);\n        }\n      }\n    } else {\n      if (checkedKeys.includes(parentId)) {\n        checkedKeys.splice(checkedKeys.findIndex(function (itemKey) {\n          return itemKey === parentId;\n        }), 1);\n      }\n    }\n    // 调用parent的updateParentChecked\n    next === null || next === void 0 ? void 0 : next((_b = {}, _b[DEFAULT_TREE_UTIL_CONFIG.keyAttr] = parentId, _b.checked = selfChecked, _b.checkedKeys = checkedKeys, _b));\n  }\n  /**\n   * handleCheck\n   * @description 处理选中逻辑\n   * @param {TreeDataItem} node 触发的节点nodeData\n   * @param {boolean} checked 触发的时候选中状态\n   * @param {string[]} checkedKeys 存放所有checked的keys\n   * @param {boolean} checkStrictly 是否受控\n   * @param {updateParentChecked} next\n   */\n  function handleCheck(_a) {\n    var _b;\n    var node = _a.node,\n      checked = _a.checked,\n      checkedKeys = _a.checkedKeys,\n      checkStrictly = _a.checkStrictly,\n      next = _a.next;\n    // 不受控\n    if (!checkStrictly) {\n      if (checked) {\n        if (!checkedKeys.includes(node[DEFAULT_TREE_UTIL_CONFIG.keyAttr])) {\n          checkedKeys.push(node[DEFAULT_TREE_UTIL_CONFIG.keyAttr]);\n        }\n      } else {\n        if (checkedKeys.includes(node[DEFAULT_TREE_UTIL_CONFIG.keyAttr])) {\n          checkedKeys.splice(checkedKeys.indexOf(node[DEFAULT_TREE_UTIL_CONFIG.keyAttr]), 1);\n        }\n      }\n      return;\n    }\n    // 获取当前节点子孙的keys\n    var childrenKeys = getChildrenKeys(node);\n    if (checked) {\n      // 添加当前节点及其子节点\n      childrenKeys.forEach(function (key) {\n        if (!checkedKeys.includes(key)) {\n          checkedKeys.push(key);\n        }\n      });\n    } else {\n      // 移除当前节点及其子节点\n      childrenKeys.forEach(function (key) {\n        var index = checkedKeys.indexOf(key);\n        if (index > -1) {\n          checkedKeys.splice(index, 1);\n        }\n      });\n    }\n    // 更新父节点的状态\n    next === null || next === void 0 ? void 0 : next((_b = {}, _b[DEFAULT_TREE_UTIL_CONFIG.keyAttr] = node[DEFAULT_TREE_UTIL_CONFIG.keyAttr], _b.checked = checked, _b.checkedKeys = checkedKeys, _b));\n  }\n  /**\n   * existsCheckableNodeInParentChildren\n   * @description 在parentChildren中是否存在checkable的节点\n   * @param children\n   */\n  function existsCheckableNodeInParentChildren(children) {\n    if (!children) return false;\n    return children === null || children === void 0 ? void 0 : children.some(function (node) {\n      if (!('checkable' in node)) return true;\n      return !!node.checkable;\n    });\n  }\n  return {\n    handleCheck: handleCheck,\n    updateParentChecked: updateParentChecked,\n    existsCheckableNodeInParentChildren: existsCheckableNodeInParentChildren,\n    getDefaultCheckedKeysWithCheckStrictly: getDefaultCheckedKeysWithCheckStrictly\n  };\n}\nexport default useChecked;"],"names":["__spreadArray","this","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","uniq","Util","DEFAULT_TREE_UTIL_CONFIG","useChecked","targetChildren","children","_a","filter","node","checkable","disabled","getChildrenKeys","keys","keyAttr","forEach","child","handleCheck","checked","checkedKeys","checkStrictly","next","childrenKeys","key","includes","push","index","indexOf","splice","_b","updateParentChecked","parentId","childrenData","selfChecked","targetChildrenData","map","every","findIndex","itemKey","existsCheckableNodeInParentChildren","some","getDefaultCheckedKeysWithCheckStrictly","treeData","defaultCheckedKeys","checkedKey","nodeData","findNodeByKey","parentNodeData","descendants","apply","findParentNodeByKey","up"],"mappings":"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"}