import _ErrorBlock from"antd-mobile/es/components/error-block";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};import classNames from"classnames";import React,{memo,useContext,useMemo}from"react";import ConfigProvider from"@baifendian/adhere-ui-configprovider";import Hooks from"@baifendian/adhere-ui-hooks";import Space from"@baifendian/adhere-ui-space";import Util from"@baifendian/adhere-util";import{DEFAULT_CHECKBOX_GAP,DEFAULT_CHECKBOX_WIDTH,DEFAULT_CHECKSTRICTLY,DEFAULT_ICON_GAP,DEFAULT_INDENT,DEFAULT_MULTIPLE,DEFAULT_SIZE,DEFAULT_TITLE_GAP,DEFAULT_TREE_CHECKABLE}from"./Constant";import TreeContext from"./TreeContext";import TreeNode from"./TreeNode";import TreeNodeContext from"./TreeNodeContext";import useChecked from"./useChecked";import useUtil from"./useUtil";var selectorPrefix="adhere-mobile-ui-tree",usePropToState=Hooks.usePropToState,Tree=memo(function(e){var G=e.className,t=e.style,n=e.treeData,r=(e.expandAll,e.expandedKeys),o=e.selectedKeys,u=e.switcherIcon,i=e.titleRender,c=e.icon,l=e.renderEmpty,a=e.size,s=e.checkable,m=e.checkedKeys,d=e.multiple,f=e.checkStrictly,E=e.loadData,p=e.loadedKeys,T=e.rowGap,C=e.checkboxWidth,h=e.checkboxGap,_=e.titleGap,y=e.iconGap,L=e.indent,D=e.onSelect,U=e.onExpand,k=e.onCheck,A=useContext(ConfigProvider.Context).media,e=useUtil(),x=e.omitDisabledKeys,P=e.getValueWithUnit,e=useChecked(),g=e.getDefaultCheckedKeysWithCheckStrictly,R=e.existsCheckableNodeInParentChildren,K=useMemo(function(){return null!=a?a:DEFAULT_SIZE},[a]),M=useMemo(function(){return Util.isEmpty(s)?DEFAULT_TREE_CHECKABLE:s},[s]),N=useMemo(function(){return Util.isEmpty(d)?DEFAULT_MULTIPLE:d},[d]),b=useMemo(function(){return Util.isEmpty(f)?DEFAULT_CHECKSTRICTLY:f},[f]),F=useMemo(function(){return null!=n?n:[]},[n]),e=useMemo(function(){return null!=r?r:[]},[r]),e=usePropToState(e),H=e[0],O=e[1],e=useMemo(function(){return x(F,null!=o?o:[])},[o]),e=usePropToState(e),B=e[0],w=e[1],e=useMemo(function(){var e=x(F,null!=m?m:[]);return b?g(F,e):e},[m,b]),e=usePropToState(e),W=e[0],X=e[1],e=useMemo(function(){return x(F,null!=p?p:[])},[p]),e=usePropToState(e),z=e[0],j=e[1],Y=useMemo(function(){return P(null!=C?C:DEFAULT_CHECKBOX_WIDTH,A)},[C,A]),Z=useMemo(function(){return P(null!=h?h:DEFAULT_CHECKBOX_GAP,A)},[h,A]),V=useMemo(function(){return P(null!=_?_:DEFAULT_TITLE_GAP,A)},[_,A]),q=useMemo(function(){return P(null!=y?y:DEFAULT_ICON_GAP,A)},[y,A]),J=useMemo(function(){return P(null!=L?L:DEFAULT_INDENT,A)},[L,A]),I=useMemo(function(){return null!=T?T:new Map([["small",5],["middle",15],["large",25]]).get(K)},[K,T]),S=useMemo(function(){return F.map(function(e){return React.createElement(TreeNodeContext.Provider,{value:{existsCheckableNodeInParentChildren:function(){return R(e.children)}}},React.createElement(TreeNode,__assign({level:0,id:e.key},e)))})},[F,u,i]),e=useMemo(function(){return!S.length},[S]),v=useMemo(function(){return{expandedKeys:function(){return H},selectedKeys:function(){return B},checkedKeys:function(){return W},loadedKeys:function(){return z},setSelectedKeys:w,setExpandedKeys:O,setCheckedKeys:X,setLoadedKeys:j,loadData:E,size:function(){return K},rowGap:function(){return null!=I?I:15},multiple:function(){return N},checkable:function(){return M},treeData:function(){return n},checkStrictly:function(){return b},icon:c,checkboxWidth:function(){return Y},checkboxGap:function(){return Z},titleGap:function(){return V},iconGap:function(){return q},indent:function(){return J},titleRender:i,switcherIcon:u,onSelect:D,onExpand:U,onCheck:k}},[H,B,W,z,I,K,N,M,n,E,f,c,Y,Z,V,q,J,i,u,D,U,k]);return React.createElement(TreeContext.Provider,{value:v},React.createElement("ul",{className:classNames(selectorPrefix,G),style:null!=t?t:{}},React.createElement(Space.Group,{direction:"vertical",size:I},e&&React.createElement("li",null,null!=(v=null==l?void 0:l())?v:React.createElement(_ErrorBlock,{status:"empty"})),!e&&S)))});Tree.displayName="Tree";export default Tree;
//# sourceMappingURL=Tree.js.map
