{"version":3,"file":"index.js","sources":["demo/index.js"],"sourcesContent":["\"use strict\"; // import { Tooltip } from 'antd';\n// import faker from 'faker';\n// import React, { useRef } from 'react';\n// import ReactDOM from 'react-dom';\n//\n// import { DislikeOutlined, LikeFilled } from '@ant-design/icons';\n// import AdhereConfigProvider from '@baifendian/adhere-ui-configprovider';\n// import DateDisplay from '@baifendian/adhere-ui-datedisplay';\n// import GlobalIndicator from '@baifendian/adhere-ui-globalindicator';\n//\n// import Comment from '../index';\n//\n// import '../index.less';\n// import './index.less';\n//\n// const CommentData = Array.from({ length: 300 }).map((t, index) => ({\n//   id: index + 1,\n//   name: faker.internet.userName(),\n//   time: faker.date.past(),\n//   icon: 'https://joeschmoe.io/api/v1/random',\n//   info: faker.hacker.phrase(),\n//   isMore: index % 2 === 0,\n//   like: faker.random.number(),\n//   dislike: faker.random.number(),\n// }));\n//\n// const ReplyData = Array.from({ length: 300 }).map((t, index) => ({\n//   id: index + 1,\n//   name: faker.internet.userName(),\n//   time: faker.date.past(),\n//   icon: 'https://joeschmoe.io/api/v1/random',\n//   info: faker.hacker.phrase(),\n//   isMore: index % 2 === 0,\n//   like: faker.random.number(),\n//   dislike: faker.random.number(),\n// }));\n//\n// function Wrap() {\n//   const ref = useRef();\n//\n//   function fetchCommentData({ page, limit }) {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         resolve({\n//           current: page,\n//           totalPage: CommentData.length / limit + (CommentData.length % limit !== 0 ? 1 : 0),\n//           list: CommentData.slice((page - 1) * limit, page * limit),\n//           totalCount: CommentData.length,\n//         });\n//       }, 1500);\n//     });\n//   }\n//\n//   function renderCommentAuthor(record) {\n//     return record?.name;\n//   }\n//\n//   function renderCommentAvatar(record) {\n//     return <img src={record?.icon} alt=\"\" />;\n//   }\n//\n//   function renderCommentActions(record, callback) {\n//     return [\n//       <Tooltip key=\"comment-basic-like\" title=\"Like\">\n//         <span\n//           onClick={() => {\n//             setTimeout(() => {\n//               record.like = faker.random.number();\n//               callback({ ...record });\n//             }, 1000);\n//           }}\n//         >\n//           <LikeFilled />\n//           <span style={{ marginLeft: 5 }}>{record.like}</span>\n//         </span>\n//       </Tooltip>,\n//       <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\n//         <span\n//           onClick={() => {\n//             setTimeout(() => {\n//               record.dislike = faker.random.number();\n//               callback({ ...record });\n//             }, 1000);\n//           }}\n//         >\n//           <DislikeOutlined />\n//           <span style={{ marginLeft: 5 }}>{record.dislike}</span>\n//         </span>\n//       </Tooltip>,\n//     ];\n//   }\n//\n//   function renderCommentContent(record) {\n//     return record?.info;\n//   }\n//\n//   function renderCommentDateTime(record) {\n//     return <DateDisplay.DateDisplayFromNow value={record?.time} />;\n//   }\n//\n//   function fetchReplyData({ page, limit, record }) {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         resolve({\n//           current: page,\n//           totalPage: ReplyData.length / limit + (ReplyData.length % limit !== 0 ? 1 : 0),\n//           list: ReplyData.slice((page - 1) * limit, page * limit),\n//           totalCount: ReplyData.length,\n//         });\n//       }, 1500);\n//     });\n//   }\n//\n//   function renderReplyAuthor(record) {\n//     return record?.name;\n//   }\n//\n//   function renderReplyAvatar(record) {\n//     return <img src={record?.icon} alt=\"\" />;\n//   }\n//\n//   function renderReplyActions(record, callback) {\n//     return [\n//       <Tooltip key=\"comment-basic-like\" title=\"Like\">\n//         <span\n//           onClick={() => {\n//             setTimeout(() => {\n//               record.like = faker.random.number();\n//               callback({ ...record });\n//             }, 1000);\n//           }}\n//         >\n//           <LikeFilled />\n//           <span style={{ marginLeft: 5 }}>{record.like}</span>\n//         </span>\n//       </Tooltip>,\n//       <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\n//         <span\n//           onClick={() => {\n//             setTimeout(() => {\n//               record.dislike = faker.random.number();\n//               callback({ ...record });\n//             }, 1000);\n//           }}\n//         >\n//           <DislikeOutlined />\n//           <span style={{ marginLeft: 5 }}>{record.dislike}</span>\n//         </span>\n//       </Tooltip>,\n//     ];\n//   }\n//\n//   function renderReplyContent(record) {\n//     return record?.info;\n//   }\n//\n//   function renderReplyDateTime(record) {\n//     return <DateDisplay.DateDisplayFromNow value={record?.time} />;\n//   }\n//\n//   function fetchReply({ id, record, reply }) {\n//     const indicator = GlobalIndicator.show(document.body, '');\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         resolve();\n//         GlobalIndicator.hide(indicator);\n//       }, 1000);\n//     });\n//   }\n//\n//   return (\n//     <div className=\"ScrollWrap\" ref={ref}>\n//       <div className=\"Scroll\">\n//         <Comment\n//           getScrollWrapContainer={() => ref.current}\n//           fetchCommentData={fetchCommentData}\n//           renderCommentActions={renderCommentActions}\n//           renderCommentAuthor={renderCommentAuthor}\n//           renderCommentAvatar={renderCommentAvatar}\n//           renderCommentContent={renderCommentContent}\n//           renderCommentDateTime={renderCommentDateTime}\n//           fetchReplyData={fetchReplyData}\n//           renderReplyActions={renderReplyActions}\n//           renderReplyAuthor={renderReplyAuthor}\n//           renderReplyAvatar={renderReplyAvatar}\n//           renderReplyContent={renderReplyContent}\n//           renderReplyDateTime={renderReplyDateTime}\n//           fetchReply={fetchReply}\n//           // replyLimit={1}\n//           // renderCommentLoading={() => <Spin />}\n//           // renderFirstLoading={() => <Spin />}\n//           // listProps={{\n//           //   scrollLoadProps: {\n//           //     renderLoading: () => <Spin />,\n//           //     renderEmpty: () => <Empty />,\n//           //     renderError: () => <div>error</div>,\n//           //   },\n//           // }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n//\n// ReactDOM.render(\n//   <AdhereConfigProvider\n//     intl={{\n//       lang: 'zh_CN',\n//       locales: {},\n//     }}\n//   >\n//     {() => <Wrap />}\n//   </AdhereConfigProvider>,\n//   document.getElementById('app'),\n// );"],"names":[],"mappings":"AAAA"}