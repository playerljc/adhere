{"version":3,"file":"watchmemoized.js","sources":["watchmemoized.js"],"sourcesContent":["\"use strict\";\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\r\n// @ts-ignore\r\nvar adhere_util_emitter_1 = __importDefault(require(\"@baifendian/adhere-util-emitter\"));\r\n// @ts-ignore\r\nvar adhere_util_1 = __importDefault(require(\"@baifendian/adhere-util\"));\r\n// @ts-ignore\r\nvar Events = adhere_util_emitter_1.default.Events;\r\n/**\r\n * 原始对象\r\n */\r\nvar srcObj = {};\r\n// 特殊符号\r\nvar SPECIAL_SYMBOL = '__';\r\n// 记录对象路径的变量\r\nvar PATH_SYMBOLS = [\r\n    SPECIAL_SYMBOL + \"parentName\" + SPECIAL_SYMBOL,\r\n    SPECIAL_SYMBOL + \"parent\" + SPECIAL_SYMBOL,\r\n];\r\nvar PRIVATE_SYMBOL = '$';\r\n// 创建代理排除的属性前缀\r\nvar CREATE_PROXY_EXCLUDE_PREFIX = [PRIVATE_SYMBOL, SPECIAL_SYMBOL];\r\n// 创建代理排除的属性后缀\r\nvar CREATE_PROXY_EXCLUDE_SUFFIX = [SPECIAL_SYMBOL];\r\n/**\r\n * isProxyProperty - 是否是代理属性 一般对$开头的属性不进行任何处理\r\n * @param property - Object\r\n * @return {boolean}\r\n */\r\nfunction isProxyProperty(property) {\r\n    return !(CREATE_PROXY_EXCLUDE_PREFIX.some(function (t) { return property.startsWith(t); }) ||\r\n        CREATE_PROXY_EXCLUDE_SUFFIX.some(function (t) { return property.endsWith(t); }));\r\n}\r\n/**\r\n * createProxy - 创建代理\r\n * @param srcObj\r\n * @param noProxy\r\n * @param events\r\n * @return Proxy;\r\n */\r\n// @ts-ignore\r\nfunction createProxy(srcObj, noProxy, events) {\r\n    var proxy = new Proxy(srcObj, {\r\n        /**\r\n         * set 陷阱的函数\r\n         * 一般都是在生命周期hook或者事件处理函数中对data的值进行修改，会触发set\r\n         * @param target\r\n         * @param key\r\n         * @param value\r\n         * @param receiver\r\n         * @return {boolean}\r\n         */\r\n        // @ts-ignore\r\n        set: function (target, key, value, receiver) {\r\n            // 如果不是代理属性则不处理\r\n            // 比如已$等开头的key不进行处理 或者是计算属性的key\r\n            if (!isProxyProperty(key)) {\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            // 是数组\r\n            if (adhere_util_1.default.isArray(target)) {\r\n                // console.log(target, key);\r\n                // console.log('是数组');\r\n                // 数组的原始长度\r\n                var srcLength = target.length;\r\n                var result = Reflect.set(target, key, value, receiver);\r\n                // 数组在data中的访问表达式\r\n                var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, key);\r\n                // 对原始对象赋值\r\n                noProxy[propertyAccessStr] = cloneDeep_1.default(target);\r\n                // 数组的当前长度\r\n                var targetLength = target.length;\r\n                // watch监听\r\n                events.trigger(propertyAccessStr, key, value);\r\n                // 数组是删除\r\n                if (targetLength < srcLength) {\r\n                    // @ts-ignore\r\n                    // console.log('删除', `key:${key}`, `value:${value}`);\r\n                }\r\n                // 数组是添加\r\n                else if (targetLength > srcLength) {\r\n                    // @ts-ignore\r\n                    // console.log('添加', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy(value, noProxy, events);\r\n                        // @ts-ignore\r\n                        value[PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // 数组修改\r\n                else {\r\n                    // @ts-ignore\r\n                    // console.log('修改', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy(value, noProxy, events);\r\n                        // @ts-ignore\r\n                        value[PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // console.log('数组完成');\r\n                return result;\r\n            }\r\n            // 是对象\r\n            if (adhere_util_1.default.isObject(target)) {\r\n                // console.log(target, key);\r\n                // console.log('是对象');\r\n                // 一个表达式路径 比如a.b.c.d这样的一个路径，key是target的一个键，但是target也是其他对象键的值，\r\n                // 这个方法会返回追溯到整个的一个访问链\r\n                var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, key);\r\n                // console.log('propertyAccessStr', propertyAccessStr);\r\n                var cloneValue = void 0;\r\n                // watch监听\r\n                // 新的值\r\n                var newVal = cloneDeep_1.default(value);\r\n                // console.log('newVal', newVal);\r\n                events.trigger(propertyAccessStr, value, newVal);\r\n                // 回写原始数据\r\n                if (!cloneValue) {\r\n                    cloneValue = cloneDeep_1.default(value);\r\n                }\r\n                noProxy[propertyAccessStr] = cloneValue;\r\n                // console.log('noProxy[propertyAccessStr]', noProxy[propertyAccessStr]);\r\n                // 如果不是私有属性且是对象或数组继续loop，给value进行代理\r\n                if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                    value = createProxy(value, noProxy, events);\r\n                    // 创建value的上下级关系(留着在watch中在原始对象中通过上下级关系找到变量)\r\n                    value[PATH_SYMBOLS[0]] = key;\r\n                    value[PATH_SYMBOLS[1]] = target /* [key] */;\r\n                }\r\n                // console.log('对象完成');\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            // console.log('完成');\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n        /**\r\n         * deleteProperty - 对象删除属性\r\n         * @param target - 目标对象\r\n         * @param property - 删除的属性\r\n         * @return Object\r\n         */\r\n        // @ts-ignore\r\n        deleteProperty: function (target, property) {\r\n            if (!isProxyProperty(property)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            // 不处理数组的删除\r\n            if (adhere_util_1.default.isArray(target)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, property);\r\n            // watch监听\r\n            events.trigger(propertyAccessStr, property);\r\n            delete noProxy[propertyAccessStr];\r\n            return Reflect.deleteProperty(target, property);\r\n        },\r\n    });\r\n    /**\r\n     * 继续进行迭代，迭代srcObj的所有属性，为srcObj的所有属性都进行代理\r\n     */\r\n    for (var p in srcObj) {\r\n        // obj是Array, 迭代数组\r\n        // p是0,1,2,3...等索引\r\n        var objItem = srcObj[p];\r\n        if (isProxyProperty(p) && (adhere_util_1.default.isObject(objItem) || adhere_util_1.default.isArray(objItem))) {\r\n            srcObj[p] = createProxy(objItem, noProxy, events);\r\n            // 创建value的上下级关系\r\n            // 如果srcObj是数组则记录数组的索引\r\n            objItem[PATH_SYMBOLS[0]] = adhere_util_1.default.isArray(srcObj) ? \"[\" + p + \"]\" : p;\r\n            objItem[PATH_SYMBOLS[1]] = srcObj;\r\n        }\r\n    }\r\n    return proxy;\r\n}\r\n/**\r\n * WatchMemoized\r\n */\r\nvar WatchMemoized = {\r\n    /**\r\n     * createRef - 创建一个值(其实就是在srcObj中创建一个属性)\r\n     * @param defaultValue\r\n     */\r\n    createRef: function (defaultValue) {\r\n        var property = Symbol.for(adhere_util_1.default.uuid());\r\n        var value = defaultValue;\r\n        // 在srcObj中创建这个值的property\r\n        Object.defineProperty(srcObj, property, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            set: function (curValue) {\r\n                var preVal = value;\r\n                // console.log('preValue', preVal);\r\n                value = curValue;\r\n                // console.log('curValue', curValue);\r\n                // @ts-ignore\r\n                adhere_util_emitter_1.default.trigger(Symbol.keyFor(property), { oldValue: preVal, newValue: curValue });\r\n            },\r\n            get: function () {\r\n                // console.log('get', value);\r\n                return value;\r\n            },\r\n        });\r\n        return [\r\n            // 获取值\r\n            function () { return srcObj[property]; },\r\n            // 设置值\r\n            function (value) {\r\n                srcObj[property] = value;\r\n            },\r\n            // 值在srcObj中的property\r\n            property,\r\n        ];\r\n    },\r\n    // 缓存\r\n    memoized: {\r\n        // 监控\r\n        watch: {\r\n            /**\r\n             * watchAll - 对依赖项的监控(所有依赖项全部发生改变才执行handler)\r\n             * @param handler\r\n             * @param depends - 依赖项数组(这个数组中的值是createRef返回值中的第三个参数)\r\n             */\r\n            all: function (handler, depends) {\r\n                // 依赖项可能重复，去重的操作\r\n                depends = Array.from(new Set(__spreadArrays(depends)));\r\n                // 所有订阅的句柄\r\n                var subscriptionHandlers = [];\r\n                // 记录有个少个改变\r\n                var changelog = [];\r\n                // 改变的处理\r\n                function changeDetail(type) {\r\n                    var change = changelog.find(function (t) { return t.type === type; });\r\n                    // @ts-ignore\r\n                    change.isChange = true;\r\n                    if (changelog.every(function (e) { return e.isChange; })) {\r\n                        changelog.forEach(function (e) { return (e.isChange = false); });\r\n                        handler();\r\n                    }\r\n                }\r\n                // 迭代进行订阅操作\r\n                depends.forEach(function (depend) {\r\n                    // @ts-ignore\r\n                    var type;\r\n                    // 获取订阅的type，订阅的type就是depend符号的字符串值\r\n                    if (adhere_util_1.default.isSymbol(depend)) {\r\n                        // @ts-ignore\r\n                        type = Symbol.keyFor(depend);\r\n                    }\r\n                    else {\r\n                        // @ts-ignore\r\n                        type = Symbol.keyFor(depend.property);\r\n                    }\r\n                    // changelog赋初值\r\n                    changelog.push({\r\n                        type: type,\r\n                        isChange: false,\r\n                    });\r\n                    /**\r\n                     * onSubscription - 订阅\r\n                     * @param oldValue\r\n                     * @param newValue\r\n                     */\r\n                    function onSubscription(_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        // 如果depend直接是符号那么就是浅比较\r\n                        if (adhere_util_1.default.isSymbol(depend)) {\r\n                            if (oldValue !== newValue) {\r\n                                changeDetail(type);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // 如果进行了细粒度的比较控制\r\n                            var config = depend;\r\n                            if (config.mode === 'light') {\r\n                                // 如果是浅比较\r\n                                if (oldValue !== newValue) {\r\n                                    changeDetail(type);\r\n                                }\r\n                            }\r\n                            else if (config.mode === 'deep') {\r\n                                // 如果是深比较\r\n                                if (adhere_util_1.default.isRef(oldValue) && adhere_util_1.default.isRef(newValue)) {\r\n                                    // 只有oldValue和newValue同时为引用类型的时候才进行深度比较(这里的引用类型是obj或者array，并没有function)\r\n                                    if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\r\n                                        changeDetail(type);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 否则进行浅比较\r\n                                    if (oldValue !== newValue) {\r\n                                        changeDetail(type);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (adhere_util_1.default.isFunction(config.mode)) {\r\n                                // 如果是自定义比较\r\n                                // @ts-ignore\r\n                                var result = config.mode({ oldValue: oldValue, newValue: newValue });\r\n                                if (!result) {\r\n                                    changeDetail(type);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // @ts-ignore\r\n                    subscriptionHandlers.push({\r\n                        type: type,\r\n                        handler: onSubscription,\r\n                    });\r\n                    // 进行订阅，依赖项就是订阅项\r\n                    adhere_util_emitter_1.default.on(type, onSubscription);\r\n                });\r\n                // 返回清空所有订阅句柄的方法\r\n                return function () {\r\n                    subscriptionHandlers.forEach(function (_a) {\r\n                        var type = _a.type, handler = _a.handler;\r\n                        adhere_util_emitter_1.default.remove(type, handler);\r\n                    });\r\n                };\r\n            },\r\n            /**\r\n             * watchRace - 对依赖项的监控(只要有一个依赖项发生改变的时候就执行handler)\r\n             * @param handler\r\n             * @param depends - 依赖项数组(这个数组中的值是createRef返回值中的第三个参数)\r\n             */\r\n            race: function (handler, depends) {\r\n                // 依赖项可能重复，去重的操作\r\n                depends = Array.from(new Set(__spreadArrays(depends)));\r\n                // 所有订阅的句柄\r\n                var subscriptionHandlers = [];\r\n                // 迭代进行订阅操作\r\n                depends.forEach(function (depend) {\r\n                    // @ts-ignore\r\n                    var type;\r\n                    // 获取订阅的type，订阅的type就是depend符号的字符串值\r\n                    if (adhere_util_1.default.isSymbol(depend)) {\r\n                        // @ts-ignore\r\n                        type = Symbol.keyFor(depend);\r\n                    }\r\n                    else {\r\n                        // @ts-ignore\r\n                        type = Symbol.keyFor(depend.property);\r\n                    }\r\n                    /**\r\n                     * onSubscription - 订阅\r\n                     * @param oldValue\r\n                     * @param newValue\r\n                     */\r\n                    function onSubscription(_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        // 如果depend直接是符号那么就是浅比较\r\n                        if (adhere_util_1.default.isSymbol(depend)) {\r\n                            if (oldValue !== newValue) {\r\n                                handler();\r\n                            }\r\n                        }\r\n                        else {\r\n                            // 如果进行了细粒度的比较控制\r\n                            var config = depend;\r\n                            if (config.mode === 'light') {\r\n                                // 如果是浅比较\r\n                                if (oldValue !== newValue) {\r\n                                    handler();\r\n                                }\r\n                            }\r\n                            else if (config.mode === 'deep') {\r\n                                // 如果是深比较\r\n                                if (adhere_util_1.default.isRef(oldValue) && adhere_util_1.default.isRef(newValue)) {\r\n                                    // 只有oldValue和newValue同时为引用类型的时候才进行深度比较(这里的引用类型是obj或者array，并没有function)\r\n                                    if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\r\n                                        handler();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 否则进行浅比较\r\n                                    if (oldValue !== newValue) {\r\n                                        handler();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (adhere_util_1.default.isFunction(config.mode)) {\r\n                                // 如果是自定义比较\r\n                                // @ts-ignore\r\n                                var result = config.mode({ oldValue: oldValue, newValue: newValue });\r\n                                if (!result) {\r\n                                    handler();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // @ts-ignore\r\n                    subscriptionHandlers.push({\r\n                        type: type,\r\n                        handler: onSubscription,\r\n                    });\r\n                    // 进行订阅，依赖项就是订阅项\r\n                    adhere_util_emitter_1.default.on(type, onSubscription);\r\n                });\r\n                // 返回清空所有订阅句柄的方法\r\n                return function () {\r\n                    subscriptionHandlers.forEach(function (_a) {\r\n                        var type = _a.type, handler = _a.handler;\r\n                        adhere_util_emitter_1.default.remove(type, handler);\r\n                    });\r\n                };\r\n            },\r\n        },\r\n        /**\r\n         * createMemoFun - 创建一个memo的Function\r\n         * @param handler\r\n         * @param stackMaxSize 最大保存栈\r\n         * @return Function\r\n         */\r\n        createMemoFun: function (handler, stackMaxSize) {\r\n            if (stackMaxSize === void 0) { stackMaxSize = 10; }\r\n            // 缓存的值\r\n            var memoized = [];\r\n            // 校验连\r\n            var checkChain = [\r\n                /**\r\n                 * 判断长度\r\n                 * @param depends\r\n                 * @param params\r\n                 * @return boolean\r\n                 */\r\n                function (depends, params) {\r\n                    return depends.length === params.length;\r\n                },\r\n                /**\r\n                 * 深比较 depends和params一个一个的比较\r\n                 * @param depends\r\n                 * @param params\r\n                 * @return boolean\r\n                 */\r\n                function (depends, params) {\r\n                    var result = true;\r\n                    for (var i = 0; i < depends.length; i++) {\r\n                        var dependVal = depends[i];\r\n                        var paramVal = params[i];\r\n                        if (adhere_util_1.default.isRef(dependVal) && adhere_util_1.default.isRef(paramVal)) {\r\n                            result = JSON.stringify(cloneDeep_1.default(dependVal)) === JSON.stringify(cloneDeep_1.default(paramVal));\r\n                        }\r\n                        else {\r\n                            result = dependVal === paramVal;\r\n                        }\r\n                        if (!result)\r\n                            break;\r\n                    }\r\n                    return result;\r\n                },\r\n            ];\r\n            /**\r\n             * check - 校验\r\n             * @param depends\r\n             * @param params\r\n             * @return boolean\r\n             */\r\n            function check(depends, params) {\r\n                var result = true;\r\n                for (var i = 0; i < checkChain.length; i++) {\r\n                    var chain = checkChain[i];\r\n                    // @ts-ignore\r\n                    result = chain(depends, params);\r\n                    if (!result)\r\n                        break;\r\n                }\r\n                return result;\r\n            }\r\n            /**\r\n             * find - 对params进行校验\r\n             * @param params\r\n             * @return boolean\r\n             */\r\n            function find(params) {\r\n                if (params === void 0) { params = []; }\r\n                var result = null;\r\n                for (var i = 0; i < memoized.length; i++) {\r\n                    // @ts-ignore\r\n                    var _a = memoized[i], resultVal = _a.resultVal, depends = _a.depends;\r\n                    var flag = check(depends, params);\r\n                    // @ts-ignore\r\n                    if (flag) {\r\n                        result = resultVal;\r\n                        break;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            /**\r\n             * getMemoized - 校验是否有符合的memoized\r\n             * @param arv\r\n             * @return object\r\n             */\r\n            function getMemoized(arv) {\r\n                if (arv === void 0) { arv = []; }\r\n                // @ts-ignore\r\n                var result = find(arv);\r\n                // console.log('find', result);\r\n                // 没找到返回值\r\n                if (!result) {\r\n                    // 调用函数\r\n                    // @ts-ignore\r\n                    result = handler.apply(this, arv);\r\n                    // console.log('callfinish', result);\r\n                    // 如果memoized大于stackMaxSize\r\n                    if (memoized.length >= stackMaxSize) {\r\n                        memoized.shift();\r\n                    }\r\n                    // @ts-ignore\r\n                    if (result instanceof Promise) {\r\n                        // console.log('函数返回值是Promise');\r\n                        // @ts-ignore\r\n                        var p = result.then(function (res) {\r\n                            // console.log('返回res', res);\r\n                            return res;\r\n                        });\r\n                        memoized.push({\r\n                            depends: arv,\r\n                            // @ts-ignore\r\n                            resultVal: p,\r\n                        });\r\n                        return p;\r\n                    }\r\n                    else {\r\n                        memoized.push({\r\n                            depends: arv,\r\n                            resultVal: result,\r\n                        });\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            return function () {\r\n                var params = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    params[_i] = arguments[_i];\r\n                }\r\n                // @ts-ignore\r\n                return getMemoized.call(this, params || []);\r\n            };\r\n        },\r\n    },\r\n    // 监控\r\n    watch: {\r\n        /**\r\n         * create - 创建一个watch对象\r\n         * @param srcObj\r\n         * @param listeners\r\n         * @return Function\r\n         */\r\n        create: function (srcObj, listeners) {\r\n            var events = new Events();\r\n            // 注册事件\r\n            if (!adhere_util_1.default.isEmpty(listeners)) {\r\n                for (var type in listeners) {\r\n                    events.on(type, listeners[type]);\r\n                }\r\n            }\r\n            // 未被代理的对象\r\n            var noProxy = cloneDeep_1.default(srcObj);\r\n            // 创建代理对象\r\n            var proxy = createProxy(srcObj, noProxy, events);\r\n            return {\r\n                value: proxy,\r\n                on: function (expression, handler) {\r\n                    events.on(expression, handler);\r\n                },\r\n                remove: function (expression, handler) {\r\n                    events.remove(expression, handler);\r\n                },\r\n            };\r\n        },\r\n    },\r\n};\r\nexports.default = WatchMemoized;\r\n"],"names":["__spreadArrays","this","s","i","il","arguments","length","r","Array","k","a","j","jl","__importDefault","mod","__esModule","default","Object","defineProperty","exports","value","cloneDeep_1","require","adhere_util_emitter_1","adhere_util_1","Events","srcObj","SPECIAL_SYMBOL","PATH_SYMBOLS","PRIVATE_SYMBOL","CREATE_PROXY_EXCLUDE_PREFIX","CREATE_PROXY_EXCLUDE_SUFFIX","isProxyProperty","property","some","t","startsWith","endsWith","createProxy","noProxy","events","p","proxy","Proxy","set","target","key","receiver","Reflect","isArray","srcLength","result","propertyAccessStr","getPropertyVisitPathStr","targetLength","trigger","isObject","cloneValue","newVal","deleteProperty","objItem","WatchMemoized","createRef","defaultValue","Symbol","for","uuid","enumerable","configurable","curValue","preVal","keyFor","oldValue","newValue","get","memoized","watch","all","handler","depends","from","Set","subscriptionHandlers","changelog","changeDetail","type","find","isChange","every","e","forEach","depend","onSubscription","_a","config","isSymbol","mode","isRef","JSON","stringify","isFunction","push","on","remove","race","createMemoFun","stackMaxSize","checkChain","params","dependVal","paramVal","resultVal","chain","check","_i","arv","apply","shift","Promise","then","res","call","create","listeners","isEmpty","expression"],"mappings":"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"}