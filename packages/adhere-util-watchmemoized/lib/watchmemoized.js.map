{"version":3,"file":"watchmemoized.js","sources":["watchmemoized.js"],"sourcesContent":["\"use strict\";\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\r\nvar adhere_util_1 = __importDefault(require(\"@baifendian/adhere-util\"));\r\nvar adhere_util_emitter_1 = __importDefault(require(\"@baifendian/adhere-util-emitter\"));\r\nvar Events = adhere_util_emitter_1.default.Events;\r\n/**\r\n * 原始对象\r\n */\r\nvar srcObj = {};\r\n// 特殊符号\r\nvar SPECIAL_SYMBOL = '__';\r\n// 记录对象路径的变量\r\nvar PATH_SYMBOLS = [\r\n    SPECIAL_SYMBOL + \"parentName\" + SPECIAL_SYMBOL,\r\n    SPECIAL_SYMBOL + \"parent\" + SPECIAL_SYMBOL,\r\n];\r\nvar PRIVATE_SYMBOL = '$';\r\n// 创建代理排除的属性前缀\r\nvar CREATE_PROXY_EXCLUDE_PREFIX = [PRIVATE_SYMBOL, SPECIAL_SYMBOL];\r\n// 创建代理排除的属性后缀\r\nvar CREATE_PROXY_EXCLUDE_SUFFIX = [SPECIAL_SYMBOL];\r\n/**\r\n * isProxyProperty - 是否是代理属性 一般对$开头的属性不进行任何处理\r\n * @param property - Object\r\n * @return {boolean}\r\n */\r\nfunction isProxyProperty(property) {\r\n    return !(CREATE_PROXY_EXCLUDE_PREFIX.some(function (t) { return property.startsWith(t); }) ||\r\n        CREATE_PROXY_EXCLUDE_SUFFIX.some(function (t) { return property.endsWith(t); }));\r\n}\r\n/**\r\n * createProxy - 创建代理\r\n * @param srcObj\r\n * @param noProxy\r\n * @param events\r\n * @return Proxy;\r\n */\r\nfunction createProxy(srcObj, noProxy, events) {\r\n    var proxy = new Proxy(srcObj, {\r\n        /**\r\n         * set 陷阱的函数\r\n         * 一般都是在生命周期hook或者事件处理函数中对data的值进行修改，会触发set\r\n         * @param target\r\n         * @param key\r\n         * @param value\r\n         * @param receiver\r\n         * @return {boolean}\r\n         */\r\n        set: function (target, key, value, receiver) {\r\n            // 如果不是代理属性则不处理\r\n            // 比如已$等开头的key不进行处理 或者是计算属性的key\r\n            if (!isProxyProperty(key)) {\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            // 是数组\r\n            if (adhere_util_1.default.isArray(target)) {\r\n                // console.log(target, key);\r\n                // console.log('是数组');\r\n                // 数组的原始长度\r\n                var srcLength = target.length;\r\n                var result = Reflect.set(target, key, value, receiver);\r\n                // 数组在data中的访问表达式\r\n                var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, key);\r\n                // 对原始对象赋值\r\n                noProxy[propertyAccessStr] = cloneDeep_1.default(target);\r\n                // 数组的当前长度\r\n                var targetLength = target.length;\r\n                // watch监听\r\n                events.trigger(propertyAccessStr, key, value);\r\n                // 数组是删除\r\n                if (targetLength < srcLength) {\r\n                    // @ts-ignore\r\n                    // console.log('删除', `key:${key}`, `value:${value}`);\r\n                }\r\n                // 数组是添加\r\n                else if (targetLength > srcLength) {\r\n                    // @ts-ignore\r\n                    // console.log('添加', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy(value, noProxy, events);\r\n                        // @ts-ignore\r\n                        value[PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // 数组修改\r\n                else {\r\n                    // @ts-ignore\r\n                    // console.log('修改', `key:${key}`, `value:${value}`);\r\n                    // 如果可以则会给value继续创建代理\r\n                    if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                        value = createProxy(value, noProxy, events);\r\n                        // @ts-ignore\r\n                        value[PATH_SYMBOLS[0]] = \"[\" + key + \"]\";\r\n                        value[PATH_SYMBOLS[1]] = target;\r\n                        result = Reflect.set(target, key, value, receiver);\r\n                    }\r\n                }\r\n                // console.log('数组完成');\r\n                return result;\r\n            }\r\n            // 是对象\r\n            if (adhere_util_1.default.isObject(target)) {\r\n                // console.log(target, key);\r\n                // console.log('是对象');\r\n                // 一个表达式路径 比如a.b.c.d这样的一个路径，key是target的一个键，但是target也是其他对象键的值，\r\n                // 这个方法会返回追溯到整个的一个访问链\r\n                var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, key);\r\n                // console.log('propertyAccessStr', propertyAccessStr);\r\n                var cloneValue = void 0;\r\n                // watch监听\r\n                // 新的值\r\n                var newVal = cloneDeep_1.default(value);\r\n                // console.log('newVal', newVal);\r\n                events.trigger(propertyAccessStr, value, newVal);\r\n                // 回写原始数据\r\n                if (!cloneValue) {\r\n                    cloneValue = cloneDeep_1.default(value);\r\n                }\r\n                noProxy[propertyAccessStr] = cloneValue;\r\n                // console.log('noProxy[propertyAccessStr]', noProxy[propertyAccessStr]);\r\n                // 如果不是私有属性且是对象或数组继续loop，给value进行代理\r\n                if ((adhere_util_1.default.isObject(value) || adhere_util_1.default.isArray(value)) && !(PATH_SYMBOLS[0] in value)) {\r\n                    value = createProxy(value, noProxy, events);\r\n                    // 创建value的上下级关系(留着在watch中在原始对象中通过上下级关系找到变量)\r\n                    value[PATH_SYMBOLS[0]] = key;\r\n                    value[PATH_SYMBOLS[1]] = target /* [key] */;\r\n                }\r\n                // console.log('对象完成');\r\n                return Reflect.set(target, key, value, receiver);\r\n            }\r\n            // console.log('完成');\r\n            return Reflect.set(target, key, value, receiver);\r\n        },\r\n        /**\r\n         * deleteProperty - 对象删除属性\r\n         * @param target - 目标对象\r\n         * @param property - 删除的属性\r\n         * @return Object\r\n         */\r\n        deleteProperty: function (target, property) {\r\n            if (!isProxyProperty(property)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            // 不处理数组的删除\r\n            if (adhere_util_1.default.isArray(target)) {\r\n                return Reflect.deleteProperty(target, property);\r\n            }\r\n            var propertyAccessStr = adhere_util_1.default.getPropertyVisitPathStr(target, property);\r\n            // watch监听\r\n            events.trigger(propertyAccessStr, property);\r\n            delete noProxy[propertyAccessStr];\r\n            return Reflect.deleteProperty(target, property);\r\n        },\r\n    });\r\n    /**\r\n     * 继续进行迭代，迭代srcObj的所有属性，为srcObj的所有属性都进行代理\r\n     */\r\n    for (var p in srcObj) {\r\n        // obj是Array, 迭代数组\r\n        // p是0,1,2,3...等索引\r\n        var objItem = srcObj[p];\r\n        if (isProxyProperty(p) && (adhere_util_1.default.isObject(objItem) || adhere_util_1.default.isArray(objItem))) {\r\n            srcObj[p] = createProxy(objItem, noProxy, events);\r\n            // 创建value的上下级关系\r\n            // 如果srcObj是数组则记录数组的索引\r\n            objItem[PATH_SYMBOLS[0]] = adhere_util_1.default.isArray(srcObj) ? \"[\" + p + \"]\" : p;\r\n            objItem[PATH_SYMBOLS[1]] = srcObj;\r\n        }\r\n    }\r\n    return proxy;\r\n}\r\n/**\r\n * WatchMemoized\r\n */\r\nvar WatchMemoized = {\r\n    /**\r\n     * createRef - 创建一个值(其实就是在srcObj中创建一个属性)\r\n     * @param defaultValue\r\n     */\r\n    createRef: function (defaultValue) {\r\n        var property = Symbol.for(adhere_util_1.default.uuid());\r\n        var value = defaultValue;\r\n        // 在srcObj中创建这个值的property\r\n        Object.defineProperty(srcObj, property, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            set: function (curValue) {\r\n                var preVal = value;\r\n                // console.log('preValue', preVal);\r\n                value = curValue;\r\n                // console.log('curValue', curValue);\r\n                adhere_util_emitter_1.default.trigger(Symbol.keyFor(property), {\r\n                    oldValue: preVal,\r\n                    newValue: curValue,\r\n                });\r\n            },\r\n            get: function () {\r\n                // console.log('get', value);\r\n                return value;\r\n            },\r\n        });\r\n        return [\r\n            // 获取值\r\n            function () { return srcObj[property]; },\r\n            // 设置值\r\n            function (value) {\r\n                srcObj[property] = value;\r\n            },\r\n            // 值在srcObj中的property\r\n            property,\r\n        ];\r\n    },\r\n    // 缓存\r\n    memoized: {\r\n        // 监控\r\n        watch: {\r\n            /**\r\n             * watchAll - 对依赖项的监控(所有依赖项全部发生改变才执行handler)\r\n             * @param handler\r\n             * @param depends - 依赖项数组(这个数组中的值是createRef返回值中的第三个参数)\r\n             */\r\n            all: function (handler, depends) {\r\n                // 依赖项可能重复，去重的操作\r\n                depends = Array.from(new Set(__spreadArrays(depends)));\r\n                // 所有订阅的句柄\r\n                var subscriptionHandlers = [];\r\n                // 记录有个少个改变\r\n                var changelog = [];\r\n                // 改变的处理\r\n                function changeDetail(type) {\r\n                    var change = changelog.find(function (t) { return t.type === type; });\r\n                    if (change) {\r\n                        change.isChange = true;\r\n                    }\r\n                    if (changelog.every(function (e) { return e.isChange; })) {\r\n                        changelog.forEach(function (e) { return (e.isChange = false); });\r\n                        handler();\r\n                    }\r\n                }\r\n                // 迭代进行订阅操作\r\n                depends.forEach(function (depend) {\r\n                    var type;\r\n                    // 获取订阅的type，订阅的type就是depend符号的字符串值\r\n                    if (adhere_util_1.default.isSymbol(depend)) {\r\n                        type = Symbol.keyFor(depend);\r\n                    }\r\n                    else {\r\n                        type = Symbol.keyFor(depend.property);\r\n                    }\r\n                    // changelog赋初值\r\n                    changelog.push({\r\n                        type: type,\r\n                        isChange: false,\r\n                    });\r\n                    /**\r\n                     * onSubscription - 订阅\r\n                     * @param oldValue\r\n                     * @param newValue\r\n                     */\r\n                    function onSubscription(_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        // 如果depend直接是符号那么就是浅比较\r\n                        if (adhere_util_1.default.isSymbol(depend)) {\r\n                            if (oldValue !== newValue) {\r\n                                changeDetail(type);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // 如果进行了细粒度的比较控制\r\n                            var config = depend;\r\n                            if (config.mode === 'light') {\r\n                                // 如果是浅比较\r\n                                if (oldValue !== newValue) {\r\n                                    changeDetail(type);\r\n                                }\r\n                            }\r\n                            else if (config.mode === 'deep') {\r\n                                // 如果是深比较\r\n                                if (adhere_util_1.default.isRef(oldValue) && adhere_util_1.default.isRef(newValue)) {\r\n                                    // 只有oldValue和newValue同时为引用类型的时候才进行深度比较(这里的引用类型是obj或者array，并没有function)\r\n                                    if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\r\n                                        changeDetail(type);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 否则进行浅比较\r\n                                    if (oldValue !== newValue) {\r\n                                        changeDetail(type);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (adhere_util_1.default.isFunction(config.mode)) {\r\n                                // 如果是自定义比较\r\n                                var result = config.mode(oldValue, newValue);\r\n                                if (!result) {\r\n                                    changeDetail(type);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    subscriptionHandlers.push({\r\n                        type: type,\r\n                        handler: onSubscription,\r\n                    });\r\n                    // 进行订阅，依赖项就是订阅项\r\n                    adhere_util_emitter_1.default.on(type, onSubscription);\r\n                });\r\n                // 返回清空所有订阅句柄的方法\r\n                return function () {\r\n                    subscriptionHandlers.forEach(function (_a) {\r\n                        var type = _a.type, handler = _a.handler;\r\n                        adhere_util_emitter_1.default.remove(type, handler);\r\n                    });\r\n                };\r\n            },\r\n            /**\r\n             * watchRace - 对依赖项的监控(只要有一个依赖项发生改变的时候就执行handler)\r\n             * @param handler\r\n             * @param depends - 依赖项数组(这个数组中的值是createRef返回值中的第三个参数)\r\n             */\r\n            race: function (handler, depends) {\r\n                // 依赖项可能重复，去重的操作\r\n                depends = Array.from(new Set(__spreadArrays(depends)));\r\n                // 所有订阅的句柄\r\n                var subscriptionHandlers = [];\r\n                // 迭代进行订阅操作\r\n                depends.forEach(function (depend) {\r\n                    var type;\r\n                    // 获取订阅的type，订阅的type就是depend符号的字符串值\r\n                    if (adhere_util_1.default.isSymbol(depend)) {\r\n                        type = Symbol.keyFor(depend);\r\n                    }\r\n                    else {\r\n                        type = Symbol.keyFor(depend.property);\r\n                    }\r\n                    /**\r\n                     * onSubscription - 订阅\r\n                     * @param oldValue\r\n                     * @param newValue\r\n                     */\r\n                    function onSubscription(_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        // 如果depend直接是符号那么就是浅比较\r\n                        if (adhere_util_1.default.isSymbol(depend)) {\r\n                            if (oldValue !== newValue) {\r\n                                handler();\r\n                            }\r\n                        }\r\n                        else {\r\n                            // 如果进行了细粒度的比较控制\r\n                            var config = depend;\r\n                            if (config.mode === 'light') {\r\n                                // 如果是浅比较\r\n                                if (oldValue !== newValue) {\r\n                                    handler();\r\n                                }\r\n                            }\r\n                            else if (config.mode === 'deep') {\r\n                                // 如果是深比较\r\n                                if (adhere_util_1.default.isRef(oldValue) && adhere_util_1.default.isRef(newValue)) {\r\n                                    // 只有oldValue和newValue同时为引用类型的时候才进行深度比较(这里的引用类型是obj或者array，并没有function)\r\n                                    if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\r\n                                        handler();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 否则进行浅比较\r\n                                    if (oldValue !== newValue) {\r\n                                        handler();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (adhere_util_1.default.isFunction(config.mode)) {\r\n                                // 如果是自定义比较\r\n                                var result = config.mode(oldValue, newValue);\r\n                                if (!result) {\r\n                                    handler();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    subscriptionHandlers.push({\r\n                        type: type,\r\n                        handler: onSubscription,\r\n                    });\r\n                    // 进行订阅，依赖项就是订阅项\r\n                    adhere_util_emitter_1.default.on(type, onSubscription);\r\n                });\r\n                // 返回清空所有订阅句柄的方法\r\n                return function () {\r\n                    subscriptionHandlers.forEach(function (_a) {\r\n                        var type = _a.type, handler = _a.handler;\r\n                        adhere_util_emitter_1.default.remove(type, handler);\r\n                    });\r\n                };\r\n            },\r\n        },\r\n        /**\r\n         * createMemoFun - 创建一个memo的Function\r\n         * @param handler\r\n         * @param stackMaxSize 最大保存栈\r\n         * @return Function\r\n         */\r\n        createMemoFun: function (handler, stackMaxSize) {\r\n            if (stackMaxSize === void 0) { stackMaxSize = 10; }\r\n            // 缓存的值\r\n            var memoized = [];\r\n            // 校验连\r\n            var checkChain = [\r\n                /**\r\n                 * 判断长度\r\n                 * @param depends\r\n                 * @param params\r\n                 * @return boolean\r\n                 */\r\n                function (depends, params) {\r\n                    return depends.length === params.length;\r\n                },\r\n                /**\r\n                 * 深比较 depends和params一个一个的比较\r\n                 * @param depends\r\n                 * @param params\r\n                 * @return boolean\r\n                 */\r\n                function (depends, params) {\r\n                    var result = true;\r\n                    for (var i = 0; i < depends.length; i++) {\r\n                        var dependVal = depends[i];\r\n                        var paramVal = params[i];\r\n                        if (adhere_util_1.default.isRef(dependVal) && adhere_util_1.default.isRef(paramVal)) {\r\n                            result = JSON.stringify(cloneDeep_1.default(dependVal)) === JSON.stringify(cloneDeep_1.default(paramVal));\r\n                        }\r\n                        else {\r\n                            result = dependVal === paramVal;\r\n                        }\r\n                        if (!result)\r\n                            break;\r\n                    }\r\n                    return result;\r\n                },\r\n            ];\r\n            /**\r\n             * check - 校验\r\n             * @param depends\r\n             * @param params\r\n             * @return boolean\r\n             */\r\n            function check(depends, params) {\r\n                var result = true;\r\n                for (var i = 0; i < checkChain.length; i++) {\r\n                    var chain = checkChain[i];\r\n                    result = chain(depends, params);\r\n                    if (!result)\r\n                        break;\r\n                }\r\n                return result;\r\n            }\r\n            /**\r\n             * find - 对params进行校验\r\n             * @param params\r\n             * @return boolean\r\n             */\r\n            function find(params) {\r\n                if (params === void 0) { params = []; }\r\n                var result = null;\r\n                for (var i = 0; i < memoized.length; i++) {\r\n                    var _a = memoized[i], resultVal = _a.resultVal, depends = _a.depends;\r\n                    var flag = check(depends, params);\r\n                    if (flag) {\r\n                        result = resultVal;\r\n                        break;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            /**\r\n             * getMemoized - 校验是否有符合的memoized\r\n             * @param arv\r\n             * @return object\r\n             */\r\n            function getMemoized(arv) {\r\n                if (arv === void 0) { arv = []; }\r\n                var result = find(arv);\r\n                // console.log('find', result);\r\n                // 没找到返回值\r\n                if (!result) {\r\n                    // 调用函数\r\n                    // @ts-ignore\r\n                    result = handler.apply(this, arv);\r\n                    // console.log('callfinish', result);\r\n                    // 如果memoized大于stackMaxSize\r\n                    if (memoized.length >= stackMaxSize) {\r\n                        memoized.shift();\r\n                    }\r\n                    // @ts-ignore\r\n                    if (result instanceof Promise) {\r\n                        // console.log('函数返回值是Promise');\r\n                        var p = result.then(function (res) {\r\n                            // console.log('返回res', res);\r\n                            return res;\r\n                        });\r\n                        memoized.push({\r\n                            depends: arv,\r\n                            resultVal: p,\r\n                        });\r\n                        return p;\r\n                    }\r\n                    else {\r\n                        memoized.push({\r\n                            depends: arv,\r\n                            resultVal: result,\r\n                        });\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            return function () {\r\n                var params = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    params[_i] = arguments[_i];\r\n                }\r\n                // @ts-ignore\r\n                return getMemoized.call(this, params || []);\r\n            };\r\n        },\r\n    },\r\n    // 监控\r\n    watch: {\r\n        /**\r\n         * create - 创建一个watch对象\r\n         * @param srcObj\r\n         * @param listeners\r\n         * @return Function\r\n         */\r\n        create: function (srcObj, listeners) {\r\n            var events = new Events();\r\n            // 注册事件\r\n            if (!adhere_util_1.default.isEmpty(listeners)) {\r\n                for (var type in listeners) {\r\n                    events.on(type, listeners[type]);\r\n                }\r\n            }\r\n            // 未被代理的对象\r\n            var noProxy = cloneDeep_1.default(srcObj);\r\n            // 创建代理对象\r\n            var proxy = createProxy(srcObj, noProxy, events);\r\n            return {\r\n                value: proxy,\r\n                on: function (expression, handler) {\r\n                    events.on(expression, handler);\r\n                },\r\n                remove: function (expression, handler) {\r\n                    events.remove(expression, handler);\r\n                },\r\n            };\r\n        },\r\n    },\r\n};\r\nexports.default = WatchMemoized;\r\n"],"names":["__spreadArrays","this","s","i","il","arguments","length","r","Array","k","a","j","jl","__importDefault","mod","__esModule","default","cloneDeep_1","Object","defineProperty","exports","value","require","adhere_util_1","adhere_util_emitter_1","Events","srcObj","SPECIAL_SYMBOL","PATH_SYMBOLS","PRIVATE_SYMBOL","CREATE_PROXY_EXCLUDE_PREFIX","CREATE_PROXY_EXCLUDE_SUFFIX","isProxyProperty","property","some","t","startsWith","endsWith","createProxy","noProxy","events","p","proxy","Proxy","set","target","key","receiver","result","propertyAccessStr","cloneValue","newVal","isArray","srcLength","Reflect","getPropertyVisitPathStr","targetLength","trigger","isObject","deleteProperty","objItem","WatchMemoized","createRef","defaultValue","Symbol","for","uuid","enumerable","configurable","curValue","preVal","keyFor","oldValue","newValue","get","memoized","watch","all","handler","depends","from","Set","subscriptionHandlers","changelog","changeDetail","type","change","find","isChange","every","e","forEach","depend","onSubscription","_a","config","isSymbol","mode","isRef","JSON","stringify","isFunction","push","on","remove","race","createMemoFun","stackMaxSize","checkChain","params","dependVal","paramVal","resultVal","chain","_i","arv","apply","shift","Promise","then","res","call","create","listeners","isEmpty","expression"],"mappings":"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"}