var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,t){var a={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(a[n[r]]=e[n[r]]);return a};import React,{memo}from"react";import TreeSelect from"./TreeSelect";import useAsyncTreeSelect from"./useAsyncTreeSelect";import useTreeSelectLeaf from"./useTreeSelectLeaf";var AsyncTreeLeafSelect=function(e){var t=e.cascadeParams,a=e.onDataSourceChange,r=e.fetchBranch,n=e.fetchData,c=e.defaultId,o=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","fetchData","defaultId"]),e=useAsyncTreeSelect({cascadeParams:t,onDataSourceChange:a,fetchBranch:r,fetchData:n,defaultId:c,value:o.value,treeDataSimpleMode:o.treeDataSimpleMode}),t=e.treeData,a=e.onLoadData,s=e.onChange,r=useTreeSelectLeaf(t);return React.createElement(TreeSelect,__assign({},o,{virtual:!1,treeData:r,loadData:a,onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s(o.onChange,e)}}))};export default memo(AsyncTreeLeafSelect);
//# sourceMappingURL=AsyncTreeLeafSelect.js.map
