var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var a,t=1,r=arguments.length;t<r;t++)for(var n in a=arguments[t])Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,a){var t={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,n=Object.getOwnPropertySymbols(e);r<n.length;r++)a.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(t[n[r]]=e[n[r]]);return t};import React,{memo}from"react";import Cascader from"./CascaderTreeSelect";import useAsyncCascader from"./useAsyncCascader";var AsyncCascader=function(e){var a=e.cascadeParams,t=e.onDataSourceChange,r=e.fetchBranch,n=e.fetchData,o=e.defaultId,c=e.treeDataSimpleMode,s=e.onChange,e=__rest(e,["cascadeParams","onDataSourceChange","fetchBranch","fetchData","defaultId","treeDataSimpleMode","onChange"]),a=useAsyncCascader({cascadeParams:a,onDataSourceChange:t,fetchBranch:r,fetchData:n,defaultId:o,value:e.value,treeDataSimpleMode:c}),t=a.treeData,r=a.onLoadData,f=a.onChange;return React.createElement(Cascader,__assign({},e,{options:t,loadData:r,onChange:function(){for(var e=[],a=0;a<arguments.length;a++)e[a]=arguments[a];return f(s,e)}}))};export default memo(AsyncCascader);
//# sourceMappingURL=AsyncCascader.js.map
